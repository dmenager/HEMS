(in-package :hems)

(defparameter print-special* nil)
(defparameter calls-to-cost* 0)

#| Reference circular structures rather than print them all |#
(setf *print-circle* t)

;; dependent-id = dependent variable identifier of CPD
;; indentifiers = hash table of instance number for each var. If A is dependent var, and B C are free parameters (A B C) is P(A | B C)
;; dependent-var = dependent variable of CPD
;; vars = hash table of variables in the conditional probability density.
;; types = hash table of variables taking values of percept, belief, action, intention, or goal
;; concept-ids = hash table of concept ids for vars
;; qualified-vars = hash table of fully qualified variables in conditional probability density
;; var-value-map = hash table  of bindings from variable value to a number
;; cardinalities = array of cardinalities for each variable
;; step-sizes = array of number of steps to take before reaching variable's next assignment, for each variable
;; assignments = hash table of all possible variable assignments
;; counts = hash table of counts for assignments
;; count = total number of times this CPD was observed
;; lvl = height of CPD in bayesian network
(defstruct table-cpd
  dependent-id
  identifiers
  dependent-var
  vars
  types
  concept-ids
  qualified-vars
  var-value-map
  cardinalities
  step-sizes
  assignments
  counts
  count
  (lvl 1))

;; id = unique identifier for rule
;; condiitons = container for rule left-hand side.
;; probability = probability associated with left-hand side. This is the rule right-hand side
;; block = block denoting cases covered by rule
;; certain-block = block denoting cases always covered by rule
;; avoid-list = cases covered by the rule block that are outside of the concept block
;; redundancies = cases that are in the rule block that are already covered by the rule set
;; count = total number of times this rule was observed
(defstruct rule id conditions probability block certain-block avoid-list redundancies count)

;; dependent-id = dependent variable identifier of CPD
;; indentifiers = hash table of instance number for each var. If A is dependent var, and B C are free parameters (A B C) is P(A | B C)
;; dependent-var = dependent variable of CPD
;; vars = hash table of variables in the conditional probability density. 
;; types = hash table of variables taking values of percept, belief, action, intention, goal, state, or observation.
;; concept-ids = hash table of concept ids for vars
;; qualified-vars = hash table of fully qualified variables in conditional probability density
;; var-value-block map = hash table of bindings from variable value to a number and a block denoting cases where var is true
;; set-valued-attributes = hash table of associations that restore attribute-value pairs to their set-valued equivalents
;; lower-approx-var-value-block = hash table of lower approximations for var-value-block-map
;; characteristic-sets = hash table of local characteristic sets for attributes in rules
;; characteristic-sets-values = hash table of variable values for each characteristic set
;; var-values = hash table of values for each variable in CPD
;; cardinalities = array of cardinalities for each variable
;; step-sizes = array of number of steps to take before reaching variable's next assignment, for each variable
;; rules = array of rules = <context; probability, count>
;; concept-blocks = rule probability-block map. For each probability in rules, associate it with the rules with the same probability
;; singleton-p = flag for whether this is a singleton cpd or not. If so, then rules represent potential fields, not probability
;; count = total number of times this CPD was observed
;; lvl = height of CPD in bayesian network
(defstruct rule-based-cpd
  dependent-id
  identifiers
  dependent-var
  vars
  types
  concept-ids
  qualified-vars
  var-value-block-map
  set-valued-attributes
  lower-approx-var-value-block-map
  characteristic-sets
  characteristic-sets-values
  var-values
  cardinalities
  step-sizes
  rules
  concept-blocks
  prior
  (singleton-p nil)
  count
  (lvl 1))

#| Custom printer for hash tables |#

;; object = hash table
;; stream = output stream
(defmethod print-object ((object hash-table) stream)
  (format stream "#H(~{~{(~S . ~S)~}~^ ~})"
          (loop for key being the hash-keys of object
                  using (hash-value value)
                collect (list key value))))

(defun hash-reader (stream char n)
  (declare (ignore char n))
  (let* ((body (read stream t nil t)))
    ;;(append (list '\#H) body)
    ;;(format t "#H~A"body)
    (loop
      with hash = (make-hash-table :test #'equal)
      for (key . val) in body do
        (setf (gethash key hash) val)
      finally (return hash))))

(set-dispatch-macro-character #\# #\H #'hash-reader)

(defun mean (x)
  (/ (reduce #'+ x)
     (length x)))

#| Get standard deviation of a list |#

;; x = list
(defun stdev (x)
  (let ((avg (mean x)))
  (sqrt (/ (apply '+ (mapcar #'(lambda (xi) (expt (- xi avg) 2) ) x))
           (length x)))))


(defun get-hash(k h)
  (gethash k h))

(defun -car(l)
  (car l))

(defun -cdr(l)
  (cdr l))

#| Access arbitrarily nested hash table |#

;; hash = hash table
;; default = return value if index not found in hash
;; cpdp = generalized boolean. Either a CPD is provided or nil. Indicates if hash contains cpd probabilities or not
;; indexes = list of hash table indexes
;; sparsep = flag for if we are access sparse hash table
(defun hash-access (hash default cpdp indexes &optional (sparsep t))
  (loop
    with  hash-table-value = hash
    for idx in indexes
    do
       (multiple-value-bind (val bool)
           (gethash idx hash-table-value)
         (when (and cpdp (cpd-counts cpdp) sparsep)
           (let (na-posp rest-prob row-length)
             (setq row-length (aref (cpd-cardinalities cpdp) 0))
             (setq na-posp (= (mod idx row-length) 0))
             (when na-posp
               ;; get the probabilities in the rest of row
               (setq rest-prob (reduce #'+ (gethash-range default (+ idx 1) (+ idx row-length) hash-table-value cpdp)))
               ;; set na-prob to be the difference 1 and the rest of the rows
               (setq val (- 1 rest-prob))
               (setq bool t))))
         (cond (bool (setq hash-table-value val))
               (t (return-from hash-access default))))
     finally
       (return hash-table-value)))

#| Get the count associated with index in cpd |#

;; counts-hash = hash table with counts information
;; i = index of interest
;; row-length = length of row in cpd
(defun access-counts (counts-hash i row-length)
  (let (count)
    (setq count (gethash (* (floor (/ i row-length)) row-length) counts-hash))
    (if count count 0)))

#| Retrieve a range of values from hash table |#

;; default = return value if index not found in hash
;; start = lower bound of range
;; end = exclusive upper bound of range
;; cpdp = generalized boolean. Either a CPD is provided or nil
(defun gethash-range (default start end hash cpdp)
  (loop
     for i from start
     while (< i end)
     collect (hash-access hash default cpdp (list i)) into range
     finally (return range)))

#| Normalize a hash table |#

;; num-assignments = number of assignments in cpd
;; hash = hash table to normalize
;; counts = counts hash table in cpd
;; cpdp = generalized boolean. Either a CPD is provided or nil
(defun normalize-hash-table (hash counts cpdp &optional (op #'/))
  (loop
     ;;with new-hash = (make-hash-table)
     for i being the hash-keys of counts
       using (hash-value count)
     with val and new-assn
     do
       (loop
         for count-idx from i to (+ i (- (aref (cpd-cardinalities cpdp) 0) 1))
         do
            (setq val (hash-access hash 0 cpdp (list count-idx)))
            (setq new-assn (funcall op val count))
            (when (and (> new-assn 1) (eq op #'/))
              (error "Normalization error. New probability is greater than 1!~%Unnormalized assignments:~%~A~%counts hash for normalizing:~%~A~%index: ~d~%retrieved probability: ~d~%retrieved count: ~d~%new probability: ~d~%operator: ~A" hash counts count-idx val count new-assn op))
            (if (> new-assn 0)
                (setf (gethash count-idx hash) new-assn)
                (remhash count-idx hash)))
     finally (return hash)))

#| Make a hash table with keys initilized to value |#

;; num-assignments = number of keys in hash table
;; value = value to initialize hash table with
(defun initialize-hash-table (num-assignments value)
  (loop
     with hash = (make-hash-table)
     for i from 0 to (- num-assignments 1)
     do
       (setf (gethash i hash) value)
     finally
       (return hash)))
#| Make a ruleset whose probabilities are initilized to value |#

;; factor = conditional probability distribution
;; value = value to initialize ruleset with
(defun initialize-rule-potentials (factor value)
  (loop
    with num-rules = (aref (rule-based-cpd-cardinalities factor) 0)
    with rule
    for i in (gethash 0 (rule-based-cpd-var-values factor)) ;;from 0 to (- num-rules 1)
    do
       (setq rule (make-rule :id (gensym "RULE-")
			     :conditions (make-hash-table :test #'equal)
			     :probability (float value)
			     :block (make-hash-table)
			     :certain-block (make-hash-table)
			     :count nil))
       (setf (gethash (rule-based-cpd-dependent-id factor) (rule-conditions rule)) (list i))
    collect rule into rules
    finally (return (make-array (length rules) :initial-contents rules))))

#| Substitute bindings in hash table keys.
   Returns hash table.|#

;; hash = hash table
;; bindings = variable bindings for keys hash table
;; var-val-mappings = map for consistently swapping the cdr of a binding
(defun swap-hash-keys (hash bindings &key (var-val-mappings))
  (loop
    with new-hash
    for id being the hash-keys of hash
      using (hash-value pos)
    do
       (multiple-value-bind (new-ident present-p)
           (gethash id bindings)
         (cond ((and present-p (not (equal id new-ident)))
                (when (and present-p (not (equal id new-ident)))
                  (remhash id hash)
                  (if var-val-mappings
                      (setf (gethash new-ident hash) (cdr (assoc pos
                                                                 (gethash new-ident var-val-mappings))))
                      (setf (gethash new-ident hash) pos))
                  ;;(format t "~%original id: ~A gets swapped with new id: ~A~%new identifiers:~%~A" id new-ident new-hash)
                  ))
               (var-val-mappings
                (multiple-value-bind (present-p new-vvb)
                    (gethash id var-val-mappings)
                  (when present-p
                    (setf (gethash id hash)
                          (cdr (assoc pos
                                      (gethash id var-val-mappings)))))))))
    finally
       (return hash)))

#| Substitute bindings in rule conditions.
   Returns array of rules. |#
;; rules =  cpd rules
;; bindings = hash table of variable bindings mapping variables in one bn to variables in another
;; var-val-mappings = hash table for consistently swapping the cdr of a binding
(defun swap-rule-conditions (rules bindings var-val-mappings)
  (labels ((substitute-rule-conditions (rule-conditions)
             (loop
	       with hash = (copy-hash-table rule-conditions)
               for id being the hash-keys of rule-conditions
                 using (hash-value set)
               do
                  (multiple-value-bind (new-ident present-p)
                      (gethash id bindings)
                    (cond ((and present-p (not (equal id new-ident)))
                           (when (and present-p (not (equal id new-ident)))
                             (remhash id hash)
                             (if var-val-mappings
                                 (setf (gethash new-ident hash)
                                       (mapcar #'(lambda (val)
                                                   (cdr (assoc val (gethash new-ident var-val-mappings))))
                                               set))
                                 (setf (gethash new-ident hash) set))
                             ;;(format t "~%original id: ~A gets swapped with new id: ~A~%new identifiers:~%~A" id new-ident new-hash)
                             ))
                          (var-val-mappings
                           (multiple-value-bind (new-vvb present-p)
                               (gethash id var-val-mappings)
                             (when present-p
                               (setf (gethash id hash)
                                     (mapcar #'(lambda (val)
                                                 (cdr (assoc val new-vvb)))
                                             set)))))))
               finally
                  (return hash))))
    (loop
      with new-rule
      for rule being the elements of rules
      do
         (setq new-rule (make-rule :id (rule-id rule)
                                   :conditions (substitute-rule-conditions (rule-conditions rule))
                                   :probability (rule-probability rule)
                                   :block (rule-block rule)
                                   :certain-block (rule-certain-block rule)
                                   :avoid-list (rule-avoid-list rule)
                                   :redundancies (rule-redundancies rule)
                                   :count (rule-count rule)))
      collect new-rule into new-rules
      finally
         (return (make-array (array-dimension rules 0) :initial-contents new-rules)))))

#| Perform variable binding substituion in var value map.
   Returns hash table.
     key:  variable id,
     value: list of bindings mapping variable values to new positional indecies |#

;; cpd = conditional probability distribution
;; cpd2 = conditional probability distribution
;; bindings = variable bindings for matches
(defun subst-var-value-block-map (cpd cpd2 bindings)
  (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
        (format t "~%cpd:~%~S~%cpd2:~%~S~%bindings:~%~S" cpd cpd2 bindings))
  (loop
    with var-val-mappings = (make-hash-table :test #'equal) and domain and domain2
    with var-values = nil
    for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
      using (hash-value idx)
    do
       (setq var-values nil)
       (setq domain (gethash idx (rule-based-cpd-var-value-block-map cpd)))
       (when cpd2
         (setq domain2 (gethash (gethash ident (rule-based-cpd-identifiers cpd2))
                                (rule-based-cpd-var-value-block-map cpd2))))
       (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
             (format t "~%~%domain:~%~S~%domain2:~%~S" domain domain2))
       (loop
         with last-idx = (length domain2) and q-match-binding
         for (binding block) in domain
         with val and new-binding
         do
            (setq q-match-binding (gethash (car binding) bindings))
            (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
                  (format t "~%vvm:~%~S~%bindings:~%~S~%q-match-binding: ~S" binding bindings q-match-binding))
            (cond ((and cpd2 (gethash ident (rule-based-cpd-identifiers cpd2)))
                   (when (or (equal (gethash (gethash ident (rule-based-cpd-identifiers cpd2))
                                             (rule-based-cpd-vars cpd)) "ACTION")
                             (equal (gethash (gethash ident (rule-based-cpd-identifiers cpd2))
                                             (rule-based-cpd-vars cpd)) "GOAL"))
                     (when (gethash (car binding) bindings)
                       (setq binding (cons (gethash (car binding) bindings) (cdr binding)))))
                   (setq val (cdar (assoc q-match-binding domain2 :key #'car :test #'equal)))
                   (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
                         (format t "~%(assoc ~S ~S): ~S~%val:~%~S" q-match-binding  domain2 (assoc q-match-binding domain2 :key #'car :test #'equal) val))
                   (when (not val)
                     (setq q-match-binding (car binding))
                     (setq val (cdar (assoc q-match-binding domain2 :key #'car :test #'equal)))
                     (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
                           (format t "~%(assoc ~S ~S): ~S~%val:~%~S" q-match-binding  domain2 (assoc q-match-binding domain2 :key #'car :test #'equal) val)))
                   (when (not val)
                     (if (gethash (car binding) bindings)
                         (setq q-match-binding (gethash (car binding) bindings))
                         (setq q-match-binding (car binding)))
                     (when nil (and print-special* cpd2 (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id cpd2)))
                           (format t "~%q-match binding: ~S" q-match-binding))
                     (setq val last-idx)
                     (setq last-idx (+ 1 last-idx)))
                   (when (null (gethash ident var-val-mappings))
                     (setf (gethash ident var-val-mappings) nil))
                   (setf (gethash ident var-val-mappings)
                         (cons (cons (cdr binding) val) (gethash ident var-val-mappings)))
                   (setq var-values (cons val var-values))
                   (setq new-binding (list (cons q-match-binding val) block)))
                  (t
                   (setq var-values (cons (cdr binding) var-values))
                   (cond ((gethash (car binding) bindings)
                          (setq new-binding (list (cons (gethash (car binding) bindings)
                                                        (cdr binding))
                                                  block)))
                         (t
                          (setq new-binding (list binding block))))
                   (when (null (gethash ident var-val-mappings))
                     (setf (gethash ident var-val-mappings) nil))
                   (setf (gethash ident var-val-mappings)
                         (cons (cons (cdr binding) (cdr binding))
                               (gethash ident var-val-mappings)))))
         collect new-binding into new-domain
         finally
            (setf (gethash idx (rule-based-cpd-var-value-block-map cpd)) new-domain)
            (setf (gethash idx (rule-based-cpd-var-values cpd)) (nreverse var-values)))
    finally
       (when (and nil print-special* cpd2 (equal "GREATER_230" (rule-based-cpd-dependent-id cpd2)))
         (format t "~%var-val-mappings:~%~S" var-val-mappings))
       (return var-val-mappings)))

#| Return the keys of the hash table as a list |#

;; hash = hash table
(defun hash-keys-to-list (hash)
  (loop for key being the hash-keys of hash collect key))

(defun hash-to-assoc-list (hash)
  (loop for key being the hash-keys of hash
     using (hash-value value)
     collect (cons key value) into assoc
     finally
       (return assoc)))

#| Take the intersection of hash table keys |#

;; hash1 = hash table
;; hash2 = hash-table
(defun hash-intersection (hash1 hash2 &key (output-hash-p nil) (test #'eql))
  (let (smaller greater result)
    (cond ((<= (hash-table-count hash1) (hash-table-count hash2))
           (setq smaller hash1)
           (setq greater hash2))
          (t
           (setq smaller hash2)
           (setq greater hash1)))
    (if output-hash-p
        (setq result (make-hash-table :size (ceiling (* 2.3 (hash-table-count smaller))) :test test)))
    (loop
      for k1 being the hash-keys of smaller
      do
         (multiple-value-bind (val present-p)
             (gethash k1 greater)
           (when present-p
             (if output-hash-p
                 (setf (gethash k1 result) k1)
                 (setq result (cons k1 result))))))
    result))

#| Take the union of hash table keys |#

;; hash1 = hash table
;; hash2 = hash-table
(defun hash-union (hash1 hash2 &key (output-hash-p nil))
  (let (smaller larger result)
    (cond ((<= (hash-table-count hash1) (hash-table-count hash2))
           (setq smaller hash1)
           (setq greater hash2))
          (t
           (setq smaller hash2)
           (setq greater hash1)))
    (setq result (copy-hash-table greater))
    (loop
	  for k1 being the hash-keys of smaller
	  do
	  (setf (gethash k1 result) k1))
    (if output-hash-p
	result
	(hash-keys-to-list result))))

#| Indicate if two hash tables have elements in common |#

;; hash1 = hash table
;; hash2 = hash-table
(defun hash-intersection-p (hash1 hash2)
  (loop
    for k1 being the hash-keys of hash1
    do
       (multiple-value-bind (val present-p)
           (gethash k1 hash2)
         (when present-p
           (return-from hash-intersection-p t))))
  nil)

#| Returns key associated with value in hash table |#

;; value = value in hash table to find
;; hash = hash table
(defun hash-rassoc (value hash)
  (loop for key being the hash-keys of hash
          using (hash-value v)
        when (funcall (hash-table-test hash) v value) do
          (remhash key hash)
          (return-from hash-rassoc (values key t)))
  (values nil nil))

#| Find keys/values in hash1 that are not in hash2 |#

;; hash1 = hash table
;; hash2 = hash-table
;; cpd1 = conditional probability distribution
;; forbidden-types = cpd types to ignore
(defun hash-difference-p (hash1 hash2 cpd1 &optional forbidden-types)
  (when hash1
    (loop
      with diff-count = 0 and var-type and forbidden-p and forbidden-likelihood
      for k1 being the hash-keys of hash1
        using (hash-value pos)
      do
         (when forbidden-types
           (setq var-type (gethash pos (rule-based-cpd-types cpd1)))
           (setq forbidden-p (member var-type forbidden-types :test #'equal))
           (if forbidden-p (setq forbidden-likelihood t)))
         (multiple-value-bind (val present-p)
             (gethash k1 hash2)
           (when (and (not present-p) (not forbidden-p))
             (incf diff-count)))
      finally
         (return (values diff-count forbidden-likelihood)))))

#| Find keys/values in hash1 that are not in hash2 |#

;; hash1 = hash table
;; hash2 = hash-table
;; cpd1 = conditional probability distribution
;; forbidden-types = cpd types to ignore
(defun hash-difference (hash1 hash2 cpd1 &key forbidden-types output-hash-p (test #'eql))
  (when hash1
    (loop
      with result = (when output-hash-p (make-hash-table :size (ceiling (+ (hash-table-count hash1) (hash-table-count hash2))) :test test))
      with var-type and forbidden-p and forbidden-likelihood
      for k1 being the hash-keys of hash1
        using (hash-value pos)
      do
         (when forbidden-types
           (setq var-type (gethash pos (rule-based-cpd-types cpd1)))
           (setq forbidden-p (member var-type forbidden-types :test #'equal))
           (if forbidden-p (setq forbidden-likelihood t)))
	 (multiple-value-bind (val present-p)
             (gethash k1 hash2)
           (when (and (not present-p) (not forbidden-p))
	     (cond (output-hash-p
		    (setf (gethash k1 result) k1))
		   (t
		    (setq result (cons k1 result))))))
      finally
         (return (values result forbidden-likelihood)))))

#| Return the difference of two hash tables |#

;; block1 = hash table
;; block2 = hash table
(defun block-difference (block1 block2 &key (output-hash-p nil) (test #'eql))
  (loop
    with result = (if output-hash-p (make-hash-table :size (ceiling (* 2.3 (hash-table-count block1))) :test test))
    for b1 being the hash-keys of block1
    do
       (multiple-value-bind (val present-p)
           (gethash b1 block2)
         (when (not present-p)
           (if output-hash-p
               (setf (gethash b1 result) b1)
               (setq result (cons b1 result)))))
    finally
       (return result)))

#| Return true if the parents of hash1 are a subset of the parents in hash2 |#

;; hash1 = hash table
;; hash2 = hash-table
(defun hash-subset-parents (hash1 hash2)
  (loop
    for k1 being the hash-keys of hash1
      using (hash-value i)
    when (not (= i 0))
    do
       (multiple-value-bind (val present-p)
           (gethash k1 hash2)
         (when (not present-p)
           (return-from hash-subset-parents nil))))
  t)

#| Make an efficient copy of an array |#

;; array = array to copy
(defun copy-array (array &key
                           (element-type (array-element-type array))
                           (fill-pointer (and (array-has-fill-pointer-p array)
                                              (fill-pointer array)))
                           (adjustable (adjustable-array-p array)))
  (let* ((dimensions (array-dimensions array))
         (new-array (make-array dimensions
                                :element-type element-type
                                :adjustable adjustable
                                :fill-pointer fill-pointer)))
    (dotimes (i (array-total-size array))
      (setf (row-major-aref new-array i)
            (cond ((listp i)
                   (row-major-aref array (copy-list i)))
                  (t
                   (row-major-aref array i)))))
    new-array))

#| Make an efficient copy of hash table |#

;; hash = hash-table to copy
(defun copy-hash-table (hash &key reference-values)
  (when hash
    (let ((h (make-hash-table
              :test (hash-table-test hash)
              :rehash-size (hash-table-rehash-size hash)
              :rehash-threshold (hash-table-rehash-threshold hash)
              :size (hash-table-size hash))))
      (loop for key being the hash-keys of hash
              using (hash-value value)
            do
               (setf (gethash key h)
                     (cond ((and (not reference-values) (listp value))
                            (deep-copy-list value))
                           ((and (not reference-values) (arrayp value))
                            (copy-array value))
                           (t
                            value)))
	 finally (return h)))))

#| Copy edge information in Bayesian network |#

;; edge-hash = hash table containing edge information
(defun copy-edges (edge-hash)
  (let ((h (make-hash-table
            :test (hash-table-test edge-hash)
            :rehash-size (hash-table-rehash-size edge-hash)
            :rehash-threshold (hash-table-rehash-threshold edge-hash)
            :size (hash-table-size edge-hash))))
    (loop for key being each hash-key of edge-hash
            using (hash-value hash)
          do (setf (gethash key h) (copy-hash-table hash))
          finally (return h))))

#| Copy factors in a Bayesian network |#

;; factors = array of cpds in the Bayes net
(defun copy-factors (factors &key (shallow nil) (rule-counts nil))
  (loop
    with dim = (array-dimension factors 0)
    with copy-factors = (make-array dim :fill-pointer t)
    for i from 0 to (- dim 1)
    do
       (setf (aref copy-factors i)
             (if shallow
                 (partial-copy-rule-based-cpd (aref factors i) :rule-counts rule-counts)
                 (copy-rule-based-cpd (aref factors i) :rule-counts rule-counts)))
    finally
       (return copy-factors)))

#| Copies Bayesian network contents|#

;; state = state represented as a graph
(defun copy-bn (bn &key (rule-counts nil))
  (cons (copy-factors (car bn) :rule-counts rule-counts) (copy-edges (cdr bn))))

#| Copy a list and all its elements |#

;; l = list to copy
(defun deep-copy-list (l)
  (cond ((null l)
         nil)
        ((and (consp (car l)) (not (listp (cdar l))))
         (cons (cons (caar l) (cdar l)) (deep-copy-list (rest l))))
        ((listp (car l))
         (cons (deep-copy-list (car l)) (deep-copy-list (rest l))))
        ((arrayp (car l))
         (cons (copy-array (car l)) (deep-copy-list (rest l))))
        ((hash-table-p (car l))
         (cons (copy-hash-table (car l)) (deep-copy-list (rest l))))
        (t
         (cons (car l) (deep-copy-list (rest l))))))

#| Make an efficient copy of hash table |#

;; hash = hash-table to copy
(defun make-hash-table-like (hash &key (rehash-size 1))
  (when hash
    (make-hash-table
              :test (hash-table-test hash)
              :rehash-size (if (= 1 rehash-size) (hash-table-rehash-size hash) (float rehash-size)) 
              :rehash-threshold (hash-table-rehash-threshold hash)
              :size (hash-table-size hash))))

#| Remove key from hash table and adjust keys to proper ordinal values |#

;; hash = ordinal hash table
;; key = key to remove
(defun reduce-ordinal-hash (hash key &aux copy-hash)
  (setq copy-hash (copy-hash-table hash))
  (remhash key copy-hash)
  (loop
    with val
    for i from (+ key 1) to (- (hash-table-count hash) 1)
    do
       (setq val (gethash i copy-hash))
       (setf (gethash (- i 1) copy-hash) val)
       (remhash i copy-hash))
  copy-hash)

#| Remove key from hash table and adjust keys to proper ordinal values |#

;; hash = categorical hash table
;; key = key to remove
;; key-idx = index associated with key
(defun reduce-categorical-hash (hash key key-idx)
  (loop
    with new-hash = (make-hash-table :test #'equal) and dep-id
    for k being the hash-keys of hash
      using (hash-value idx)
    do
       (cond ((< idx key-idx)
              (if (= 0 idx)
                  (setq dep-id k))
              (setf (gethash k new-hash) idx))
             ((> idx key-idx)
              (if (and (= 0 key-idx) (= 1 idx))
                  (setq dep-id k))
              (setf (gethash k new-hash) (- idx 1))))
    finally
       (return (values new-hash dep-id))))

#| Copy a conditional probability distribution represented as a table |#

;; cpd = conditional probability density
(defun copy-table-cpd (cpd)
  (make-cpd
   :dependent-id (cpd-dependent-id cpd)
   :identifiers (copy-hash-table (cpd-identifiers cpd))
   :dependent-var (cpd-dependent-var cpd)
   :vars (copy-hash-table (cpd-vars cpd))
   :types (copy-hash-table (cpd-types cpd))
   :concept-ids (copy-hash-table (cpd-concept-ids cpd))
   :qualified-vars (copy-hash-table (cpd-qualified-vars cpd))
   :var-value-map (copy-hash-table (cpd-var-value-map cpd))
   :cardinalities (copy-array (cpd-cardinalities cpd))
   :step-sizes (copy-array (cpd-step-sizes cpd))
   :assignments (copy-hash-table (cpd-assignments cpd))
   :counts (copy-hash-table (cpd-counts cpd))
   :count (cpd-count cpd)
   :lvl (cpd-lvl cpd)))

#| Copy a rule from a cpd |#

;; rule = rule in rule-based cpd
;; fresh-id = flag for whether we give the rule a new id
;; count = count we wish to assign to rule, if not default value
(defun copy-cpd-rule (rule &key (fresh-id nil) (count nil))
  (make-rule :id (if fresh-id (symbol-name (gensym "RULE-")) (rule-id rule))
             :conditions (copy-hash-table (rule-conditions rule))
             :probability (rule-probability rule)
             :block (copy-hash-table (rule-block rule))
             :certain-block (copy-hash-table (rule-certain-block rule))
             :avoid-list (copy-hash-table (rule-avoid-list rule))
             :redundancies (copy-hash-table (rule-redundancies rule))
             :count (if count count (rule-count rule))))

(defun string-to-float (str)
  (with-input-from-string (in str)
    (read in)))

#| Return true if two rules are the same |#

;; rule1 = rule in rule-based cpd
;; rule2 = rule in rule-based cpd
(defun same-rule-p (rule1 rule2 cpd1 cpd2 &key (check-probability t) (check-num-conditions t) (check-count t) (check-conditions t) (check-blocks nil) (exact nil) (round nil))
  (cond ((and check-probability round (not (= (read-from-string (format nil "~5$" (rule-probability rule1)))
                                              (read-from-string (format nil "~5$" (rule-probability rule2))))))
         nil)
        ((and check-probability (not round) (not (= (rule-probability rule1) (rule-probability rule2))))
         nil)
        ((and check-num-conditions (not (= (hash-table-count (rule-conditions rule1)) (hash-table-count (rule-conditions rule2)))))
         nil)
        ((and check-count (not (eq (rule-count rule1) (rule-count rule2))))
         nil)
	(check-blocks
	 (and (null (hash-difference (rule-block rule1) (rule-block rule2) nil))
	      (null (hash-difference (rule-block rule2) (rule-block rule1) nil))
	      (null (hash-difference (rule-certain-block rule1) (rule-certain-block rule2) nil))
	      (null (hash-difference (rule-certain-block rule2) (rule-certain-block rule1) nil))))
        (check-conditions
         (multiple-value-bind (compatible-p num-compatible)
             (compatible-rule-p rule1 rule2 cpd1 cpd2 :exact exact)
           (declare (ignore num-compatible))
           (and compatible-p
                (null (hash-difference (rule-conditions rule1) (rule-conditions rule2) nil))
                (null (hash-difference (rule-conditions rule2) (rule-conditions rule1) nil)))))
        (t
         t)))

#| Copy a conditional probability distribution represented as a set of rules |#

;; cpd = conditional probability density
(defun copy-rule-based-cpd (cpd &key (rule-counts nil))
  (make-rule-based-cpd
   :dependent-id (rule-based-cpd-dependent-id cpd)
   :identifiers (copy-hash-table (rule-based-cpd-identifiers cpd))
   :dependent-var (rule-based-cpd-dependent-var cpd)
   :vars (copy-hash-table (rule-based-cpd-vars cpd))
   :types (copy-hash-table (rule-based-cpd-types cpd))
   :concept-ids (copy-hash-table (rule-based-cpd-concept-ids cpd))
   :qualified-vars (copy-hash-table (rule-based-cpd-qualified-vars cpd))
   :var-value-block-map (copy-hash-table (rule-based-cpd-var-value-block-map cpd))
   :set-valued-attributes (copy-hash-table (rule-based-cpd-set-valued-attributes cpd))
   :lower-approx-var-value-block-map (copy-hash-table (rule-based-cpd-lower-approx-var-value-block-map cpd))
   :characteristic-sets (copy-hash-table (rule-based-cpd-characteristic-sets cpd))
   :characteristic-sets-values (copy-hash-table (rule-based-cpd-characteristic-sets-values cpd))
   :var-values (copy-hash-table (rule-based-cpd-var-values cpd))
   :cardinalities (copy-array (rule-based-cpd-cardinalities cpd))
   :step-sizes (copy-array (rule-based-cpd-step-sizes cpd))
   :rules (map 'vector #'(lambda (rule) (copy-cpd-rule rule :count rule-counts)) (rule-based-cpd-rules cpd))
   :concept-blocks (copy-hash-table (rule-based-cpd-concept-blocks cpd))
   :prior (rule-based-cpd-prior cpd)
   :singleton-p (rule-based-cpd-singleton-p cpd)
   :count (rule-based-cpd-count cpd)
   :lvl (rule-based-cpd-lvl cpd)))

#| Copy some book-keeping variables in a conditional probability distribution |#

;; cpd = conditional probability density
(defun partial-copy-table-cpd (cpd)
  (make-cpd
   :dependent-id (cpd-dependent-id cpd)
   :identifiers (copy-hash-table (cpd-identifiers cpd))
   :dependent-var (cpd-dependent-var cpd)
   :vars (copy-hash-table (cpd-vars cpd))
   :types (copy-hash-table (cpd-types cpd))
   :concept-ids (copy-hash-table (cpd-concept-ids cpd))
   :qualified-vars (copy-hash-table (cpd-qualified-vars cpd))
   :var-value-map (copy-hash-table (cpd-var-value-map cpd))
   :cardinalities (copy-array (cpd-cardinalities cpd))
   :step-sizes (copy-array (cpd-step-sizes cpd))
   :assignments (cpd-assignments cpd)
   :counts (cpd-counts cpd)
   :count (cpd-count cpd)
   :lvl (cpd-lvl cpd)))

#| Copy some book-keeping variables in a conditional probability distribution |#

;; cpd = conditional probability density
(defun partial-copy-rule-based-cpd (cpd &key (rule-counts nil))
  (make-rule-based-cpd
   :dependent-id (rule-based-cpd-dependent-id cpd)
   :identifiers (copy-hash-table (rule-based-cpd-identifiers cpd))
   :dependent-var (rule-based-cpd-dependent-var cpd)
   :vars (copy-hash-table (rule-based-cpd-vars cpd))
   :types (copy-hash-table (rule-based-cpd-types cpd))
   :concept-ids (copy-hash-table (rule-based-cpd-concept-ids cpd))
   :qualified-vars (copy-hash-table (rule-based-cpd-qualified-vars cpd))
   :var-value-block-map (copy-hash-table (rule-based-cpd-var-value-block-map cpd))
   :set-valued-attributes (copy-hash-table (rule-based-cpd-set-valued-attributes cpd))
   :lower-approx-var-value-block-map (copy-hash-table (rule-based-cpd-lower-approx-var-value-block-map cpd))
   :characteristic-sets (copy-hash-table (rule-based-cpd-characteristic-sets cpd))
   :characteristic-sets-values (copy-hash-table (rule-based-cpd-characteristic-sets-values cpd))
   :var-values (copy-hash-table (rule-based-cpd-var-values cpd))
   :cardinalities (copy-array (rule-based-cpd-cardinalities cpd))
   :step-sizes (copy-array (rule-based-cpd-step-sizes cpd))
   :rules (map 'vector #'(lambda (rule) (copy-cpd-rule rule :count rule-counts)) (rule-based-cpd-rules cpd))
   :concept-blocks (rule-based-cpd-concept-blocks cpd)
   :prior (rule-based-cpd-prior cpd)
   :singleton-p (rule-based-cpd-singleton-p cpd)
   :count (rule-based-cpd-count cpd)
   :lvl (rule-based-cpd-lvl cpd)))

#| Copy some book-keeping variables in a conditional probability distribution |#

;; cpd = conditional probability density
(defun partial-copy-table-cpd-2 (cpd)
  (make-cpd
   :dependent-id (cpd-dependent-id cpd)
   :identifiers (copy-hash-table (cpd-identifiers cpd))
   :dependent-var (cpd-dependent-var cpd)
   :vars (cpd-vars cpd)
   :types (cpd-types cpd)
   :concept-ids (cpd-concept-ids cpd)
   :qualified-vars (cpd-qualified-vars cpd)
   :var-value-map (copy-hash-table (cpd-var-value-map cpd))
   :cardinalities (cpd-cardinalities cpd)
   :step-sizes (cpd-step-sizes cpd)
   :assignments (cpd-assignments cpd)
   :counts (cpd-counts cpd)
   :count (cpd-count cpd)
   :lvl (cpd-lvl cpd)))

#| Copy some book-keeping variables in a conditional probability distribution |#

;; cpd = conditional probability density
(defun partial-copy-rule-based-cpd-2 (cpd &key (rule-counts nil))
  (make-rule-based-cpd
   :dependent-id (rule-based-cpd-dependent-id cpd)
   :identifiers (copy-hash-table (rule-based-cpd-identifiers cpd))
   :dependent-var (rule-based-cpd-dependent-var cpd)
   :vars (rule-based-cpd-vars cpd)
   :types (rule-based-cpd-types cpd)
   :concept-ids (rule-based-cpd-concept-ids cpd)
   :qualified-vars (rule-based-cpd-qualified-vars cpd)
   :var-value-block-map (copy-hash-table (rule-based-cpd-var-value-block-map cpd))
   :set-valued-attributes (copy-hash-table (rule-based-cpd-set-valued-attributes cpd))
   :lower-approx-var-value-block-map (rule-based-cpd-lower-approx-var-value-block-map cpd)
   :characteristic-sets (rule-based-cpd-characteristic-sets cpd)
   :characteristic-sets-values (rule-based-cpd-characteristic-sets-values cpd)
   :var-values (copy-hash-table (rule-based-cpd-var-values cpd))
   :cardinalities (rule-based-cpd-cardinalities cpd)
   :step-sizes (rule-based-cpd-step-sizes cpd)
   :rules (map 'vector #'(lambda (rule) (copy-cpd-rule rule :count rule-counts)) (rule-based-cpd-rules cpd))
   :concept-blocks (rule-based-cpd-concept-blocks cpd)
   :prior (rule-based-cpd-prior cpd)
   :singleton-p (rule-based-cpd-singleton-p cpd)
   :count (rule-based-cpd-count cpd)
   :lvl (rule-based-cpd-lvl cpd)))

#| Substitute variable bindings across a CPD |#

;; cpd = conditional probability 1
;; cpd2 = conditional probability 2
;; bindings = variable bindings
(defun subst-cpd (cpd cpd2 bindings &key (deep nil) &aux new-cpd dep-id)
  ;;(format t "~%original cpd:~%~A" cpd)
  ;;(setq dep-id (cdr (assoc (cpd-dependent-id cpd) bindings :test #'equal)))
  (let (var-val-mappings)
    (if deep
        (setq new-cpd (copy-rule-based-cpd cpd))
        (setq new-cpd (partial-copy-rule-based-cpd cpd)))
    (setq dep-id (gethash (rule-based-cpd-dependent-id new-cpd) bindings))
    ;;(setq dep-id (fset:lookup bindings (cpd-dependent-id cpd)))
    (when dep-id
      (setf (rule-based-cpd-dependent-id new-cpd) dep-id))
    (setf (rule-based-cpd-identifiers new-cpd) (swap-hash-keys (rule-based-cpd-identifiers new-cpd) bindings))
    (setq var-val-mappings (subst-var-value-block-map new-cpd cpd2 bindings))
    (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
          (format t "~%bindings:~%~S~%var-val-mappings:~%~S" bindings var-val-mappings))
    (setf (rule-based-cpd-rules new-cpd) (swap-rule-conditions (rule-based-cpd-rules new-cpd) bindings var-val-mappings))
    ;;(format t "~%subst cpd:~%~A" cpd)
    new-cpd))

(defun subst-cpd-2 (cpd cpd2 bindings &key (deep nil) &aux new-cpd dep-id)
  ;;(format t "~%original cpd:~%~A" cpd)
  ;;(setq dep-id (cdr (assoc (cpd-dependent-id cpd) bindings :test #'equal)))
  (let (var-val-mappings)
    (if deep
	(setq new-cpd (copy-rule-based-cpd cpd))
	(setq new-cpd (partial-copy-rule-based-cpd-2 cpd)))
    (setq dep-id (gethash (rule-based-cpd-dependent-id new-cpd) bindings))
    ;;(setq dep-id (fset:lookup bindings (cpd-dependent-id cpd)))
    (when dep-id
      (setf (rule-based-cpd-dependent-id new-cpd) dep-id))
    (setf (rule-based-cpd-identifiers new-cpd) (swap-hash-keys (rule-based-cpd-identifiers new-cpd) bindings))
    (setq var-val-mappings (subst-var-value-block-map new-cpd cpd2 bindings))
    (setf (rule-based-cpd-rules new-cpd) (swap-rule-conditions (rule-based-cpd-rules new-cpd) bindings var-val-mappings))
    ;;(format t "~%subst cpd:~%~A" cpd)
    new-cpd))

#| Combine two or more symbols together |#

;; objects = list of symbols
(defun combine-symbols (&rest objects)
  (format nil "~{~a~}" objects))

#| Return true if cpd is a singleton |#

;; cpd = conditional probability density
(defun singleton-cpd? (cpd)
  (rule-based-cpd-singleton-p cpd))

#| Return true if cpd1 is a child of cpd2 |#

;; cpd1 = conditional probability density
;; cpd2 = conditional probability density
(defun cpd-child-p (cpd1 cpd2)
  (let (pos)
    (setq pos (gethash (rule-based-cpd-dependent-id cpd2) (rule-based-cpd-identifiers cpd1)))
    (when (and pos (> pos 0)) t)))

#| Remove the nth element from a list |#

;; pos = position of element
;; l = list
(defun remove-nth (pos l)
  (cond ((null l)
         l)
        ((> pos 0)
         (cons (car l) (remove-nth (- pos 1) (rest l))))
        ((= pos 0)
         (rest l))))

#| Replace the nth element in a list with item |#

;; pos = position of element
;; l = list
(defun replace-nth (pos item l)
  (cond ((null l)
         l)
        ((> pos 0)
         (cons (car l) (replace-nth (- pos 1) item (rest l))))
        ((= pos 0)
         (cons item (rest l)))))

#| Insert an element inplace after index. lst is destructively modified. Returns list. |#

;; lst = list of elements
;; pos = index to insert after
;; ele = element to insert
(defun insert-after (lst pos ele)
  (push ele (cdr (nthcdr pos lst)))
  lst)

#| Insert an element inplace |#

;; lst = list of elements
;; pos = index to insert after
;; ele = element to insert
(defun inline-replace (lst pos ele)
  (remove-nth pos (insert-after lst pos ele)))

#| Return the scope of a conditional probability density |#

;; idents = hash table of identifiers
;; vars = hash table of cpd variable names
;; cids = hash table of concept ids
(defun generate-cpd-vars (idents vars cids)
  (loop
    with qvar-hash = (make-hash-table)
    with var and cid and qvar
    for ident being the hash-keys of idents
      using (hash-value idx)
    do
       (setq var (gethash idx vars))
       (setq cid (gethash idx cids))
       (setq qvar (combine-symbols var cid))
       (setf (gethash idx qvar-hash) qvar)
    finally
       (return qvar-hash)))

#| Generate size of the domain for conditional probability density |#

;; vvm = variable value map of conditional-probability density
(defun generate-cpd-cardinalities (vvm &aux count)
  (setq count (hash-table-count vvm))
  (make-array count :initial-contents (loop for i from 0 to (- count 1) collect (length (gethash i vvm))) :fill-pointer t))

#| Generate an ordered list of step-sizes for the variables |#

;; cardinalities = conditional probability density cardinalities
(defun generate-cpd-step-sizes (cardinalities &aux step-sizes)
  (setq step-sizes (maplist #'(lambda (cards) (reduce '* (rest cards)))
                            (reverse (coerce cardinalities 'list))))
  (make-array (length step-sizes) :initial-contents (reverse step-sizes) :fill-pointer t))

#| Generate an index to flattened cpd |#

;; cpd = conditional probability density
;; assignments = variable assignments for each var (ordered)
(defun get-cpd-index (cpd assignments)
  (reduce #'+ (mapcar '* assignments (coerce (rule-based-cpd-step-sizes cpd) 'list))))

#| Get variable assignment of variable i in cpd for given index |#

;; cpd = conditional probability density
;; index = index into flattened cpd
;; i = variable position in cpd-vars
(defun get-cpd-assignment-for-var (cpd index i)
  (mod  (floor (/ index (aref (rule-based-cpd-step-sizes cpd) i)))
        (aref (rule-based-cpd-cardinalities cpd) i)))

#| Get variable assignment of all variables in cpd for given index |#

;; cpd = conditional probability density
;; index = index into flattened cpd
(defun get-cpd-assignment-from-index (cpd index)
  (loop
    with assn = (make-array (hash-table-count (rule-based-cpd-identifiers cpd)) :fill-pointer t)
    for i being the hash-values of (rule-based-cpd-identifiers cpd)
    do
       (setf (aref assn i) (get-cpd-assignment-for-var cpd index i))
    finally
       (return assn)))

#| Get values associated with the scope of a factor|#

;; cpd = conditional probability density, aka factor
(defun get-cpd-scope-values (cpd)
  (mapcan #'(lambda (bindings)
	      (mapcar 'car bindings))
	  (cpd-var-value-map cpd)))

#| Find matching cpd in list of cpds |#

;; id = conditional probability variable identifier
;; matches = list of matching conditional probability densities
(defun get-corresponding-cpd-by-id (id matches)
  (caar (member id matches
                :key #'(lambda (pair)
                         (when (cdr pair)
                           (cpd-identifiers (cdr pair))))
                :test #'(lambda (identifier ids)
                          (equal identifier (car ids))))))

#| Find matching cpd in list of cpds |#

;; id = conditional probability variable identifier
;; cpds = list of conditional probability densities
(defun get-cpd-by-id (id cpds)
  (car (member id cpds :key #'rule-based-cpd-dependent-id :test #'equal)))

#| Find cpd in list of cpds by matching against identifiers |#

;; id = conditional probability variable identifier
;; cpds = list of conditional probability densities
(defun lookup-cpd-by-id (id cpds)
  (car (member id cpds
               :test #'(lambda (identifier cpd)
                         (and (= (hash-table-count (cpd-identifiers cpd)) 1)
                              (equal identifier (cpd-dependent-id cpd)))))))

#| Sum variable cardinalities from multiple conditional probability densities |#

;; vvm = variable value map of combined factor
(defun get-var-cardinalities (vvm)
  (generate-cpd-cardinalities vvm))

#| Convert assignment into a varible-values priority-queue |#

;; assignment = list of variable-values lists
(defun make-priority-q (assignment)
  (sort (copy-list assignment) (lambda (a b) (< (length (cdr a)) (length (cdr b))))))

;; assignment = list of variable-values lists
(defun priority-q-pop (assignment)
  (car assignment))

#| Checks to see if candidate assignment satisfies variable domains |#

;; candidate-assn = candidate assignment to check
;; unassigned = list of variable-values lists
;; assignment = list of variable-value bindings
;; constraint = constraint in csp
(defun valid-assignment (candidate-assn unassigned assignment constraint)
  ;;(format t "~%candidate assignment: ~A~%current assignment: ~A~%constraint: ~A" candidate-assn assignment constraint)
  ;;(maphash #'print-hash-entry (cpd-assignments constraint))
  (loop
     for assn in candidate-assn
     for ident in (cpd-identifiers constraint)
     for vvm in (cpd-var-value-map constraint)
     with var and vals
     do
       (setq var (find ident unassigned :key #'car))
       (cond (var
              (setq vals (mapcar #'(lambda (val)
                                     (cdr (assoc val vvm :test #'equal)))
                                 (rest var)))
              ;;(format t "~%var: ~A~%available vals: ~A~%assn: ~A" var vals assn)
              (when (not (member assn vals))
                ;;(format t "~%candidate assignment violates arc consistent variable domain")
                (return-from valid-assignment nil)))
             (t
              (setq var (find ident assignment :key #'car))
              ;;(format t "~%var: ~A~%assn: ~A" var assn)
              (when (not (= assn (cdr (assoc (cdr var) vvm :test #'equal))))
                ;;(format t "~%candidate assignment violates existing assignment!")
                (return-from valid-assignment nil))))
     finally
        ;;(format t "~%valid assignment!")
       (return t)))

#| Prune cardinalities of relevant variables via forward checking |#

;; unassigned = array of variable-value-lists
;; constraints = array of constraints for csp
;; arcs = list of variable-constriant pairs to process
;; assignment = list of variable-value bindings
(defun generalized-arc-consistency (unassigned constraints arcs assignment)
  ;;(format t "~%~%arcs:~%~A" arcs)
  (loop
    with arc and c-scope and new-domain and constraint
    with var and var-pos and poses
    do
       (setq arc (car arcs))
       (setq arcs (rest arcs))
       (setq constraint (aref constraints (cdr arc)))
       (setq c-scope (cpd-identifiers constraint))
       (setq var (aref unassigned (car arc)))
       (setq var-pos (position (car var) c-scope))
       (setq new-domain nil)
       (setq poses nil)
       ;;(format t "~%~%X: ~d~%Constraint: ~A~%unassigned: ~A~%current assignment: ~A" var constraint unassigned assignment)
       ;;(format t "~%Domain of X: ~A" (cdr var))
       (loop
         for ele in c-scope
         for i from 0
         do
            (setq poses (cons i poses))
         finally
            (setq poses (reverse poses)))
       ;;(format t "~%constraint scope: ~A~%scope variable positions in constraint: ~A" c-scope poses)
       (loop
         with assignments = (cpd-assignments constraint)
         with num-assignments = (reduce #'* (cpd-cardinalities constraint))
         with index and value
         for i from 0 to (- num-assignments 1)
         when (= (hash-access assignments 0 constraint (list i) nil) 1)
           do
              ;;(format t "~%cpd assignments index, ~d satisfies constraint assignments:." i)
              ;;(maphash #'print-hash-entry (cpd-assignments constraint))
              (loop
                for pos in poses
                collect (get-cpd-assignment-for-var constraint i pos) into assn
                finally
                   ;;(format t "~%corresponding variable assignments for constraint: ~A. testing validity..." assn)
                   (when (valid-assignment assn unassigned assignment constraint)
                     (setq index (nth var-pos assn))
                     (setq value (car (rassoc index (nth var-pos (cpd-var-value-map constraint)))))
                     (setq new-domain (union new-domain (list value))))))
       ;;(format t "~%new domain of X: ~A" new-domain)
       (if (null new-domain)
           (return-from generalized-arc-consistency (values 'fail unassigned)))
       (when (set-difference (cdr var) new-domain)
         (loop
           for i from 1 to (- (array-dimension unassigned 0) 1)
           do
              (loop
                for j from 0 to (- (array-dimension constraints 0) 1)
                with identifiers
                do
                   (setq identifiers (cpd-identifiers (aref constraints j)))
                   (when (and (= (length identifiers) 1)
                              (not (equalp constraint (aref constraints j)))
                              (gethash (car var) identifiers)
                              (gethash (car (aref unassigned i)) identifiers))
                     (setq arcs (union arcs (list (cons i j)))))))
         (setq var (cons (car var) new-domain))
         (setf (aref unassigned (car arc)) var))
    while (not (null arcs))
    finally
       (return (values t unassigned))))

#| Produces variable cardinality reductions via Maitaining Arc Consistency agorithm |#

;; unassigned = array of variable-values lists
;; csp = constraint satisfaction problem
;; assignment = list of variable-values bindings
(defun csp-inference (unassigned csp assignment)
  (cond ((> (array-dimension unassigned 0) 1)
         (loop
           for i from 1 to (- (array-dimension unassigned 0) 1)
           with todo and constraints = (getf csp :constraints) and var
           do
              (setq var (aref unassigned i))
              (loop
                for j from 0 to (- (array-dimension constraints 0) 1)
                with identifiers
                do
                   (setq identifiers (cpd-identifiers (aref constraints j)))
                   (when (and (= (length identifiers) 1)
                              (member (car var) identifiers :test #'equal))
                     (setq todo (cons (cons (- i 1) j) todo))))
           finally
              (return (generalized-arc-consistency (subseq unassigned 1) constraints todo assignment))))
        (t t)))

#| Prune variable values to be consistent with unary constraints |#

;; unassigned = list of unassigned variables
;; constraints = list of constraints
(defun node-consistency (unassigned constraints)
  (loop
    with cpd and domain
    for variable in unassigned
    do
       (setq cpd (lookup-cpd-by-id (car variable) constraints))
       (loop
         with vvm = (gethash 0 (cpd-var-value-map cpd))
         for key being the hash-keys of (cpd-assignments cpd)
         collect (car (nth key vvm)) into dom
         finally
            (setq domain dom))
    collect (cons (car variable) domain) into new-unassigned
    finally (return new-unassigned)))

#|Picks variable value according to least-constraining-value heuristic |#

;; assn = variable-values list
(defun order-variable-values (assn)
  (rest assn))

#| Picks next free variable according to minimum-remaining-values heuristic |#

;; unassigned = list of variable-values lists
(defun select-unassigned-variable (unassigned)
  (priority-q-pop (coerce unassigned 'list)))

;; assignment = list of variable-values bindings
;; csp = constraint satisfaction problem
(defun complete? (assignment csp)
  (= (length assignment) (length (getf csp :vars))))

#| Checks to see if candidate assignment violates constraints |#

;; var = selected variable
;; value = variable value for var
;; assignment = list of variable-values bindings
;; csp = constraint satisfaction problem
(defun consistent-p (var value assignment csp &aux candidate)
  (setq candidate (cons (cons var value) assignment))
  ;;(format t "~%~%candidate assignment: ~A" candidate)
  (loop
    for factor being the elements of (getf csp :constraints)
    ;;do (format t "~%checking costraint:~%~A" factor)
    ;;   (maphash #'print-hash-entry (cpd-assignments factor))
    if (subsetp (hash-keys-to-list (cpd-identifiers factor)) (mapcar 'car candidate) :test #'equal)
      do
         (loop
           for v being the hash-keys of (cpd-identifiers factor)
             using (hash-value pos)
           with sym-assn and bindings
           do
              (setq bindings (gethash pos (cpd-var-value-map factor)))
              (setq sym-assn (assoc v candidate :test #'equal))
              ;;(format t "~%constraint variable: ~A~%constraint variable vvm: ~A~%candidatate assignment for ~A: ~A" v bindings v sym-assn)
           when sym-assn
             collect (cdr (assoc (cdr sym-assn) bindings :test #'equal)) into assn
           finally
              ;;(format t "~%constraint assignment in candidate: ~A" assn)
              (let (assn-val)
                (setq assn-val (hash-access (cpd-assignments factor) 0 factor (list (get-cpd-index factor assn)) nil))
                ;;(format t "~%assignment value: ~A" assn-val)
                (when (= assn-val 0)
                  ;;(format t "~%invalid candidatate")
                  (return-from consistent-p nil)))))
  ;;(format t "~%success!")
  t)

#|Carries out backtracking depth first search |#

;; assignment = list of variable-values bindings
;; unassigned = list of variable-values lists
;; csp = constraint satisfaction problem
(defun csp-backtrack (assignment unassigned csp)
  #|
  (loop
    for constraint being the elements of (getf csp :constraints)
    do
       (format t "~%constraint: ~A" constraint))
  |#
  ;;(format t "~%~%partial solution:~%~A~%remaining assignments:~%~A" assignment unassigned)
  (cond ((complete? assignment csp)
         assignment)
        (t
         (let (var)
           (setq var (select-unassigned-variable unassigned))
           ;;(format t "~%    attempting to assign var ~A" var)
           (loop
             for val in (order-variable-values var)
             with inferences and result
             do
                ;;(format t " with value: ~A;" val)
                (when (consistent-p (car var) val assignment csp)
                  ;;(format t "~%        success! recursing")
                  (setq assignment (cons (cons (car var) val) assignment))
                  ;;(setq inferences (csp-inference csp var val))
                  ;;(break)
                  (when (not (eq 'fail inferences))
                    (setq assignment (append inferences assignment))
                    (setq result (csp-backtrack assignment (subseq unassigned 1) csp))
                    ;;(format t "~%        returned from recursion with result: ~A~%" result)
                    (if (not (eq 'fail result))
                        (return-from csp-backtrack result)
                        (setq assignment (nthcdr (+ (length inferences) 1) assignment)))))
                ;;(format t "~%failure")
                ;;(break)
             )
           'fail))))

#| Determines if there is an assignment of variable satisfying constraints |#

;; csp = constraints max factors from max-product alg.
;; unassigned = list of variable-values lists
(defun backtracking-search (csp unassigned)
  (format t "~%~%solving csp ...")
  (csp-backtrack nil (make-array (length unassigned) :initial-contents (make-priority-q unassigned) :fill-pointer t) csp))

(defun initialize-csp-assignments (csp)
  (loop
    for cpd being the elements of (getf csp :constraints)
    for var in (getf csp :vars)
    for i from 1
    collect (car (nth (random (length (gethash 0 (cpd-var-value-map cpd)))) (gethash 0 (cpd-var-value-map cpd)))) into assns
    finally
       (if (> (array-dimension (getf csp :constraints) 0) 0)
           (return (make-array i :initial-contents assns :fill-pointer t))
           (return (make-array 0 :fill-pointer t)))))

(defun csp-solution? (assignment csp)
  (when nil
    (format t "~%~%assignment: ~A" assignment))
  (loop
    with new-assn = (make-array (array-dimension assignment 0) :initial-element 'conflict :fill-pointer t)
    with conflicted and num-factors = (length (getf csp :vars))
    for factor being the elements of (getf csp :constraints)
    for i from 0
    do
       (when nil
         (format t "~%checking constraint:~%~A" factor))
       (loop
         for v being the hash-keys of (cpd-identifiers factor)
           using (hash-value pos)
         with sym-assn and sym-val and bindings
         do
            (setq bindings (gethash pos (cpd-var-value-map factor)))
            (loop
              named assoc-array
              for j from 0
              for factorj being the elements of (getf csp :constraints)
              when (equal v (cpd-dependent-id factorj)) do
                (setq sym-assn j)
                (setq sym-val (aref assignment j))
                (return-from assoc-array))
            (when nil
              (format t "~%constraint variable: ~A~%constraint variable vvm: ~A~%candidatate assignment for ~A: ~A" v bindings v (cons sym-assn sym-val)))
         when sym-assn
           collect (cdr (assoc sym-val bindings :test #'equal)) into assn
         finally
            (when nil
              (format t "~%constraint assignment in candidate: ~A" assn))
            (let (assn-val)
              (setq assn-val (hash-access (cpd-assignments factor) 0 factor (list (get-cpd-index factor assn)) nil))
              ;;(format t "~%assignment value: ~A" assn-val)
              #|
              (if (< i num-factors)
              (setf (aref new-assn i) (aref assignment i))
              (setf (aref new-assn (- i num-factors)) (aref assignment (- i num-factors))))
              (when (= assn-val 0)
              ;;(format t "~%invalid candidatate")
              (if (< i num-factors)
              (setq conflicted (cons i conflicted))
              (setq conflicted (cons (- i num-factors) conflicted))))
              |#
              (cond ((= assn-val 0)
                     ;;(format t "~%invalid candidatate")
                     (cond ((< i num-factors)
                            (setq conflicted (cons i conflicted))
                            (setf (aref new-assn i) 'conflict))
                           (t
                            (setq conflicted (cons (- i num-factors) conflicted))
                            (setf (aref new-assn (- i num-factors)) 'conflict))))
                    (t
                     (if (< i num-factors)
                         (setf (aref new-assn i) (aref assignment i))
                         (setf (aref new-assn (- i num-factors)) (aref assignment (- i num-factors))))))
	      ))
    finally
       ;;(format t "~%success!")
       (return (values (make-array (length conflicted) :initial-contents conflicted :fill-pointer t) new-assn))))

(defun generate-final-csp-assignment (csp conflicted-vars assn)
  (loop
    for var-val being the elements of assn
    for cpd being the elements of (getf csp :constraints)
    for i from 0
    when (or (not (member i conflicted-vars)) #|(not (eq var-val 'conflict))|#)
      collect (cons (cpd-dependent-id cpd) var-val) into assignment
    finally
       (when nil
         (format t "~%inferred assignment:~%~A" assignment)
         (break))
       (return assignment)))

;; idx = index to cpd of interest in csp
;; assn = current assignment
;; csp = constraint satisfaction problem
(defun conflicts (idx assn csp)
  (loop
    with cpd = (aref (getf csp :constraints) idx)
    with min-conflicts = most-positive-fixnum and num-conflicts
    with assn-copy = (copy-array assn)
    with candidates and candidates-size
    for value in (gethash 0 (cpd-var-value-map cpd)) do
      (setf (aref assn-copy idx) (car value))
      (setq num-conflicts (array-dimension (csp-solution? assn-copy csp) 0))
      (cond ((= num-conflicts min-conflicts)
             (setq candidates (cons (car value) candidates))
             (setq candidates-size (1+ candidates-size)))
            ((< num-conflicts min-conflicts)
             (setq min-conflicts num-conflicts)
             (setq candidates (list (car value)))
             (setq candidates-size 1)))
    finally
       (return (nth (random candidates-size) candidates))))

#| Constraint satisfaction problem solver using local search |#

;; csp = constraints max factors from max-product alg.
;; max-steps = number of steps allowed before giving up
(defun min-conflicts (csp &optional (max-steps 75))
  (when t
    (format t "~%engaging CSP"))
  (loop
    with current = (initialize-csp-assignments csp)
    with conflicted-vars and var and value
    for i from 1 to max-steps do
      (setq conflicted-vars (csp-solution? current csp))
      (when nil
        (format t "~%current solution: ~A~%conflicts:~%~A" current conflicted-vars))
      (when (= (array-dimension conflicted-vars 0) 0)
        (when nil
          (format t "~%Recovered consistent state at ~d steps..." i))
        (return-from min-conflicts (generate-final-csp-assignment csp (reverse (coerce conflicted-vars 'list)) current)))
      (setq var (aref conflicted-vars (random (array-dimension conflicted-vars 0))))
      (setq value (conflicts var current csp))
      (setf (aref current var) value)
    finally
       (when nil
         (format t "~%Recovered conflicted state..."))
       (multiple-value-bind (conflicted new-conflicts)
           (csp-solution? current csp)
         (when nil
           (format t "~%conflicted variables:~%~S~%new-conflicts:~%~S" (reverse (coerce conflicted 'list)) new-conflicts))
         (return (generate-final-csp-assignment csp (coerce conflicted 'list) new-conflicts)))))

(defun print-cpd-rule (rule &key (indent "      ") (stream t))
  (format stream "~%~a  (~A)<" indent (rule-id rule))
  (loop
    for att being the hash-keys of (rule-conditions rule)
      using (hash-value val)
    do
       (format stream "~a:=~d " att val)
    finally
       (format stream "; ~d, ~d>" (if (rule-probability rule) (float (rule-probability rule))) (rule-count rule))))

;; cpd = rule-based conditional-probability distribution
(defun print-cpd (cpd &key (indent "    ") (stream t))
  (let ((big-indent (format nil "~a~a" indent indent))
	(fields (list :identifiers :var-value-block-map :rules :singleton-p)))
    (when (rule-based-cpd-p cpd)
      (format stream "~%~aCPD:" indent)
      (loop
	for field in fields
	do
	   (case field
	     (:identifiers
	      (format stream "~%~a  P(~a | ~{~a~^ ~})" indent (rule-based-cpd-dependent-id cpd)
		      (loop
			for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
			when (not (equal ident (rule-based-cpd-dependent-id cpd)))
			collect ident into parents
			finally
			   (return parents))))
	     (:var-value-block-map
	      (when (rule-based-cpd-var-value-block-map cpd)
		(format stream "~%~a  Variable Values:" indent)
		(loop
		  with vvbm
		  for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
		    using (hash-value idx)
		  do
		     (setq vvbm (gethash idx (rule-based-cpd-var-value-block-map cpd)))
		     (format stream "~%~avar: ~a~%~avalues:~%~a  ~a" big-indent ident big-indent big-indent (mapcar #'car vvbm)))))
	     (:rules
	      (format stream "~%~a  Rules:" indent)
	      (map nil #'(lambda (rule)
			   (print-cpd-rule rule :indent big-indent :stream stream))
		   (rule-based-cpd-rules cpd)))
	     (:singleton-p
	      (format stream "~%~a  Singleton-p: ~a" indent (rule-based-cpd-singleton-p cpd))))))))

;; bn = Bayesian network represented as a cons of an array of CPDs and a hash table of edges
;; indent = size of indentations
(defun print-bn (bn &key (indent "    ")(stream t))
  (when (consp bn)
    (format stream "~%~aNETWORK:" indent)
    (loop
      for cpd being the elements of (car bn)
      do
	 (print-cpd cpd :indent (format nil "~a~a" indent indent) :stream stream))))
  
#| Print key value pair from hashtable |#

;; key = hashtable key
;; value = hashtable value
(defun print-hash-entry (key value)
  (cond ((rule-based-cpd-p value)
         (format t "~%    ~d:" key)
         (map nil #'print-cpd-rule (rule-based-cpd-rules value)))
        (t
         (format t "~%    ~d: ~A" key value))))

#| Print all current messages in factor graph |#

;; messages = hashtable of messages
(defun print-messages (messages)
  (maphash #'(lambda (key value)
               (format t "~%The messages from node ~d are:" key)
               (maphash #'print-hash-entry value))
           messages))

#| Create list of fully qualified cpd variables|#

;; cpd = conditional probability density
(defun get-fully-qualified-cpd-vars (cpd)
  (generate-cpd-vars (cpd-vars cpd) (cpd-concept-ids cpd)))

#| Append unique phi2 variables to the end of phi1 variables |#

;; phi1 = conditional probability density 1
;; phi2 = conditional probability density 2
(defun ordered-union (phi1 phi2)
  (loop
    with idents = (copy-hash-table (rule-based-cpd-identifiers phi1)) and var-union = (rule-based-cpd-vars phi1)
    with concept-ids = (rule-based-cpd-concept-ids phi1) and qvars = (rule-based-cpd-qualified-vars phi1)
    with var-value-block-map = (rule-based-cpd-var-value-block-map phi1) and types = (rule-based-cpd-types phi1)
    with sva = (rule-based-cpd-set-valued-attributes phi1)
    with lower-vvbms = (rule-based-cpd-lower-approx-var-value-block-map phi1)
    with vals = (rule-based-cpd-var-values phi1)
    for ident2 being the hash-keys of (rule-based-cpd-identifiers phi2)
      using (hash-value pos2)
    do
       (when (not (gethash ident2 idents))
         (setf (gethash ident2 idents) (hash-table-count idents))
         (setf (gethash (hash-table-count var-union) var-union) (gethash pos2 (rule-based-cpd-vars phi2)))
         (setf (gethash (hash-table-count types) types) (gethash pos2 (rule-based-cpd-types phi2)))
         (setf (gethash (hash-table-count concept-ids) concept-ids) (gethash pos2 (rule-based-cpd-concept-ids phi2)))
         (setf (gethash (hash-table-count qvars) qvars) (gethash pos2 (rule-based-cpd-qualified-vars phi2)))
         (setf (gethash (hash-table-count var-value-block-map) var-value-block-map) (gethash pos2 (rule-based-cpd-var-value-block-map phi2)))
         (setf (gethash (hash-table-count sva) sva) (gethash pos2 (rule-based-cpd-set-valued-attributes phi2)))
         (setf (gethash (hash-table-count lower-vvbms) lower-vvbms) (gethash pos2 (rule-based-cpd-lower-approx-var-value-block-map phi2)))
         (setf (gethash (hash-table-count vals) vals) (gethash pos2 (rule-based-cpd-var-values phi2))))
    finally
        (return (values idents var-union types concept-ids qvars var-value-block-map sva lower-vvbms vals))))

#| Normalize factor rules to maintain probability measure.
   Returns: Destructively modified phi|#

;; assignments = array of assignments in conditional probability density
;; row-length = length of row in multi-dementional cpd
;; input-cpdp = generalized boolean stating whether the input distribution shows values for NA or not. (CPD or nil)
;; output-cpdp = generalized boolean stating whether the output distribution is shows values for NA or not. (CPD or nil)
(defun normalize-rule-probabilities (phi new-dep-id)
  (when nil print-special*
    (format t "~%~%normalizing phi:")
    (print-cpd phi))
  (loop
    with dep-id-pos = (gethash new-dep-id (rule-based-cpd-identifiers phi))
    with rules = (rule-based-cpd-rules phi)
    with new-rules and block = 0 and new-rule
    for r1 being the elements of rules
    do
       (when nil print-special*  nil (and (equal "TOWER546" (rule-based-cpd-dependent-id phi)))
         (format t "~%normalizing rule:~%~S" r1))
         (loop
           with copy-rule = (copy-cpd-rule r1)
           with compatible-rules and compatible-rule and norm-const and row-count
           for i in (gethash dep-id-pos (rule-based-cpd-var-values phi))
           do
              (setf (gethash new-dep-id (rule-conditions copy-rule)) (list i))
	      (setq compatible-rules (get-compatible-rules phi phi copy-rule :find-all nil))
              (setq compatible-rule (car compatible-rules))
              (when nil print-special* (and (equal "TOWER546" (rule-based-cpd-dependent-id phi)))
                    (format t "~%getting rule for assignment:")
		    (print-cpd-rule copy-rule)
		    (format t "~%candidatate matches:")
		    (map nil #'print-cpd-rule compatible-rules)
		    (format t "~%selection:")
		    (print-cpd-rule compatible-rule))
           when (or (null (rule-count compatible-rule))
                    (>= (rule-count compatible-rule) 0)
		    )
                collect compatible-rule into row
           finally
              ;;(setq norm-const (reduce #'(lambda (rule1 rule2) (+ (rule-probability rule1) (rule-probability rule2))) row))
              (setq norm-const (apply #'+ (mapcar #'rule-probability row)))
	      (setq new-rule (copy-cpd-rule r1))
              (setf (rule-probability new-rule) (if (> norm-const 0)
                                                    (/ (rule-probability r1) norm-const)
                                                    0))
	      (when (rule-count r1)
		(setq row-count (apply #'max (mapcar #'rule-count row)))
		(setf (rule-count new-rule) row-count))
              (setf (rule-block new-rule) (make-hash-table))
              (setf (gethash block (rule-block new-rule)) block)
              (setq block (+ block 1))
	      (when nil print-special* nil (and (equal "TOWER546" (rule-based-cpd-dependent-id phi)))
		    (format t "~%~%row:")
		    (mapcar #'print-cpd-rule row)
		    (format t "~%normalizing constant: ~d~%new count: ~d" norm-const row-count)
		    (format t "~%normalized rule:")
		    (print-cpd-rule new-rule))
              (when (or (> (rule-probability new-rule) 1)
                        (< (rule-probability new-rule) 0))
		(print-cpd phi)
		(format t "~%identifiers:~%~S~%normalizing rule:" (rule-based-cpd-identifiers phi))
		(print-cpd-rule r1)
		(format t "~%row:")
		(map nil #'print-cpd-rule row)
		(format t "~%normalizing constant: ~d~%new rule:" norm-const)
		(print-cpd-rule new-rule)
		;;(format t "~%identifiers:~%~S~%normalizing rule:~%~S~%row:~%~S~%norm const: ~d~%normalized rule:~%~S" (rule-based-cpd-identifiers phi) r1 row norm-const new-rule)
                (error "Normalization error"))
              (setq new-rules (cons new-rule new-rules))
	      (when nil print-special*
		(format t "~%block: ~d~%new rules:" block)
		(map nil #'print-cpd-rule new-rules)))
    finally
       (setf (rule-based-cpd-rules phi) (make-array block :initial-contents (reverse new-rules))))
  phi)

#| split rules compatible with new zero-count rules |#

;; rules = list of rules from which to split
;; rule = rule to split against
;; phi = cpd from which rules come from
;; ident = variable to split on
;; binding = variable binding to avoid when splitting
;; vvbm = variable var block map from which to find bindings to use in splitting
(defun split-compatible-rules (rules rule phi ident binding vvbm)
  (loop
    with split-rules = nil
    for existing-rule in rules
    when (and (or (not (equal (rule-probability rule)
                              (rule-probability existing-rule)))
                  (not (equal (rule-count rule)
                              (rule-count existing-rule))))
              (compatible-rule-p rule existing-rule phi phi))
      do
         (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id phi)))
           (format t "~%~%existing rule is compatible with new rule.~%Splitting existing rule:")
           (print-cpd-rule existing-rule)
           (format t "~%new rule:")
           (print-cpd-rule rule))
         (loop
           with split-rule = (copy-cpd-rule existing-rule)
           for (binding2 block) in vvbm
           when (not (equal (car binding2) (car binding)))
             do
                (when (null (gethash ident (rule-conditions split-rule)))
                  (setf (gethash ident (rule-conditions split-rule)) nil))
                (setf (gethash ident (rule-conditions split-rule))
                      (cons (cdr binding2)
                            (gethash ident (rule-conditions split-rule))))
           finally
              (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id phi)))
                (format t "~%split rule:")
                (print-cpd-rule split-rule)
                ;;(format t "~%compatible rules:")
                ;;(mapcar #'print-cpd-rule (get-compatible-rules phi phi split-rule :find-all t))
                )
              (setq split-rules (cons split-rule split-rules)))
    else
      do
         (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id phi)))
               (format t "~%~%existing rule is NOT compatible with new rule. Inserting existing rule:")
               (print-cpd-rule existing-rule))
         (setq split-rules (cons existing-rule split-rules))
    finally
       (return split-rules)))

#| Add back any pruned conditions to every rule in ruleset if they are missing from phi2 identifiers
   Returns: destrictively modified CPD |#

;; phi1 = conditional probability distribution
;; phi2 = conditional probability distribution
(defun disambiguate-rules (phi1 phi2)
  (loop
    with vals
    for ident1 being the hash-keys of (rule-based-cpd-identifiers phi1)
      using (hash-value idx)
    when (not (gethash ident1 (rule-based-cpd-identifiers phi2)))
      do
	 (setq vals (gethash idx (rule-based-cpd-var-values phi1)))
	 (loop
	   for r being the elements of (rule-based-cpd-rules phi1)
	   when (not (gethash ident1 (rule-conditions r)))
	     do
		(setf (gethash ident1 (rule-conditions r)) vals)))
  phi1)

#| Update schema domains with contents from episode |#

;; phi1 = conditional probability density from base
;; phi2 = conditional probability density from pattern
(defun cpd-update-schema-domain (phi1 phi2 new-nodes &key (q-first-bindings (make-hash-table :test #'equal)))
  (when nil (and print-special* (equal "THREE_948" (rule-based-cpd-dependent-id phi1)))
        (format t "~%~%updating schema:~%~A~%with episode:~%~A" phi1 phi2))
  (loop
    for ident2 being the hash-keys of (rule-based-cpd-identifiers phi2)
      using (hash-value idx)
    with var and type and vvbm2 and cid2 and qvar2
    with new-rule
    with var2s and binding
    with pos and vvbm1 and lower-vvbm1 and sva1 and vals1
    do
       (setq var (gethash idx (rule-based-cpd-vars phi2)))
       (setq type (gethash idx (rule-based-cpd-types phi2)))
       (setq vvbm2 (gethash idx (rule-based-cpd-var-value-block-map phi2)))
       (setq cid2 (gethash idx (rule-based-cpd-concept-ids phi2)))
       (setq qvar2 (gethash idx (rule-based-cpd-qualified-vars phi2)))
       (setq pos (gethash ident2 (rule-based-cpd-identifiers phi1)))
       (when nil (and print-special* (equal "THREE_948" (rule-based-cpd-dependent-id phi1)))
             (format t "~%~%identifier in episode: ~A~%position of identifier in schema: ~d" ident2 pos))
       (cond (pos
              (setq vvbm1 (gethash pos (rule-based-cpd-var-value-block-map phi1)))
              (setq sva1 (gethash pos (rule-based-cpd-set-valued-attributes phi1)))
              (setq lower-vvbm1 (gethash pos (rule-based-cpd-lower-approx-var-value-block-map phi1)))
              (setq vals1 (gethash pos (rule-based-cpd-var-values phi1)))
              (setq var2s (sort (set-difference vvbm2 vvbm1 :key #'caar :test #'equal)
                                #'< :key #'cdar))
              (when nil (and print-special* (equal "THREE_948" (rule-based-cpd-dependent-id phi1)))
                    (format t "~%schema vvbm:~%~S~%episode vvbm:~%~S" vvbm1 vvbm2))
              (loop
                with var2 and insert-pos
                for att-block in var2s
                ;;for count from (+ (cdaar (last vvbm1)) 1)
                do
                   (setq var2 (caar att-block))
                   ;;(setq binding (cons (caar att-block) count))
                   (setq binding (cons (caar att-block) (cdar att-block)))
                   (setq insert-pos (- (cdr binding) 1))
                   ;;(setq vvbm1 (reverse (cons (list binding (make-hash-table)) (reverse vvbm1))))
                   ;;(setq nvvbm1 (reverse (cons (list binding (make-hash-table)) (reverse nvvbm1))))
                   ;;(setq sva1 (reverse (cons (list (cdr binding)) (reverse sva1))))
                   (setq vvbm1 (insert-after vvbm1 insert-pos (list binding (make-hash-table))))
                   (setq sva1 (insert-after sva1 insert-pos (list (cdr binding))))
                   (when nil (and print-special* (equal "THREE_948" (rule-based-cpd-dependent-id phi1)))
                         (format t "~%updated schema vvbm: ~S~%episode vvbm: ~S~%var2s:~%~S~%var2: ~S~%binding:~%~S" vvbm1 vvbm2 var2s var2 binding))
                   (setq lower-vvbm1 (insert-after lower-vvbm1 insert-pos (list binding (make-hash-table))))
                   (setq vals1 (insert-after vals1 insert-pos (cdr binding)))
                   (cond ((= pos 0)
                          ;; new column
                          (loop
                            with rule-condition
                            with new-rules = (coerce (rule-based-cpd-rules phi1) 'list)
                            for rule being the elements of (rule-based-cpd-rules phi1)
                            do
                               (setq new-rule (copy-cpd-rule rule))
                               (setf (gethash ident2 (rule-conditions new-rule)) (list (cdr binding)))
                               (setf (rule-probability new-rule) 0)
                               (when nil (and (equal "OBSERVATION_VAR2_210" (rule-based-cpd-dependent-id phi1)))
                                     (format t "~%new rule:~%~S~%existing rule:~%~S" new-rule rule))
                               (when (notany #'(lambda (r) (same-rule-p new-rule r phi1 phi1)) new-rules)
                                 (when nil (and (equal "GREATER_230" (rule-based-cpd-dependent-id phi1)))
                                       (format t "~%~%binding: ~S~%new rule:~%~S~%existing rule:~%~S" binding new-rule rule))
                                 (setq new-rules (split-compatible-rules new-rules new-rule phi1 ident2 binding vvbm1))
                                 (setq new-rules (cons new-rule new-rules)))
                               (when nil (and (equal "GREATER_230" (rule-based-cpd-dependent-id phi1)))
                                     (format t "~%new rules:")
                                     (map nil #'print-cpd-rule new-rules)
                                     ;;(format t "~%new rules:~%~S" new-rules)
                                     ;;(break)
                                     )
                            finally
                               (setq new-rules (remove-duplicates new-rules :test #'(lambda (r1 r2)
                                                                                      (same-rule-p r1 r2 phi1 phi1))))
                               (setf (rule-based-cpd-rules phi1) (make-array (length new-rules) :initial-contents new-rules))))
                         (t
                          ;; new row
                          (loop
                            with new-rules = (coerce (rule-based-cpd-rules phi1) 'list)
                            for i from 0 to 1
                            do
                               (setq new-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                                         :conditions (make-hash-table :test #'equal)
                                                         :block (make-hash-table);;(list (array-dimension (rule-based-cpd-rules phi1) 0))
                                                         :probability i
                                                         :count 0 #|(rule-count (aref (rule-based-cpd-rules phi1) 0))|#))
                               (setf (gethash (array-dimension (rule-based-cpd-rules phi1) 0) (rule-block new-rule))
                                     (array-dimension (rule-based-cpd-rules phi1) 0))
                               (cond ((= i 0)
                                      (loop
                                        with loop-rule = (copy-cpd-rule new-rule)
                                        for vvb in (gethash 0 (rule-based-cpd-var-value-block-map phi1))
                                        for j from 0
                                        when (not (= j 0))
                                          do
                                             (when (null (gethash (rule-based-cpd-dependent-id phi1) (rule-conditions loop-rule)))
                                               (setf (gethash (rule-based-cpd-dependent-id phi1)
                                                              (rule-conditions loop-rule))
                                                     nil))
                                             (setf (gethash (rule-based-cpd-dependent-id phi1)
                                                            (rule-conditions loop-rule))
                                                   (cons j (gethash (rule-based-cpd-dependent-id phi1)
                                                                    (rule-conditions loop-rule))))
                                        finally
                                             (setf (gethash ident2 (rule-conditions loop-rule)) (list (cdr binding)))
                                             (when nil (and (equal "GREATER_230" (rule-based-cpd-dependent-id phi1)))
                                                   (format t "~%new rule:")
                                                   (print-cpd-rule loop-rule))
                                             (setq new-rules (split-compatible-rules new-rules loop-rule phi1 ident2 binding vvbm1))
                                             (setq new-rules (cons loop-rule new-rules))))
                                     (t
                                      (setf (gethash (rule-based-cpd-dependent-id phi1) (rule-conditions new-rule)) (list 0))
                                      (setf (gethash ident2 (rule-conditions new-rule)) (list (cdr binding)))
                                      (when nil (and (equal "GREATER_230" (rule-based-cpd-dependent-id phi1)))
                                            (format t "~%new rule:")
                                            (print-cpd-rule new-rule))
                                      (setq new-rules (split-compatible-rules new-rules new-rule phi1 ident2 binding vvbm1))
                                      (setq new-rules (cons new-rule new-rules))))                            
                               (setq new-rules (remove-duplicates new-rules :test #'(lambda (r1 r2)
                                                                                      (same-rule-p r1 r2 phi1 phi1))))
                               (setf (rule-based-cpd-rules phi1) (make-array (length new-rules) :initial-contents new-rules)))))
                   (setf (gethash pos (rule-based-cpd-var-value-block-map phi1)) vvbm1)
                   (setf (gethash pos (rule-based-cpd-set-valued-attributes phi1)) sva1)
                   (setf (gethash pos (rule-based-cpd-lower-approx-var-value-block-map phi1)) lower-vvbm1)
                   (setf (gethash pos (rule-based-cpd-var-values phi1)) vals1)
                   (setf (rule-based-cpd-cardinalities phi1) (get-var-cardinalities (rule-based-cpd-var-value-block-map phi1)))
                   (setf (rule-based-cpd-step-sizes phi1) (generate-cpd-step-sizes (rule-based-cpd-cardinalities phi1)))
                   (when nil (and (equal "GREATER_230" (rule-based-cpd-dependent-id phi1)))
                         (format t "~%updated schema rules:")
                         (map nil #'print-cpd-rule (rule-based-cpd-rules phi1)))
                   (when nil (and (equal "GO_HOLD885" (rule-based-cpd-dependent-id phi1)))
                         (format t "~%updated schema:~%~S" phi1)
                         (break))))
             ((and (not pos) (gethash ident2 q-first-bindings))
              (when (and nil print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                (format t "~%~%~S is not in cpd: ~S, but is already a schema node:~%~S" ident2 (rule-based-cpd-identifiers phi1) q-first-bindings))
              (let ((parent-cpd (get-cpd-by-id ident2 new-nodes))
                    (idx (hash-table-count (rule-based-cpd-identifiers phi1))))
                (setf (gethash ident2 (rule-based-cpd-identifiers phi1)) idx)
                (when (and nil print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                  (format t "~%~%looking up ~S.~%found-p:~%~S~%updated nodes:" ident2 parent-cpd)
                  (loop
                    for cpd in new-nodes
                    do
                       (format t "~%~S" (rule-based-cpd-identifiers cpd))))
                (loop
                  with bind1
                  for vvb in (gethash 0 (rule-based-cpd-var-value-block-map parent-cpd))
                  do
                     (setq bind1 (cons (caar vvb) (cdar vvb)))
                     (when (and nil print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                       (format t "~%~%adding ~S to vvbm" bind1))
                     (when (null (gethash idx (rule-based-cpd-var-value-block-map phi1)))
                       (setf (gethash idx (rule-based-cpd-var-value-block-map phi1)) nil))
                     (setf (gethash idx (rule-based-cpd-var-value-block-map phi1))
                           (reverse (cons (list bind1 (make-hash-table))
                                          (reverse (gethash idx (rule-based-cpd-var-value-block-map phi1))))))
                     (when (null (gethash idx (rule-based-cpd-var-value-block-map phi1)))
                       (setf (gethash idx (rule-based-cpd-lower-approx-var-value-block-map phi1)) nil))
                     (setf (gethash idx (rule-based-cpd-lower-approx-var-value-block-map phi1))
                           (reverse (cons (list bind1 (make-hash-table))
                                          (reverse (gethash idx (rule-based-cpd-lower-approx-var-value-block-map phi1))))))
                  finally
                     (setf (gethash idx (rule-based-cpd-set-valued-attributes phi1))
                           (gethash 0 (rule-based-cpd-set-valued-attributes parent-cpd)))
                     (setf (gethash idx (rule-based-cpd-var-values phi1))
                           (gethash 0 (rule-based-cpd-var-values parent-cpd)))
                     (setf (gethash idx (rule-based-cpd-var-values phi1))
                           (gethash 0 (rule-based-cpd-var-values parent-cpd)))
                     (setf (rule-based-cpd-cardinalities phi1)
                           (generate-cpd-cardinalities (rule-based-cpd-var-value-block-map phi1)))
                     (setf (rule-based-cpd-step-sizes phi1)
                           (generate-cpd-step-sizes
                            (rule-based-cpd-cardinalities phi1)))))
              (when nil (and nil print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                (format t "~%updated cpd variables:~%~S" phi1)
                (break))
              (loop
                with new-rules
                for rule being the elements of (rule-based-cpd-rules phi1)
                do
                   (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                         (format t "~%~%updating rule:")
                         (print-cpd-rule rule))
                   (loop
                     with new-rule = (copy-cpd-rule rule)
                     with updated-vvbm1 = (gethash (- (hash-table-count (rule-based-cpd-identifiers phi1)) 1)
                                                   (rule-based-cpd-var-value-block-map phi1))
                     with binding-idx = -1 
                     for (binding . block) in updated-vvbm1
                     when (not (equal (car binding)
                                      (caar (second vvbm2))))
                       do
                          (when (null (gethash ident2 (rule-conditions new-rule)))
                            (setf (gethash ident2 (rule-conditions new-rule)) nil))
                          (setf (gethash ident2 (rule-conditions new-rule))
                                (cons
                                 (cdr binding)
                                 (gethash ident2 (rule-conditions new-rule))))
                     else do
                       (setq binding-idx (cdr binding))
                     finally
                        (setq new-rules (cons new-rule new-rules))
                        (setq new-rule (copy-cpd-rule rule))
                        (setf (gethash ident2 (rule-conditions new-rule)) (list binding-idx))
                        (setf (rule-count new-rule) 0)
                        (setf (rule-probability new-rule) 0)
                        (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                              (format t "~%(car binding): ~S~%(caar (second vvbm2)): ~S~%updated rule:" (car binding) (caar (second vvbm2)))
                              (print-cpd-rule new-rule)
                              (break))
                        ;;(setq new-rules (split-compatible-rules new-rules new-rule phi1 ident2 (cons ident2 (cdr binding)) updated-vvbm1))
                        (setq new-rules (cons new-rule new-rules)))
                finally
                   (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id phi1)))
                         (format t "~%~%new rules:")
                         (mapcar #'print-cpd-rule new-rules)
                         (break))
                   (setf (rule-based-cpd-rules phi1) (make-array (length new-rules) :initial-contents (reverse new-rules))))))
    finally
       (when nil (equal "GO_HOLD1195" (rule-based-cpd-dependent-id phi1))
             (format t "~%updated schema:~%~S" phi1))
       (return phi1)))

#| Transform cpd rules to match transformed domain.
   Returns: array of cpd rules|#

;; cpd = conditional probability distribution with rules to modify
;; attribute = target attribute
;; transform = conses where each cons maps old value to new value for attribute
(defun cpd-transform-rule-conditions (cpd attribute transform additional-rules)
  (when nil (and (= cycle* 3) (equal "GO_HOLD925" (rule-based-cpd-dependent-id cpd)))
	(format t "~%rules to transform:~%~S~%on attribute:~%~S~%using transform:~%~S" (rule-based-cpd-rules cpd) attribute transform))
  (loop
    with map
    for rule being the elements of (rule-based-cpd-rules cpd)
    for count from 1
    do
       (when (gethash attribute (rule-conditions rule))
         (loop
           with map
           for val in (gethash attribute (rule-conditions rule))
           do
              (setq map (gethash val transform))
              (when nil (and (= cycle* 3) (equal "GO_HOLD925" (rule-based-cpd-dependent-id cpd)))
                    (format t "~%rule:~%~S~%condition:~%~S~%transform:~%~S~%map:~%~S" rule val transform map))
              (when (null map)
                (setq map val))
           collect  map into new-vals
           finally
              (setf (gethash attribute (rule-conditions rule)) new-vals)
              (when nil (and (= cycle* 3) (equal "GO_HOLD925" (rule-based-cpd-dependent-id cpd)))
                    (format t "~%updated rule:~%~S" rule))))
       (setq additional-rules (reverse (cons rule (reverse additional-rules))))
    finally
       (setf (rule-based-cpd-rules cpd)
             (make-array (length additional-rules)
                         :initial-contents (reverse additional-rules)))
       (return (rule-based-cpd-rules cpd))))

#| Destructively update the episode domain and vvbm indexes to be consistent with schema
   Returns: Modified phi1 conditional probability distribution|#

;; phi1 = conditional probability density from pattern
;; phi2 = conditional probability density from base
(defun cpd-transform-episode-domain (phi1 phi2)
  (when nil (and (equal "ACTION601" (rule-based-cpd-dependent-id phi1)))
    (format t "~%~%episode:~%~S" phi1)
    (format t "~%~%trasnforming episode domain:~%~S~%with~%~S" (rule-based-cpd-var-value-block-map phi1) (rule-based-cpd-var-value-block-map phi2)))
  (loop
    with transform
    with vvbms1
    with vvbms2 and sva2 and vals2 and lower-vvbms2
    with pos2 and binding2 and len and additional-rules
    for ident being the hash-keys of (rule-based-cpd-identifiers phi1)
      using (hash-value pos1)
    do
       (setq additional-rules nil)
       (setq transform (make-hash-table))
       (setq vvbms1 (gethash pos1 (rule-based-cpd-var-value-block-map phi1)))
       (setq pos2 (gethash ident (rule-based-cpd-identifiers phi2)))
       (when pos2
         (setq vvbms2 (gethash pos2 (rule-based-cpd-var-value-block-map phi2)))
         (setq sva2 (gethash pos2 (rule-based-cpd-set-valued-attributes phi2)))
         (setq vals2 (gethash pos2 (rule-based-cpd-var-values phi2)))
         (when nil (and (equal "ACTION601" (rule-based-cpd-dependent-id phi1)))
               (format t "~%vvbms1:~%~S~%vvbms2:~%~S" vvbms1 vvbms2))
         (loop
           with new-rule
           for vvbm in vvbms2
           when (not (member (caar vvbm) vvbms1 :key #'caar :test #'equal))
             do
                (when nil (and (equal "ACTION601" (rule-based-cpd-dependent-id phi1)))
                      (format t "~%no rule for ~S in ~S~%pos1: ~d" (caar vvbm) (rule-based-cpd-rules phi1) pos1))
                (cond ((= pos1 0)
                       (loop
                         for rule being the elements of (rule-based-cpd-rules phi1)
                         do
                            (setq new-rule (copy-cpd-rule rule))
                            (setf (gethash ident (rule-conditions new-rule)) (list (cdar vvbm)))
                            (setf (rule-probability new-rule) 0)
                            (when (notany #'(lambda (r) (same-rule-p new-rule r phi1 phi1)) additional-rules)
                              (setq additional-rules (cons new-rule additional-rules)))
                            (when (not (gethash ident (rule-conditions rule)))
                              ;;(setf (gethash ident (rule-conditions rule)) (list 'not (cdar vvbm)))
                              (loop
                                with new-rule = (copy-cpd-rule rule)
                                for i from 0 to (- (aref (rule-based-cpd-cardinalities phi1) pos1) 1)
                                when (not (= i (cdar vvbm)))
                                  do
                                     ;;(setq new-rule (copy-cpd-rule rule))
                                     (when (null (gethash ident (rule-conditions new-rule)))
                                       (setf (gethash ident (rule-conditions new-rule)) nil))
                                     (setf (gethash ident (rule-conditions new-rule))
                                           (cons i
                                                 (gethash ident (rule-conditions new-rule))))
                                finally
                                   (when (notany #'(lambda (r) (same-rule-p new-rule r phi1 phi1)) additional-rules)
                                     (setq additional-rules (cons new-rule additional-rules)))))))
                      (t
                       (loop
                         for i from 0 to 1
                         do
                            (setq new-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                                      :conditions (make-hash-table :test #'equal)
                                                      :probability i
                                                      :count 0 #|(rule-based-cpd-count phi1)|#))
                            (cond ((= i 0)
                                   (loop
                                     with loop-rule = (copy-cpd-rule new-rule)
                                     for vvb in (gethash 0 (rule-based-cpd-var-value-block-map phi1))
                                     for j from 0
                                     when (not (= j 0))
                                       do
                                          (when (null (gethash (rule-based-cpd-dependent-id phi1)
                                                               (rule-conditions loop-rule)))
                                            (setf (gethash (rule-based-cpd-dependent-id phi1)
                                                           (rule-conditions loop-rule))
                                                  nil))
                                          (setf (gethash (rule-based-cpd-dependent-id phi1) (rule-conditions loop-rule))
                                                (cons j
                                                      (gethash (rule-based-cpd-dependent-id phi1)
                                                               (rule-conditions loop-rule))))
                                     finally
                                        (setf (gethash ident (rule-conditions loop-rule)) (list (cdar vvbm)))
                                        (setq additional-rules (cons loop-rule additional-rules))))
                                  (t
                                   (setf (gethash (rule-based-cpd-dependent-id phi1) (rule-conditions new-rule)) (list 0))
                                   (setf (gethash ident (rule-conditions new-rule)) (list (cdar vvbm)))
                                   (setq additional-rules (cons new-rule additional-rules))))))))
         (when nil (and (= cycle* 5) (equal "ACTION601" (rule-based-cpd-dependent-id phi1)))
           (format t "~%additional rules:~%~S~%final transform:~%~S" (reverse additional-rules) transform))
         (setf (rule-based-cpd-rules phi1)
               (cpd-transform-rule-conditions phi1 ident transform (reverse additional-rules)))
         (setf (gethash pos1 (rule-based-cpd-var-value-block-map phi1)) vvbms2)
         (setf (gethash pos1 (rule-based-cpd-set-valued-attributes phi1)) sva2)
         (setf (gethash pos1 (rule-based-cpd-lower-approx-var-value-block-map phi1)) lower-vvbms2)
         (setf (gethash pos1 (rule-based-cpd-var-values phi1)) vals2)
         (setf (aref (rule-based-cpd-cardinalities phi1) pos1) (aref (rule-based-cpd-cardinalities phi2) pos2))
         (when nil (and (= cycle* 5) (equal "ACTION601" (rule-based-cpd-dependent-id phi1)))
           (format t "~%updated-cpd vvbms:~%~S~%updated cpd cardinalities:~%~S" (rule-based-cpd-var-value-block-map phi1) (rule-based-cpd-cardinalities phi1))
           (break))
         ))
  (setf (rule-based-cpd-step-sizes phi1)
        (generate-cpd-step-sizes (rule-based-cpd-cardinalities phi1)))
  phi1)

(defun make-trunc-cpd (cpd)
  (let (trunc-cpd trunc-idents trunc-vars trunc-types trunc-vvbm trunc-cids trunc-qvars trunc-sva trunc-lower-approx-var-value-block-map)
    (setq trunc-idents (make-hash-table :test #'equal))
    (setf (gethash (rule-based-cpd-dependent-id cpd) trunc-idents) 0)
    (setq trunc-vars (make-hash-table))
    (setf (gethash 0 trunc-vars)
          (gethash 0 (rule-based-cpd-vars cpd)))
    (setq trunc-types (make-hash-table))
    (setf (gethash 0 trunc-types)
          (gethash 0 (rule-based-cpd-types cpd)))
    (setq trunc-vvbm (make-hash-table))
    (setf (gethash 0 trunc-vvbm)
          (gethash 0 (rule-based-cpd-var-value-block-map cpd)))
    (setq trunc-sva (make-hash-table))
    (setf (gethash 0 trunc-sva)
          (gethash 0 (rule-based-cpd-set-valued-attributes cpd)))
    (setq trunc-lower-approx-var-value-block-map (make-hash-table))
    (setf (gethash 0 trunc-lower-approx-var-value-block-map)
          (gethash 0 (rule-based-cpd-lower-approx-var-value-block-map cpd)))
    (setq trunc-cids (make-hash-table))
    (setf (gethash 0 trunc-cids)
          (gethash 0 (rule-based-cpd-concept-ids cpd)))
    (setq trunc-qvars (make-hash-table))
    (setf (gethash 0 trunc-qvars)
          (gethash 0 (rule-based-cpd-qualified-vars cpd)))
    (setq trunc-cpd
          (make-rule-based-cpd
           :dependent-id (rule-based-cpd-dependent-id cpd)
           :identifiers trunc-idents
           :vars trunc-vars
           :types trunc-types
           :var-value-block-map trunc-vvbm
           :set-valued-attributes trunc-sva
           :lower-approx-var-value-block-map trunc-lower-approx-var-value-block-map
           :concept-ids trunc-cids
           :qualified-vars trunc-qvars))
    trunc-cpd))

#| Update variable value map of variables in cpd that have already been merged |#

;; cpd = conditional probability density
;; bindings = variable bindings
;; new-nodes = list of updated conditional probability distributions
(defun cpd-update-existing-vvms (cpd bindings new-nodes)
  (loop
    for identifier being the hash-keys of (rule-based-cpd-identifiers cpd)
    with p-cpd and trunc-p-cpd and cpd-copy
    with trunc-idents and trunc-vars and trunc-types and trunc-vvbm and trunc-cids and trunc-qvars
    with trunc-sva and trunc-lower-approx-var-value-block-map
    do
       (setq p-cpd (get-cpd-by-id identifier new-nodes))
       (when p-cpd
	 (setq trunc-p-cpd (make-trunc-cpd p-cpd))
         (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
               (format t "~%truncated p-cpd:~%~S" p-cpd))
         ;;(format t "~%marginalized p-cpd:~%~A" p-cpd)
         ;;(format t "~%marginalized p-cpd assignments:")
         ;;(maphash #'print-hash-entry (cpd-assignments p-cpd))
         ;;(format t "~%marginalized p-cpd counts:")
         ;;(maphash #'print-hash-entry (cpd-counts p-cpd))
	 (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
	   (format t "~%updating schema vvm.~%schema before update:~%~S~%trunc parent cpd:~%~S" cpd trunc-p-cpd))
	 (setq cpd-copy (subst-cpd cpd trunc-p-cpd bindings))
	 (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
	   (format t "~%schema after update:~%~S" cpd-copy))
	 (setq cpd (cpd-update-schema-domain cpd-copy trunc-p-cpd new-nodes))
	 (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
	   (format t "~%~S~%done." cpd)
	   (break))
	 ;;(sb-ext:gc :full t)
         ;;(format t "~%new-phi:~%~A" phi)
         ;;(format t "~%new-phi assignments:")
         ;;(maphash #'print-hash-entry (cpd-assignments phi))
         ))
  cpd)

#| Reinitialize attribute blocks and concept blocks.
   Returns: destructively modified CPD |#

;; cpd = conditional probability distribution
(defun reset-attribute-and-concept-blocks (cpd)
  (setf (rule-based-cpd-concept-blocks cpd) (make-hash-table))
  (loop
    with new-vvbms = (make-hash-table)
    for vvbms being the hash-values of (rule-based-cpd-var-value-block-map cpd)
      using (hash-key idx)
    do
       (setf (gethash idx new-vvbms) (mapcar #'(lambda (vvbm)
                                                 (list (first vvbm) (make-hash-table)))
                                             vvbms))
    finally
       (setf (rule-based-cpd-var-value-block-map cpd) new-vvbms))
  cpd)

(defun get-compatibilities (cpd rules)
  (loop
    with compatibilities = (make-hash-table)
    with r1
    for i from 0 to (- (array-dimension rules 0) 1)
    do
       (setq r1 (aref rules i))
       (loop
         with r2
         for j from 0 to (- (array-dimension rules 0) 1)
         when (not (= i j)) do
           (setq r2 (aref rules j))
           (when (compatible-rule-p r1 r2 cpd cpd)
             (when (null (gethash i compatibilities))
               (setf (gethash i compatibilities) (make-hash-table)))
             (setf (gethash j (gethash i compatibilities)) t)
             (when (null (gethash j compatibilities))
               (setf (gethash j compatibilities) (make-hash-table)))
             (setf (gethash i (gethash j compatibilities)) t)))
    finally
       (return compatibilities)))

#| Compute the the certain block for a given rough set.
   Returns hash table. Key: integer. Value: integer|#

;; attribute-block = block of a set of variable assignments
;; values = list of variable assignments that generate attribute-block
;; vvbm = var value block map
(defun convert-to-certain-block (attribute-block values vvbm)
  (loop
    with certain-block = attribute-block and i
    for (att-val block) in vvbm
    ;;for i from 0
    do
       (setq i (cdr att-val))
    when (not (member i values))
      do
	 (setq certain-block (block-difference certain-block block :output-hash-p t))
    finally
       (return certain-block)))

#| Supply the lower approximation for each attribute-value in CPD |#

;; cpd = conditional probability distribution
;; features = hash table of identifiers and their positions in the CPD that need updating
(defun cpd-add-lower-approximations (cpd &key features)
  (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd)) ;;nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
        (format t "~%~%updating lower approximations for cpd:~%~S" cpd))
  (when (null features)
    (setq features (rule-based-cpd-identifiers cpd)))
  (loop
    with vvbm and lower-approx
    for ident being the hash-keys of features
      using (hash-value idx)
    do
       (setq vvbm (gethash idx (rule-based-cpd-var-value-block-map cpd)))
       (setq lower-approx (gethash idx (rule-based-cpd-lower-approx-var-value-block-map cpd)))
    #|
       (when nil (equal "INTENTION2406" (rule-based-cpd-dependent-id cpd))
       (format t "~%~%identifier:~%~S~%vvbm:~%~S~%current lower approx:~%~S~%characteristic sets:~%~S~%characteristic sets values" ident vvbm lower-approx c-set a-x-sets))
    |#
       (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
	     (format t "~%~%identifier: ~A~%identifier index: ~d" ident idx))
      (loop
	with i and new-approx
        for vvb in vvbm
        for lower in lower-approx
        do
	   (setq i (cdar vvb))
           ;;(setf (cadr lower) (set-difference (second vvb) (second nvvb)))
           ;;(setf (cadr lower) (block-difference (second vvb) (second nvvb) :output-hash-p t))
	   (setq new-approx (convert-to-certain-block (second vvb) (list i) vvbm))
	   (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
             (format t "~%~%vvb:~%~S~%lower approx:~%~S~%i: ~d" vvb new-approx i))
	   (setf (cadr lower) new-approx)
        #|
           (when nil (equal "INTENTION2406" (rule-based-cpd-dependent-id cpd))
           (format t "~%ident: ~S~%Getting lower approximation for vvb:~%~S~%current lower approximation:~%~S" ident vvb lower))
           (when (equal "NEGATED" flag)
           (setq val (list 'not val)))
           (setq a-bigx-set (get-set-valued-block-from-attribute-value val cpd idx))
        |#
           (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id cpd)))
                 (format t "~%value block:~%~S~%updated lower approximation:~%~S" (cadr vvb) (cadr lower)))))
  cpd)

#| Get local characteristic sets for each variable in CPD |#

;; cpd = conditional probability distribution
(defun cpd-add-characteristic-sets (cpd)
  (when nil
    (format t "~%~%updating cpd characteristic sets"))
  (loop
    for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
      using (hash-value idx)
    do
       (setf (gethash idx (rule-based-cpd-characteristic-sets cpd))
             (make-array (array-dimension (rule-based-cpd-rules cpd) 0)))
       (setf (gethash idx (rule-based-cpd-characteristic-sets-values cpd))
             (make-array (array-dimension (rule-based-cpd-rules cpd) 0)))
       (loop
         for i from 0 to (- (array-dimension (rule-based-cpd-rules cpd) 0) 1)
         do
            (when nil
              (format t "~%~%ident: ~S~%i: ~d" ident i))
            (loop
              with c-set and a-x-set
              for vvb in (gethash idx (rule-based-cpd-var-value-block-map cpd))
              when (gethash i (cadr vvb)) ;;(member i (cadr vvb))
                do
                   (when nil
                     (format t "~%vvb:~%~S~%c-set before update:~%~S" vvb c-set))
                   (setq c-set (union c-set (cadr vvb)))
                   (setq a-x-set (union (nth (cdar vvb) (gethash idx (rule-based-cpd-set-valued-attributes cpd))) a-x-set))
                   (when nil
                     (format t "~%c-set after update:~%~S" c-set))
              finally
                 (setf (aref (gethash idx (rule-based-cpd-characteristic-sets cpd)) i)
                       c-set)
                 (setf (aref (gethash idx (rule-based-cpd-characteristic-sets-values cpd)) i)
                       a-x-set)
                 (when nil
                   (format t "~%identifier: ~S~%index: ~d~%new characteristic set:~%~S" ident i c-set)))))
  (cpd-add-lower-approximations cpd))

#| Change cpd rules, attribute blocks, and concept-blocks.
   Returns: CPD with updated variable-value blocks, updated concept blocks, and updated lower approximations |#

;; cpd = conditional probability to modify
;; new-rules = array of new rules to replace current rules
(defun update-cpd-rules (cpd new-rules &key (disambiguate-p nil) (check-uniqueness nil))
  (setf (rule-based-cpd-rules cpd) new-rules)
  (check-cpd cpd :check-uniqueness nil :check-rule-count nil)
  (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
        (format t "~%~%updating cpd rules for cpd:~%~S" cpd))
  (setq cpd (reset-attribute-and-concept-blocks cpd))
  (loop
    for rule being the elements of (rule-based-cpd-rules cpd)
    for i from 0
    do
       (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
             (format t "~%~%Rule: ~S~%index: ~d" rule i))
       (loop
         with vals and vvbm and #|lower-vvbm and lower-nvvbm and c-sets and|# card
         for attribute being the hash-keys of (rule-based-cpd-identifiers cpd)
           using (hash-value idx)
         do
            (setq card (aref (rule-based-cpd-cardinalities cpd) idx))
            (setq vvbm (gethash idx (rule-based-cpd-var-value-block-map cpd)))
            (setq vals (gethash attribute (rule-conditions rule)))
            (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
                  (format t "~%Attribute: ~S~%values: ~S~%vvbm:~%~S" attribute vals vvbm)
                  ;;(break)
                  )
            (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
                  (format t "~%~%attribute: ~S~%attribute cpd idx: ~d~%vvbm:~%~S~%rule condition vals: ~S" attribute idx vvbm vals))
            (cond ((null vals)
                   (loop
                     for vvb in vvbm
		     do
                        (setf (gethash i (second vvb)) i)))
                  ((listp vals)
                   (loop
		     with vvb
                     for val in vals
                     do
			(setq vvb nil)
			(loop
			  named finder
			  for vv in vvbm
			  when (= val (cdar vv))
			    do
			       (setq vvb vv)
			       (return-from finder nil))
                        (setf (gethash i (second vvb)) i))))
            (when nil (equal "TIME_PREV_506" (rule-based-cpd-dependent-id cpd))
                  (format t "~%Updated vvbms:~%~S" vvbm)))
       (when nil (and (equal "HAND565" (rule-based-cpd-dependent-id cpd)))
             (break))
       (when (not (gethash (rule-probability rule)
                           (rule-based-cpd-concept-blocks cpd)))
         (setf (gethash (rule-probability rule)
                        (rule-based-cpd-concept-blocks cpd))
               (make-hash-table)))
       (when (not (gethash (rule-count rule)
                           (gethash (rule-probability rule)
                                    (rule-based-cpd-concept-blocks cpd))))
         (setf (gethash (rule-count rule)
                        (gethash (rule-probability rule)
                                 (rule-based-cpd-concept-blocks cpd)))
               (make-hash-table)))
       (setf (gethash i
                      (gethash (rule-count rule)
                               (gethash (rule-probability rule)
                                        (rule-based-cpd-concept-blocks cpd))))
             i))
  (when (= (hash-table-count (rule-based-cpd-concept-blocks cpd)) 0)
    (format t "~%check concept blocks:~%~S" cpd)
    (error "check concept blocks:~%~S" cpd))
  (cpd-add-lower-approximations cpd)
  cpd)

#| Compute T(G)

;; cpd = conditional probability distribution
;; g = goal block to cover
;; concept-block = block of the concept
;; rule = rule in rule-based cpd
;; universe = universe of all cases
(defun get-tog (cpd g concept-block rule universe &key (certain-p nil) &aux (forbidden-attributes))
  (setq forbidden-attributes (make-hash-table :test #'equal))
  (labels ((three-way-hash-intersection (h1 h2 h3)
             (loop
               with result = (make-hash-table :size (ceiling (* 1.3 (hash-table-count h1))) :test #'equal)
               for key being the hash-keys of h1
               when (and (gethash key h2) (gethash key h3))
                 do
                    (setf (gethash key result) key)
               finally (return result)))
           (get-tog-for-vvbms (ident vvbms certain-p new-g att-blocks &key (negate-p))
             (loop
               with intersection and conflicts and condition and att-block and redundancies
               with all-conflicts and all-redundancies and all-partial-coverings
               for value-block in vvbms
               do
                  (setq condition nil)
                  (setq conflicts (make-hash-table))
                  (setq redundancies (make-hash-table))
                  (setq all-conflicts (make-hash-table))
                  (setq all-redundancies (make-hash-table))
                  (setq all-partial-coverings (make-hash-table))
                  (setq att-block (second value-block))
                  (setq intersection (hash-intersection att-block new-g :output-hash-p t))
                  (when (and (> (hash-table-count intersection) 0)
                             (not (= (hash-table-count att-block) (hash-table-count universe))))
                    (when nil t (and (equal "HOLDING1182" (rule-based-cpd-dependent-id cpd)))
                          (format t "~%~%value-block: ~S~%att-block: ~S~%rule:~%~S" value-block att-block rule))
                    (cond ((> (hash-table-count (rule-block rule)) 0) ;;(rule-block rule)
                           (cond (certain-p
                                  (setq all-conflicts (hash-intersection (rule-certain-block rule) (rule-avoid-list rule) :output-hash-p t))
                                  (setq all-redundancies (hash-intersection (rule-certain-block rule) (rule-redundancies rule) :output-hash-p t))
                                  (setq all-partial-coverings (make-hash-table))
                                  (setq conflicts (hash-intersection att-block all-conflicts :output-hash-p t))
                                  (setq redundancies (hash-intersection att-block all-redundancies :output-hash-p t))
                                  )
                                 (t
                                  (setq all-conflicts (rule-avoid-list rule))
                                  (setq all-redundancies (rule-redundancies rule))
                                  (setq all-partial-coverings (block-difference (rule-block rule) (rule-certain-block rule) :output-hash-p t))
                                  (setq conflicts (three-way-hash-intersection all-conflicts att-block (rule-block rule)))
                                  (setq redundancies (three-way-hash-intersection all-redundancies att-block (rule-block rule)))
                                  )))
                          (t
                           (setq all-conflicts (block-difference universe concept-block :output-hash-p t))
                           (setq all-redundancies (block-difference concept-block new-g :output-hash-p t))
                           (setq all-partial-coverings (make-hash-table))
                           (setq conflicts (hash-intersection att-block all-conflicts :output-hash-p t))
                           (setq redundancies (hash-intersection att-block all-redundancies :output-hash-p t))
                           (when nil (and (equal "HOLDING1182" (rule-based-cpd-dependent-id cpd)))
                             (format t "~%all conflicts: ~S~%conflicts: ~S"all-conflicts conflicts))
                           ))
                    (when nil t (and (equal "GOAL859" (rule-based-cpd-dependent-id cpd)))
                          (format t "~%g: ~S~%intersection: ~S~%conflicts: ~S~%universe: ~S" new-g intersection conflicts universe)))
                  (when (= (hash-table-count att-block) (hash-table-count universe))
                    (setq intersection (make-hash-table)))
                  (if (null negate-p)
                      (setq condition (cons ident (cdar value-block)))
                      (setq condition (cons ident (list 'not (cdar value-block)))))
                  (setq att-blocks (cons (list (list condition att-block) intersection conflicts redundancies new-g all-conflicts all-redundancies all-partial-coverings) att-blocks))
               finally
		  (when nil t
		    (format t "~%returning:~%~S" att-blocks))
                  (return att-blocks)))
           (pass-condition-p (ident rule-conditions)
             (let (val)
               (setq val (gethash ident rule-conditions))
               (if val
                   (values nil val)
                   (values t val)))))
    (when nil t (and (equal "HOLDING1182" (rule-based-cpd-dependent-id cpd)))
      (format t "~%~%identifiers:~%~S~%num idents: ~d~%certain-p: ~S" (rule-based-cpd-identifiers cpd) (hash-table-count (rule-based-cpd-identifiers cpd)) certain-p))
    (loop
      named togger
      with new-g = (if (and certain-p (> (hash-table-count (rule-block rule)) 0))
                       (hash-intersection g (rule-certain-block rule) :output-hash-p t)
                       g)
      with tog = (make-hash-table :test #'equal)
      for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
        using (hash-value idx)
      do
         (multiple-value-bind (pass attribute)
             (pass-condition-p ident (rule-conditions rule))
           (declare (ignore attribute))
	   (when nil t
	     (format t "~%pass: ~S" pass))
	   (when pass
             (setf (gethash ident tog)
                   (cond (certain-p
                          (get-tog-for-vvbms ident (gethash idx (rule-based-cpd-lower-approx-var-value-block-map cpd)) t new-g
                                             (get-tog-for-vvbms ident (gethash idx (rule-based-cpd-lower-approx-negated-vvbms cpd)) t new-g nil :negate-p t)))
                         ((not certain-p)
                          (get-tog-for-vvbms ident (gethash idx (rule-based-cpd-var-value-block-map cpd)) nil new-g
                                             (get-tog-for-vvbms ident (gethash idx (rule-based-cpd-negated-vvbms cpd)) nil new-g nil :negate-p t)))))))
       finally
         (return-from togger tog))))
|#

#| Compute T(G)
   Returns: Hash table. Key: cpd identifier. Value: List
|#

;; cpd = conditional probability distribution
;; g = goal block to cover
;; concept-block = block of the concept
;; rule = rule in rule-based cpd
;; universe = universe of all cases
(defun get-tog (cpd g concept-block rule universe &key (certain-p nil) &aux (forbidden-attributes))
  (setq forbidden-attributes (make-hash-table :test #'equal))
  (labels ((three-way-hash-intersection (h1 h2 h3)
             (loop
               with result = (make-hash-table :size (ceiling (* 1.3 (hash-table-count h1))) :test #'equal)
               for key being the hash-keys of h1
               when (and (gethash key h2) (gethash key h3))
                 do
                    (setf (gethash key result) key)
               finally (return result)))
           (get-tog-for-vvbms (ident values vvbms certain-p new-g att-blocks &key (negate-p))
             (loop
               with intersection and conflicts and condition and att-block and redundancies
               with all-conflicts and all-redundancies and all-partial-coverings
               for value-block in vvbms
               when (not (member (cdar value-block) values))
		 do
                  (setq condition nil)
		  (setq att-block (second value-block))
		  (setq intersection (hash-intersection att-block new-g :output-hash-p t))
		  (when (= (hash-table-count att-block) (hash-table-count universe))
                    (setq intersection (make-hash-table)))
                  (setq condition (cons ident (cdar value-block)))
                  (setq att-blocks (cons (list (list condition att-block) intersection) att-blocks))
               finally
		  (when nil t
		    (format t "~%returning:~%~S" att-blocks))
                  (return att-blocks)))
           (pass-condition-p (ident rule-conditions)
             (multiple-value-bind (vals present-p)
		 (gethash ident rule-conditions)
	       (values t vals)
	       #|
	       (if present-p
		   (values nil vals)
		   (values t vals))
	       |#
	       )))
    (when nil t (and (equal "HOLDING1182" (rule-based-cpd-dependent-id cpd)))
      (format t "~%~%identifiers:~%~S~%num idents: ~d~%certain-p: ~S" (rule-based-cpd-identifiers cpd) (hash-table-count (rule-based-cpd-identifiers cpd)) certain-p))
    (loop
      named togger
      with new-g = (if (and certain-p (> (hash-table-count (rule-block rule)) 0))
                       (hash-intersection g (rule-certain-block rule) :output-hash-p t)
                       g)
      with tog = (make-hash-table :test #'equal)
      for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
        using (hash-value idx)
      do
         (multiple-value-bind (pass values)
             (pass-condition-p ident (rule-conditions rule))
	   (when nil t
	     (format t "~%pass: ~S" pass))
	   (when pass
             (setf (gethash ident tog)
                   (cond (certain-p
                          (get-tog-for-vvbms ident values (gethash idx (rule-based-cpd-lower-approx-var-value-block-map cpd)) t new-g nil))
                         ((not certain-p)
                          (get-tog-for-vvbms ident values (gethash idx (rule-based-cpd-var-value-block-map cpd)) nil new-g nil))))))
       finally
         (return-from togger tog))))

#| Get the block of cases that are possible members of the condition from the ruleset |#

;; rule-set = ruleset in cpd
;; uncertain-attribute-block = cases where attribute was negated in the ruleset
;; condition = condition in rule
(defun get-uncertain-block (rule-set uncertain-attribute-block condition)
  (cond ((listp (cdr condition))
         (loop
           for rule being the elements of rule-set
           for i from 0
           when (null (gethash (car condition) (rule-conditions rule)))
             collect i into uncertain
           else when (and (member i uncertain-attribute-block)
                          (not (= (second (gethash (car condition) (rule-conditions rule)))
                                  (second (cdr condition)))))
                  collect i into uncertain
           finally
              (return uncertain)))
        (t
         (loop
           for rule being the elements of rule-set
           for i from 0
           when (null (gethash (car condition) (rule-conditions rule)))
             collect i into uncertain
           else when (member i uncertain-attribute-block)
                  collect i into uncertain
           finally
              (return uncertain)))))

#| Determine whether a candidate condition satisfies case constraints for a set of cases in goal |#

;; condition = candidate condition for rule
;; goal = intersection of condition with current rule
;; case-constraints = hash table of constraints that a rule must satisfy for each covered case
;; cpd = conditional probability distribution
(defun condition-satisfy-case-constraints-p (condition goal case-constraints cpd)
  (loop
    with att-constraints and constraints
    for g being the hash-keys of goal
    do
       (setq att-constraints (gethash g case-constraints))
       (when att-constraints
         (setq constraints (gethash (car condition) att-constraints))
         (when constraints
           (when (notany #'(lambda (constraint) (intersection (cdr condition) constraint)) constraints)
             (return-from condition-satisfy-case-constraints-p nil))))
    finally
       (return t)))

#| Check whether this condition leads to a dead end, providing no path to remove at least one conflict going forward. Returns bool.|#

;; cond-val = candidate condition value pair to add to rule
;; cond-conflicts = conflicts in the block of cond-val
;; tog = attribute blocks for the rest of the attributes in the CPD
(defun conflict-hardness (cond-val cond-conflicts tog certain-tog)
  (loop
    with hardness = 0
    for certain-ident being the hash-keys of certain-tog
      using (hash-value certain-att-blocks)
    for ident being the hash-keys of tog
      using (hash-value att-blocks)
    when (not (equal (car cond-val) ident))
      do
	 (loop
	   for (cert-condition-block cert-intersection) in certain-att-blocks
	   for (condition-block intersection) in att-blocks
	   when (and (> (hash-table-count cert-intersection) 0)
		     (not (listp (cdar condition-block))))
	     do
		(when (> (hash-table-count (hash-intersection cond-conflicts conflicts :output-hash-p t)) 0)
		  (setq hardness (+ hardness 1))))
    finally
       (return hardness)))

#| Get next condition candidtate for new rule.
   Returns multiple values. |#

;; certain-tog = certain T(G)
;; tog = T(G)
;; junk = conditions to avoid
;; compatibilities = hash table showing which rules are compatible with each other
;; cpd = conditional probability distributions
;; case-constraints = hash table of constraints that a rule must satisfy for each covered case
;; goal =
;; rule =
;; universe =
;; concept-block
(defun find-subset-with-max (certain-tog tog junk cpd case-constraints goal rule universe concept-block &key (reject-conditions))
  (labels ((binary-entropy (p)
	     (- (if (> p 0)
		    (* (- p) (log p 2))
		    0)
		(if (> (- 1 p) 0)
		    (* (- 1 p) (log (- 1 p) 2))
		    0))))
    (loop
      with copy-rule and padding = 0.00001
      with best-condition and best-block and best-lower-approx and best-conflicts and best-redundancies and best-intersection and best-cert-intersection = most-negative-fixnum and best-cert-redundancies = most-positive-fixnum and best-num-conflicts = most-positive-fixnum
      with max-certain-discounted-coverage = most-negative-fixnum and max-discounted-coverage = most-negative-fixnum and best-cert-conflicts = most-negative-fixnum
      with smallest-certain-card = most-positive-fixnum and smallest-card = most-positive-fixnum and best-hardness = most-positive-fixnum
      with best-pos-condition and best-pos-rule and best-pos-info-gain = most-negative-fixnum
      with best-zero-condition and best-zero-rule and best-zero-new-negs = most-positive-fixnum and best-zero-uncertain = most-negative-fixnum
      with best-zero-ub-ig = most-negative-fixnum and best-zero-ub-pos = most-negative-fixnum
      with best-info-gain = most-negative-fixnum and best-entropy = most-negative-fixnum
      with best-rule
      for certain-ident being the hash-keys of certain-tog
	using (hash-value certain-att-blocks)
      for ident being the hash-keys of tog
	using (hash-value att-blocks)
      do
	 (when nil t (and print-special*)
               (format t "~%"))
	  (loop
	   with focus and num-conflicts
           with condition and att-block and lower-approx
           with certain-discounted-coverage and discounted-coverage
           with goodness-weight and goodness and cert-goodness-weight and cert-goodness
           with penalty-weight and penalty and cert-penalty-weight and cert-penalty
           with redundancy-weight and redundancy and cert-redundancy-weight and cert-redundancy
           with partial-coverings and partial-coverings-weight
           with size-penalty and hardness
	   with cert-conflicts and cert-redundancies and cert-g and cert-all-conflicts and cert-all-redundancies ;;and cert-all-partial-coverings
	   with conflicts and redundancies and g and all-conflicts and all-redundancies ;;and all-partial-coverings
	   with info-gain and new-covered-pos and new-covered-negs and covered-pos and covered-negs and new-entropy and entropy and p and q
	   with upper-bound-info-gain and upper-bound-focus and upper-bound-covered-pos and upper-bound-entropy and upper-bound-p
	   for (cert-condition-block cert-intersection) in certain-att-blocks
               for (condition-block intersection) in att-blocks
	   do
	      (when nil t (and print-special*)
		(format t "~%~%rule:~%~S" rule)
		(format t "~%condition-block:~%~S~%intersection:~S~%condition value in rule?:~A" condition-block intersection
			(member (cdar condition-block)
				  (gethash (caar condition-block)
					   (rule-conditions rule)))))
	   when (and (> (hash-table-count intersection) 0)
		     (not (member (cdar condition-block)
				  (gethash (caar condition-block)
					   (rule-conditions rule)))))
             do
		(when nil t (and print-special*)
		      (format t "~%pass 1!"))
		(setq num-conflicts (hash-table-count (rule-avoid-list rule)))
		(setq copy-rule (copy-cpd-rule rule))
		(setq condition (car condition-block))
		(setf (gethash (car condition)
			       (rule-conditions copy-rule))
		      (cons (cdr condition)
			    (gethash (car condition)
				     (rule-conditions copy-rule))))
		(setf (rule-block copy-rule)
		      (get-rule-block cpd copy-rule))
		(setf (rule-certain-block copy-rule)
			(get-rule-block cpd copy-rule :certain-p t))
		(setf (rule-avoid-list copy-rule)
			(block-difference (rule-block copy-rule)
					  concept-block
					  :output-hash-p t))
		(when (and (> (hash-table-count (hash-intersection (rule-block copy-rule) goal :output-hash-p t)) 0)
			   (<= (hash-table-count (rule-avoid-list copy-rule)) num-conflicts))
		 (when nil t (and print-special*)
		       (format t "~%pass 2!"))
		 (setq upper-bound-focus (hash-intersection (rule-block copy-rule) goal :output-hash-p t))
		 (setq upper-bound-covered-pos (hash-table-count upper-bound-focus))
		  (setq focus (hash-intersection (rule-certain-block copy-rule) goal :output-hash-p t))
		  (setq new-covered-pos (hash-table-count focus))
		  (setq new-covered-negs (hash-table-count (rule-avoid-list copy-rule)))
		  (setq p (handler-case
			      (/ new-covered-pos
				 (+ new-covered-pos new-covered-negs))
			    (error (c)
			      0)))
		  (setq upper-bound-p (handler-case
			      (/ upper-bound-covered-pos
				 (+ upper-bound-covered-pos new-covered-negs))
			    (error (c)
			      0)))
		  (setq new-entropy (binary-entropy p))
		  (setq upper-bound-entropy (binary-entropy upper-bound-p))
		  (setq covered-pos (hash-table-count (hash-intersection (rule-certain-block rule) goal :output-hash-p t)))
		  (setq covered-negs (hash-table-count (rule-avoid-list rule)))
		  (setq q (handler-case
			      (/ covered-pos 
				 (+ covered-pos covered-negs))
			    (error (c)
			      0)))
		  (setq entropy (binary-entropy q))		  
		  (setq info-gain (- (* (+ covered-pos covered-negs) entropy)
				     (* (+ new-covered-pos new-covered-negs) new-entropy)))		  
		  (setq upper-bound-info-gain (- (* (+ covered-pos covered-negs) entropy)
						 (* (+ upper-bound-covered-pos new-covered-negs) upper-bound-entropy)))
		  (cond ((> p 0)
			 (when (> info-gain best-pos-info-gain)
			   (setq best-pos-info-gain info-gain)
			   (setq best-entropy new-entropy)
			   (setq best-pos-condition condition)
			   (setq best-pos-rule (copy-cpd-rule copy-rule))
			   (when nil t (and print-special*)
			     (format t "~%updated rule:~%~S" copy-rule))))
			((> upper-bound-p 0)
			 (let (uncertain-after)
			   (setq uncertain-after (hash-table-count
						  (hash-intersection (rule-block copy-rule) goal :output-hash-p t)))
			   (when (or (> upper-bound-info-gain best-zero-ub-ig)
				     (and (= upper-bound-info-gain best-zero-ub-ig)
					  (< new-covered-negs best-zero-new-negs))
				     (and (= upper-bound-info-gain best-zero-ub-ig)
					  (= new-covered-negs best-zero-new-negs)
					  (> uncertain-after best-zero-uncertain)))
			     (setq best-zero-ub-ig upper-bound-info-gain)
			     (setq best-zero-new-negs new-covered-negs)
			     (setq best-zero-uncertain uncertain-after)
			     (setq best-zero-condition condition)
			     (setq best-zero-rule (copy-cpd-rule copy-rule))
			     (when nil t (and print-special*)
			       (format t "~%updated rule:~%~S" copy-rule))))))))
      finally
	 (cond (best-pos-condition
		(setq best-condition best-pos-condition)
		(setq best-rule best-pos-rule))
	       (best-zero-condition
		(setq best-condition best-zero-condition)
		(setq best-rule best-zero-rule)))
	 (when (and print-special*)
               (format t "~%~%returning best condition:~%~S~%" best-condition))
	 (return (values best-condition best-rule)))))

#| Get next condition candidtate for new rule.
   Returns multiple values.

;; certain-tog = certain T(G)
;; tog = T(G)
;; junk = conditions to avoid
;; compatibilities = hash table showing which rules are compatible with each other
;; cpd = conditional probability distributions
;; case-constraints = hash table of constraints that a rule must satisfy for each covered case
;; goal =
;; rule =
;; universe =
;; concept-block
(defun find-subset-with-max (certain-tog tog junk cpd case-constraints goal rule universe concept-block &key (reject-conditions))
  (labels ((binary-entropy (p)
	     (- (if (> p 0)
		    (* (- p) (log p 2))
		    0)
		(if (> (- 1 p) 0)
		    (* (- 1 p) (log (- 1 p) 2))
		    0))))
    (loop
      with copy-rule and padding = 0.00001
      with best-condition and best-block and best-lower-approx and best-conflicts and best-redundancies and best-intersection and best-cert-intersection = most-negative-fixnum and best-cert-redundancies = most-positive-fixnum and best-num-conflicts = most-positive-fixnum
      with max-certain-discounted-coverage = most-negative-fixnum and max-discounted-coverage = most-negative-fixnum and best-cert-conflicts = most-negative-fixnum
      with smallest-certain-card = most-positive-fixnum and smallest-card = most-positive-fixnum and best-hardness = most-positive-fixnum
      with best-info-gain = most-negative-fixnum and best-entropy = most-negative-fixnum
      with best-rule
      for certain-ident being the hash-keys of certain-tog
	using (hash-value certain-att-blocks)
      for ident being the hash-keys of tog
	using (hash-value att-blocks)
      do
	 (when (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd)))
               (format t "~%"))
	 (loop
	   with focus
           with condition and att-block and lower-approx
           with certain-discounted-coverage and discounted-coverage
           with goodness-weight and goodness and cert-goodness-weight and cert-goodness
           with penalty-weight and penalty and cert-penalty-weight and cert-penalty
           with redundancy-weight and redundancy and cert-redundancy-weight and cert-redundancy
           with partial-coverings and partial-coverings-weight
           with size-penalty and hardness
	   with cert-conflicts and cert-redundancies and cert-g and cert-all-conflicts and cert-all-redundancies ;;and cert-all-partial-coverings
	   with conflicts and redundancies and g and all-conflicts and all-redundancies ;;and all-partial-coverings
	   with info-gain and new-covered-pos and new-covered-negs and covered-pos and covered-negs and new-entropy and entropy and p and q
	   for (cert-condition-block cert-intersection) in certain-att-blocks
           for (condition-block intersection) in att-blocks
	   when (and (> (hash-table-count intersection) 0)
		     (not (member (cdar condition-block)
				  (gethash (caar condition-block)
					   (rule-conditions rule))))
		     ;;(condition-satisfy-case-constraints-p (car condition-block) cert-intersection case-constraints cpd)
		     )
             do
		(setq copy-rule (copy-cpd-rule rule))
		(when nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd)))
		  (format t "~%~%rule before adding condition:~%~S" copy-rule))
		(setq condition (car condition-block))
		(setf (gethash (car condition)
			       (rule-conditions copy-rule))
		      (cons (cdr condition)
			    (gethash (car condition)
				     (rule-conditions copy-rule))))
		(setf (rule-block copy-rule)
		      (get-rule-block cpd copy-rule))
	        (when (> (hash-table-count (hash-intersection (rule-block copy-rule) goal :output-hash-p t)) 0)
		  (setf (rule-certain-block copy-rule)
			(get-rule-block cpd copy-rule :certain-p t))
		  (setf (rule-avoid-list copy-rule)
			(block-difference (rule-block copy-rule)
					  concept-block
					  :output-hash-p t))
		  (setq focus (hash-intersection (rule-certain-block copy-rule) goal :output-hash-p t))
		  (setq new-covered-pos (hash-table-count focus))
		  (setq new-covered-negs (hash-table-count (rule-avoid-list copy-rule)))
		  (setq p (handler-case
			      (/ new-covered-pos
				 (+ new-covered-pos new-covered-negs))
			    (error (c)
			      0)))
		  (setq new-entropy (binary-entropy p))
		  (setq covered-pos (hash-table-count (hash-intersection (rule-certain-block rule) goal :output-hash-p t)))
		  (setq covered-negs (hash-table-count (rule-avoid-list rule)))
		  (setq q (handler-case
			      (/ covered-pos 
				 (+ covered-pos covered-negs))
			    (error (c)
			      0)))
		  (setq entropy (binary-entropy q))		  
		  (setq info-gain (- (* (+ covered-pos covered-negs) entropy)
				     (* (+ new-covered-pos new-covered-negs) new-entropy)))	       
		  #|
		  (setq info-gain (- (log p 2)
				     (log q 2)))
		  |#
		  (when nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd)))
			(format t "~%updated rule:~%~S~%condition: ~S~%new-entropy: ~d~%entropy: ~d~%info-gain: ~d~%current best info-gain: ~d" copy-rule condition new-entropy entropy info-gain best-info-gain))
		  (when nil nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd))) 
			(format t "~%B_~S = ~S~%info-gain: ~d~% current best info-gain: ~d"
				condition
				(cdr cert-condition-block)
				info-gain
				best-info-gain))
		  (cond ((and (> info-gain best-info-gain) ;; condition maximally reduces the entropy (degree of positive cases mixed with negatives)
				  (> p 0) ;; condition certainly covers at least one positive case (Needed to prevent including a condition that covers "(not <goal>)" as that has p = 0)
				  )
			 (setq best-info-gain info-gain)
			 (setq best-entropy new-entropy)
			 (setq best-condition condition)
			 (setq best-rule (copy-cpd-rule copy-rule))))))
      finally
	 (when nil (and (equal "HAND" (rule-based-cpd-dependent-var cpd)))
               (format t "~%~%returning best condition:~%~S~%" best-condition)
               (when (null best-condition)
		 (break))
               )
	 (return (values best-condition best-rule)))))
|#

#| Compute the block of a rule |#

;; cpd = conditional probability distribution
;; rule = rule to compute block for
;; avoid = condition to ignore
(defun get-rule-block (cpd rule &key (avoid nil) (avoid-values nil) (certain-p nil))
  (when nil (and (= cycle* cycle*) (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
    (format t "~%getting ~A rule block for cpd:~%rule:~%~S~%avoid:~%~S" (if certain-p "certain" "") rule avoid))
  (cond ((and avoid (null avoid-values))
	 (error "Variable to :avoid needs a non-null :avoid-values argument"))
	((and avoid-values (null avoid))
	 (error "Missing :avoid argument for non-null :avoid-values argument")))
  (loop
    with rule-block = (make-hash-table) and vvbm and att-block and i = 0
    for attribute being the hash-keys of (rule-conditions rule)
      using (hash-value values)
    do
       (setq vvbm (gethash (gethash attribute (rule-based-cpd-identifiers cpd))
			   (rule-based-cpd-var-value-block-map cpd)))
       (loop
	 with attribute-block = (make-hash-table) and vvb
	 for value in values
	 when (and (not (equal attribute avoid))
		   (not (member value avoid-values)))
	   do
	      (setq vvb nil)
	      (loop
		named finder
		for vv in vvbm
		when (= value (cdar vv))
		  do
		     (setq vvb vv)
		     (return-from finder nil))
	      (setq attribute-block (hash-union attribute-block (second vvb) :output-hash-p t))
	 finally
	    (if certain-p
		(setq att-block (convert-to-certain-block attribute-block values vvbm))
		(setq att-block attribute-block)))
       (when nil (and (= cycle* cycle*) (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
             (format t "~%~%attribute:~%~S~%value:~%~S~%attribute block:~%~S~%partial rule block:~%~S" attribute value att-block rule-block))
       (if (= i 0)
           (setq rule-block att-block)
           (setq rule-block (hash-intersection rule-block att-block :output-hash-p t)))
       (when nil (and (= cycle* cycle*) (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
             (format t "~%new rule block:~%~S" rule-block))
       (when nil (and (= cycle* cycle*) (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
             (format t "~%remaining rule attribute: ~S~%block: ~S~%rule-block so far: ~S" attribute att-block rule-block))
       (setq i (+ i 1))
    finally
       (when nil (and (= cycle* cycle*) (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
             (format t "~%returning:~%~S" rule-block))
       (return rule-block)))

(defun print-case-constraints (case-constraints)
  (format t "~%~%case constraints")
  (loop
    for case being the hash-keys of case-constraints
      using (hash-value attributes)
    do
       (format t "~%~%~d:" case)
       (loop
         for att being the hash-keys of attributes
           using (hash-value constraints)
         do
            (format t "~%~%   ~S" att)
            (loop
              for constraint in constraints
              do
              (format t "~%      ~S" constraint)))))

#| Print T(G) |#

;; ToG = T(G)
(defun print-ToG (ToG)
  (loop
    for attribute being the hash-keys of ToG
    using (hash-value vvbm)
    do
       (format t "~%~%~S" attribute)
       (loop
         for vvb in vvbm
         do
            (format t "~%~%   ~S~%   Block: ~S~%   T(G): ~S~%   Conflicts: ~S~%   Redundancies: ~S" (caar vvb) (second (car vvb)) (second vvb) (third vvb) (fourth vvb)))))


#| Add a constraint to the case constraints |#

;; case = case to add constraint on
;; att = attribute to place constraint
;; sva = constraint on acceptable attribute values
;; case-constraints = hash table of constraints that a rule must satisfy for each covered case
(defun add-case-constraint (case att sva case-constraints)
  (setf (gethash att (gethash case case-constraints))
        (cons sva (gethash att (gethash case case-constraints))))
  case-constraints)

#| Initialize case constraints using initial rules |#

;; cpd = rule-based cpd
(defun init-case-constraints (cpd)
  (when nil nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
        (format t "~%~%initializing case constraints"))
  (loop
    with case-constraints = (make-hash-table)
    for rule being the elements of (rule-based-cpd-rules cpd)
    do
       (loop
         for case being the hash-keys of (rule-block rule)
         do
            (when nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                  (format t "~%~%case ~d:" case))
            (when (null (gethash case case-constraints))
              (setf (gethash case case-constraints) (make-hash-table :test #'equal)))
            (loop
              with idx and rule-sva
              for att being the hash-keys of (rule-conditions rule)
                using (hash-value val)
	      when (and (= (aref (rule-based-cpd-cardinalities cpd)
			    (gethash att (rule-based-cpd-identifiers cpd)))
			   2)
			(> (rule-count rule) 0))
	      do
                 (setq idx (gethash att (rule-based-cpd-identifiers cpd)))
                 (if (listp val)
                     (setq rule-sva (nth (second val) (gethash idx (rule-based-cpd-set-valued-negated-attributes cpd))))
                     (setq rule-sva (nth val (gethash idx (rule-based-cpd-set-valued-attributes cpd)))))
                 (when nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                       (format t "~%~%attribute in rule: ~S" att)
                       (format t "~%rule sva: ~S" rule-sva))
                 (loop
                   for sva in (gethash idx (rule-based-cpd-set-valued-attributes cpd))
                   for svna in (gethash idx (rule-based-cpd-set-valued-negated-attributes cpd))
                   do
		      (when nil
			(format t "~%sva:~%~S~%svna:~%~S" sva svna))
                      (cond ((intersection sva rule-sva)
                             (setq case-constraints (add-case-constraint case att sva case-constraints)))
                            ((intersection svna rule-sva)
                             (setq case-constraints (add-case-constraint case att svna case-constraints)))))))
    finally
       (return case-constraints)))

#| Constrain space of possible conditions per rule |#

;; cpd = conditional probability distribution
;; rule = rule in rule-based-cpd
;; case-constraints = hash table of constraints that a rule must satisfy for each covered case
(defun update-case-constraints (cpd rule case-constraints)
  (labels ((add-case-constraint (case att sva case-constraints)
             (setf (gethash att (gethash case case-constraints))
                   (cons sva (gethash att (gethash case case-constraints))))
             case-constraints)
           (remove-case-constraint (case att sva case-constraints)
	     (when nil t
	       (format t "~%case: ~d case constraints before remove:~%~S~%item to remove: ~S" case (gethash att (gethash case case-constraints)) sva))
             (setf (gethash att (gethash case case-constraints))
                   (remove sva (gethash att (gethash case case-constraints)) :test #'equal))
	     (when nil t
	       (format t "~%updated case constraints:~%~S" (gethash att (gethash case case-constraints)))
	       (break))
             case-constraints)
	   )
    (when nil t (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
          (format t "~%~%Updating case constraints based on rule:~%~S~%uncertain block:~%~S" rule (hash-difference (rule-block rule) (rule-certain-block rule) nil :output-hash-p t)))
    (loop
      with uncertain-block = (hash-difference (rule-block rule) (rule-certain-block rule) nil :output-hash-p t)
      for case being the hash-keys of (rule-block rule)
      ;;when (member case (rule-certain-block rule))
      ;;  do
      ;;     (remhash case case-constraints)
      ;;else when (not (member case (rule-certain-block rule)))
        do
           (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                 (format t "~%~%case ~d:" case))
           (when (null (gethash case case-constraints))
             (setf (gethash case case-constraints) (make-hash-table :test #'equal)))
           (loop
             with idx and rule-sva
             for att being the hash-keys of (rule-conditions rule)
               using (hash-value val)
             do
                (setq idx (gethash att (rule-based-cpd-identifiers cpd)))
                (if (listp val)
                    (setq rule-sva (nth (second val) (gethash idx (rule-based-cpd-set-valued-negated-attributes cpd))))
                    (setq rule-sva (nth val (gethash idx (rule-based-cpd-set-valued-attributes cpd)))))
                (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                      (format t "~%~%attribute in rule: ~S" att)
                      (format t "~%rule sva: ~S" rule-sva))
                (loop
                  for value-block in (gethash idx (rule-based-cpd-var-value-block-map cpd))
                  for sva in (gethash idx (rule-based-cpd-set-valued-attributes cpd))
                  for negated-value-block in (gethash idx (rule-based-cpd-negated-vvbms cpd))
                  for svna in (gethash idx (rule-based-cpd-set-valued-negated-attributes cpd))
                  do
                     (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                           (format t "~%   value-block: ~S~%   sva: ~S~%   svna: ~S" value-block sva svna))
		     ;; can I add a condition in the cond that would check to see if block of att is in the rule block but not the certain block
		     (cond ((and (hash-intersection uncertain-block (second value-block))
				 (not (intersection sva rule-sva))
                                 (gethash case (second value-block)))
                            (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                                  (format t "~%   adding ~S constraint to ~A for case ~d" sva att case))
			    (setq case-constraints (add-case-constraint case att sva case-constraints)))
                           ((and (gethash case (rule-certain-block rule))
                                 (intersection sva rule-sva)
                                 (member sva (gethash att (gethash case case-constraints))))
                            (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                                  (format t "~%   removing ~S constraint to ~A for case ~d" sva att case))
                            (setq case-constraints (remove-case-constraint case att sva case-constraints))))
                     (cond ((and (hash-intersection uncertain-block (second value-block))
				 (not (intersection svna rule-sva))
                                 (gethash case (second negated-value-block)))
                            (when nil t nil(and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                                  (format t "~%   adding ~S constraint to ~A for case ~d" svna att case))
                            (setq case-constraints (add-case-constraint case att svna case-constraints)))
                           ((and (gethash case (rule-certain-block rule))
                                 (intersection svna rule-sva)
                                 (member svna (gethash att (gethash case case-constraints))))
                            (when nil t nil (and (equal "Y548" (rule-based-cpd-dependent-id cpd)))
                                  (format t "~%   removing ~S constraint to ~A for case ~d" svna att case))
                            (setq case-constraints (remove-case-constraint case att svna case-constraints)))))
                (when (null (gethash att (gethash case case-constraints)))
                  (remhash att (gethash case case-constraints))))
           (when (= (hash-table-count (gethash case case-constraints)) 0)
             (remhash case case-constraints)))
    case-constraints))

#| Exploit local structure in CPD to induce minimal rule set |#

;; cpd = conditional probability distribution
(defun get-local-coverings (cpd)
  (labels ((rule-satisfy-case-constraints-p (rule case-constraints &key (avoid nil))
             (loop
               with att-constraints
               for g being the hash-keys of (rule-certain-block rule)
               do
                  (setq att-constraints (gethash g case-constraints))
                  (when att-constraints
                    (loop
                      with condition-pos
                      for att being the hash-keys of att-constraints
                        using (hash-value constraints)
                          do
			  (multiple-value-bind (vals present-p)
			      (gethash att (rule-conditions rule))
			    (when (or (not present-p)
				      (equal att avoid))
			      (return-from rule-satisfy-case-constraints-p nil))
                            (setq condition-pos (gethash att (rule-based-cpd-identifiers cpd)))
			    (loop
				  with rule-sva
				  for val in vals
				  do
				  (setq rule-sva (nth val
						      (gethash condition-pos
							       (rule-based-cpd-set-valued-attributes cpd))))
				  (when (not (member rule-sva constraints :test #'equal));;(notany #'(lambda (constraint) (intersection rule-sva constraint)) constraints)
				    (return-from rule-satisfy-case-constraints-p nil))))))
               finally
                  (return t))))
    (when nil t nil (and (equal "TIME_509" (rule-based-cpd-dependent-id cpd)))
	  (format t "~%~%getting local covering for:~%~S~%" cpd)
	  (print-cpd cpd)
	  ;;(break)
      )
    (loop
      with universe =
                    (loop with uni-hash = (make-hash-table :size (ceiling (* 1.3 (array-dimension (rule-based-cpd-rules cpd) 0))))
                          for i from 0 to (- (array-dimension (rule-based-cpd-rules cpd) 0) 1)
                          do
                             (setf (gethash i uni-hash) i)
                          finally (return uni-hash))
      with case-constraints = (make-hash-table) ;;(init-case-constraints cpd) ;;(make-hash-table)
      with minimal-rules and case = 0 and goal and junk
      for probability-concept being the hash-keys of (rule-based-cpd-concept-blocks cpd)
        using (hash-value counts-hash)
      do
         (when nil nil (and print-special* (equal "OBSERVATION_VAR1_209" (rule-based-cpd-dependent-id cpd)))
           (print-case-constraints case-constraints)
	   (break)
	   )
         (loop
           for count being the hash-keys of counts-hash
             using (hash-value concept-block)
           do
              (setq goal (copy-hash-table concept-block))
	      (setq junk nil)
              (loop
		with c
		with prev-new-rule
                with new-rule and tog and certain-tog and rule-set and rule-set-block = (make-hash-table) and certain-rule-blocks
                with uncertain-block
                while (> (hash-table-count goal) 0)
                do
                   (setq new-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                             :conditions (make-hash-table :test #'equal)
                                             :probability probability-concept
                                             :block universe ;;(make-hash-table)
                                             :certain-block universe ;;(make-hash-table)
                                             :avoid-list (block-difference universe concept-block :output-hash-p t)
                                             :redundancies (make-hash-table)
                                             :count count))
		   ;; DHM: Can I push the T(G) computation up a level, then at the end of this loop go through the T(G) iteratively removing the covered goal from the blocks?
                   (setq tog (get-tog cpd goal concept-block new-rule universe))
                   (setq certain-tog (get-tog cpd goal concept-block new-rule universe :certain-p t))
                   (when nil t print-special* (and (equal "TIME_509" (rule-based-cpd-dependent-id cpd)))
                     (format t "~%~%G:~%~S~%Avoid List:~%~S~%certain T(G) for new rule:" goal (block-difference universe concept-block :output-hash-p t))
                     ;;(print-tog certain-tog)
                     ;;(format t "~%~%T(G) for new rule:")
                     ;;(print-tog tog)
                     ;;(break)
                     )
                   (loop
                     with reject-conditions and continue = t
                     while (or (= (hash-table-count (rule-conditions new-rule)) 0)
                               (not (= (hash-table-count (block-difference (rule-block new-rule) concept-block :output-hash-p t)) 0))
			       continue
			       (not (hash-intersection-p (rule-certain-block new-rule) goal))
			       )
                     do
                        (multiple-value-bind (condition copy-rule)
                            (find-subset-with-max certain-tog tog junk cpd case-constraints goal new-rule universe concept-block :reject-conditions reject-conditions)
			  (setq c condition)
			  (cond (condition
				 (setq new-rule copy-rule)
				 (when nil t print-special* t nil (and (equal "TIME_509" (rule-based-cpd-dependent-id cpd)))
				       (format t "~%--------------~%condition:~S~%new rule:~%~S" condition new-rule))
				 (when nil t print-special* t nil (and (equal "TIME_509" (rule-based-cpd-dependent-id cpd)))
				   (format t "~%updated rule block:~%~S" (rule-block new-rule))
				   (format t "~%updated rule certain block:~%~S" (rule-certain-block new-rule))
				   (format t "~%updated rule avoid list:~%~S" (rule-avoid-list new-rule))
				   (format t "~%num conditions: ~d" (hash-table-count (rule-conditions new-rule)))))
				(t
				 (setq continue nil)
				 (when (or (not (= (hash-table-count (block-difference (rule-block new-rule) concept-block :output-hash-p t)) 0))
					   (not (hash-intersection-p (rule-certain-block new-rule) goal)))
				   (format t "~%cpd:~%~S" cpd)
				   (error "No more condition from ToG but concept block is not covered properly~%concept block:~%~S~%goal:~%~S~%rule:~%~S" concept-block goal new-rule))))))
		   (cond ((and (= (hash-table-count (block-difference (rule-block new-rule) concept-block :output-hash-p t)) 0) ;;(subsetp (rule-block new-rule) goal)
                               (> (hash-table-count (rule-block new-rule)) 0)
                               (= (hash-table-count (rule-avoid-list new-rule)) 0)
			       (> (hash-table-count (rule-certain-block new-rule)) 0))                          
                          ;; remove extraneous conditions, but make sure that pruned rule isn't compatible with existing rules!!
                          (when nil t nil (and print-special* (equal "ZERO_345" (rule-based-cpd-dependent-id cpd)))
                            ;;(break)
				(format t "~%~%testing for redundant conditions!~%rule:")
				(print-cpd-rule new-rule))
			  (loop
			    with idents = (rule-based-cpd-identifiers cpd) and var-vals = (rule-based-cpd-var-values cpd)
			    for attribute being the hash-keys of (rule-conditions new-rule)
			    when (= (length (gethash attribute (rule-conditions new-rule)))
				    (length (gethash (gethash attribute idents)
						     var-vals)))
			      do
				 (remhash attribute (rule-conditions new-rule)))
			  #|
			  (loop
                            with rule-partial-coverings = (block-difference (rule-block new-rule) (rule-certain-block new-rule) :output-hash-p t)
                            with new-certain-block and new-rule-block and new-partial-coverings and new-redundancies
                            for attribute being the hash-keys of (rule-conditions new-rule)
                              using (hash-value values)
				do
				(loop
				      with avoid-vals and pruned-values
				      for val in values
				      do	
				      (setq new-certain-block (get-rule-block cpd new-rule :avoid attribute :avoid-values (cons val avoid-vals) :certain-p t))
				      (setq new-rule-block (get-rule-block cpd new-rule :avoid attribute :avoid-values (cons val avoid-vals)))
				      (setq new-redundancies (hash-intersection new-rule-block rule-set-block :output-hash-p t))
				      (setq new-partial-coverings (block-difference new-rule-block new-certain-block :output-hash-p t))
				      (when nil (and (equal "STATE_VAR1_268" (rule-based-cpd-dependent-id cpd)))
					    (format t"~%testing condition: (~S ~S)~%proposed rule block: ~S~%proposed certain block: ~S~%current rule block: ~S~%current certain block: ~S" attribute values new-rule-block new-certain-block (rule-block new-rule) (rule-certain-block new-rule)))
				      (when (and (not (= (hash-table-count new-rule-block) 0)) ;; (not (null new-rule-block))
						 (not (= (hash-table-count new-certain-block) 0)) ;; (not (null new-certain-block))
						 (= (hash-table-count (block-difference new-rule-block concept-block :output-hash-p t)) 0) ;;(subsetp new-rule-block concept-block)
						 (>= (hash-table-count new-certain-block)
						     (hash-table-count (rule-block new-rule)))
						 (rule-satisfy-case-constraints-p new-rule case-constraints :avoid attribute))
					(when nil (and (equal "STATE_VAR1_268" (rule-based-cpd-dependent-id cpd)))
					      (format t "~%Success!"))
					(setq avoid-vals (cons val avoid-vals))
					(setf (rule-certain-block new-rule) new-certain-block)
					(setf (rule-block new-rule) new-rule-block)
					(when nil (and (equal "STATE_VAR1_268" (rule-based-cpd-dependent-id cpd)))
					      (format t "~%updated rule:~%~S" new-rule)))
				      finally
					 (setq pruned-values (set-difference values avoid-vals))
					 (if pruned-values
					     (setf (gethash attribute (rule-conditions new-rule)) pruned-values)
					     (remhash attribute (rule-conditions new-rule)))))
			  |#
			  ;;(when nil (not (= (hash-table-count (rule-block new-rule)) (hash-table-count (rule-certain-block new-rule))))
			  ;;(setq case-constraints (update-case-constraints cpd new-rule case-constraints)))
			  (when nil t print-special* t nil (and (equal "TIME_509" (rule-based-cpd-dependent-id cpd)))
                            ;;(format t "~%final rule:~%~S" new-rule)
			    (format t "~%final rule:~%~S"new-rule)
			    (print-cpd-rule new-rule)
			    )
                          (setq rule-set (reverse (cons new-rule (reverse rule-set))))
                          ;;(setq certain-rule-blocks (cons (rule-certain-block new-rule) certain-rule-blocks))
                          ;;(setq rule-blocks (cons (rule-block new-rule) rule-blocks))
                          ;; update attribute blocks and everything
                          (setq uncertain-block (block-difference (rule-block new-rule) (rule-certain-block new-rule) :output-hash-p t))
                          (when nil t (and (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
                            (format t "~%Candidate rule:~%~S~%decision block: ~S~%goal: ~S~%uncertain block: ~S" new-rule concept-block goal uncertain-block))
                          (when nil t (and (equal "BLOCK546" (rule-based-cpd-dependent-id cpd)))
                            (format t "~%check updated blocks")
                            ;;(break)
                            )
			  (when nil t (and (equal "STATUS569" (rule-based-cpd-dependent-id cpd)))
                            (loop
                              for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
                                using (hash-value idx)
                              do
                                 (format t "~%~%Ident: ~S" ident)
                                 (format t "~%B_positive:~%~S" (gethash idx (rule-based-cpd-lower-approx-var-value-block-map cpd)))
                                 (format t "~%B_negated:~%~S" (gethash idx (rule-based-cpd-lower-approx-negated-vvbms cpd)))))
                          (loop
                            for c being the hash-keys of (rule-certain-block new-rule)
                            do
                               (setf (gethash c rule-set-block) c))
                          (setq goal (copy-hash-table concept-block))
                          (when nil t (and (equal "BLOCK546" (rule-based-cpd-dependent-id cpd)))
                                (format t "~%rule-set:~%~S~%rule-set block:~%~S~%goal:~%~S" rule-set rule-set-block goal))
                          (setq goal (block-difference goal rule-set-block :output-hash-p t))
                          (setq junk nil)
                          (when nil t print-special*
                            (format t "~%updated goal:~%~S~%****************************~%" goal)
			    (setq print-special* nil)
			    ;;(break)
			    )
			  (when (and prev-new-rule
				     (same-rule-p new-rule prev-new-rule nil nil :check-blocks t))
			    (format t "~%previous rule:~%~S~%current rule:~%~S" prev-new-rule new-rule)
			    (setq print-special* t))
			  (setq prev-new-rule new-rule))
                         (t
			  (format t "~%goal: ~S~%cpd:" concept-block)
			  (print-cpd cpd)
                          (format t "~%failed rule:~%~S"new-rule)
			  (print-cpd-rule new-rule)
                          (break)
                          #|
                          (loop
                          for attribute being the hash-keys of (rule-conditions new-rule)
                          using (hash-value value)
                          do
                          (setq junk (cons (cons attribute value) junk)))
                          |#
                          ))
                   (when nil t (and (equal "BLOCK546" (rule-based-cpd-dependent-id cpd)))
                         (format t "~%~%candidate rule:~%~S~%rule-block:~%~S~%goal:~%~S" new-rule (rule-block new-rule) goal))
                finally
                   (when nil t (and (equal "BLOCK546" (rule-based-cpd-dependent-id cpd)))
                         (format t "~%~%candidate rule set:~%~S"rule-set))
                   (loop
                     for rule in rule-set
                     do
                        (setf (rule-block rule) (make-hash-table))
                        (setf (rule-certain-block rule) (make-hash-table))
                        (setf (gethash case (rule-block rule)) case)
                        (setf (gethash case (rule-certain-block rule)) case)
                        (setq minimal-rules (reverse (cons rule (reverse minimal-rules))))
                        (setq case (+ case 1)))))
      finally
         (when nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd)))
               (format t "~%~%final rules:~%%*********************************")
	       (format t "~%cpd:~%~S" (rule-based-cpd-identifiers cpd))
	       (format t "~%cardinalities: ~S" (rule-based-cpd-cardinalities cpd))
	       (mapcar #'print-cpd-rule minimal-rules)
	       ;;(format t "~%goal changes: ~d~%no goal changes: ~d~%num parameters: ~d~%num prior rules: ~d~%num rules: ~d" goal-changes no-goal-changes (reduce #'* (rule-based-cpd-cardinalities cpd)) (array-dimension (rule-based-cpd-rules cpd) 0) (length minimal-rules))
               ;;(break)
               )
         (setq cpd (update-cpd-rules cpd (make-array case :initial-contents minimal-rules) :check-uniqueness t))
	 (return cpd))))

#| Get variable domain while avoiding specific value |#

;; attribute = variable in cpd
;; cpd = rule-based conditional probability distrubution
;; avoid = value to avoid from variable domain
(defun get-cpd-var-domain (attribute cpd &key (avoid nil))
  (loop
    with pos = (gethash attribute (rule-based-cpd-identifiers cpd))
    for vvbm in (gethash pos (rule-based-cpd-var-value-block-map cpd))
    when (not (equal (cdar vvbm) avoid))
      collect (cdar vvbm) into domain
    finally (return domain)))

#| Check if two two conditions (att val) are compatible |#

;; attribute = attribute of the condition
;; cpd1 = conditional probability for rule1
;; cpd2 = conditional probability for rule2
;; value1 = set-valued attribute values in condition of first rule
;; value2 = set-valued attribute values in condition of second rule
;; present-p = whether attribute existed in second rule
;; exact = flag for forcing equality in negated conditions
(defun compatible-conditions-p (attribute cpd1 cpd2 values1 values2 present-p &key (exact nil))
  (cond ((and present-p (not exact) (not (intersection values1 values2)))
         (values nil 0))
        ((and present-p exact (not (subsetp values1 values2)
                                   (subsetp values2 values1)))
         (values nil 0))
        ((not present-p)
         (values t 1))
        (t
         (values t 1))))

#| Returns true if conditions in the intersection agree |#

;; rule1 = candidate rule to check
;; rule2 = rule to check compatiblity against
;; cpd1 = conditional probability for rule1
;; cpd2 = conditional probability for rule2
;; exact = flag for forcing equality in negated conditions
;; avoid = condition to ignore in rule1
(defun compatible-rule-p (rule1 rule2 cpd1 cpd2 &key (exact nil) (avoid nil) (check-count nil))
  (loop
    with num-compatible = 0
    for attribute being the hash-keys of (rule-conditions rule1)
      using (hash-value values1)
    when (not (equal attribute avoid))
      do
         (multiple-value-bind (values2 present-p)
             (gethash attribute (rule-conditions rule2))
           (multiple-value-bind (match-p count)
               (compatible-conditions-p attribute cpd1 cpd2 values1 values2 present-p :exact exact)
             (setq num-compatible (+ num-compatible count))
             (when (or (not match-p)
                       (and check-count (not (eq (rule-count rule1) (rule-count rule2)))))
               (return-from compatible-rule-p (values nil num-compatible)))))
    finally
       (return (values t num-compatible))))

#| Split a rule on variable. See (Koller and Friedman, 2009)
   Returns: List of rules

;; rule = rule to split
;; var = variable to split on
;; domain = var domain
;; cpd = conditional probability distribution
;; var-dif = new idents in episode not in schema
(defun split-rule-on-variable (rule var domain cpd var-dif &key (avoid-hash (make-hash-table :test #'equal)))
  (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
        (format t "~%~%splitting rule:~%~S~%on variable: ~s~%with domain: ~S~%cpd-idents:~%~S" rule var domain (rule-based-cpd-identifiers cpd)))
  (cond ((gethash var (rule-conditions rule))
         (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
               (format t "~%var in rule. returning"))
         (values (list rule) avoid-hash))
        (t
         ;; does var exist already in the schema, but not in the cpd? if so, then, the probabilities for var in the split rule across its domain are the same, and do not go to [1,0,...,0] distribution
         (loop
           with dependent-conditions
           with new-rule and new-rules
           for value in domain
           when (not (equal (gethash var avoid-hash) value)) do
             (setq new-rule (copy-cpd-rule rule))
             (setf (gethash var (rule-conditions new-rule)) (list value))
             (setq dependent-conditions (gethash (rule-based-cpd-dependent-id cpd) (rule-conditions new-rule)))
             (when nil (and print-special* (equal "STATE_VAR1_308" (rule-based-cpd-dependent-id cpd)))
                   (format t "~%~%new rule:~%~S~%dependent id: (~S . ~S)~%var present in cpd?:~%~S~%missing:~%~S" new-rule (rule-based-cpd-dependent-id cpd) dependent-condition (null (null (gethash var (rule-based-cpd-identifiers cpd)))) var-dif))
             (cond ((null (gethash var (rule-based-cpd-identifiers cpd)))
                    (when nil (and print-special* (equal "STATE_VAR1_308" (rule-based-cpd-dependent-id cpd)))
                          (format t "~%var value:~%~S." value))
                    (cond ((= value 0)
                           (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                                 (format t "~%set rule count to: ~d" (rule-count rule)))
                           (setf (rule-count new-rule) (rule-count rule)))
                          (t
                           (setf (rule-count new-rule) 0)
                           (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                                 (format t "~%set rule count to: 0"))
                           (cond ((and dependent-condition (= dependent-condition 0))
                                  (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                                        (format t "~%set rule probability to: 1"))
                                  (setf (rule-probability new-rule) 1))
                                 (dependent-condition
                                  (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                                        (format t "~%set rule probability to: 0"))
                                  (setf (rule-probability new-rule) 0))
                                 (t
                                  (setf (rule-probability new-rule) 0)
                                  )))))
                   (t
                    (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                          (format t "~%var value:~%~S." value))
                    (let (retrieved-rule new-conditions unseen-new-condition)
                      (setq retrieved-rule (car (get-compatible-rules cpd cpd new-rule :find-all nil)))
                      (loop
                        with new-prob = 0 and missing-val
                        for missing being the hash-keys of var-dif
                        do
                           (setq missing-val (gethash missing (rule-conditions new-rule)))
                           ;; missing-val can be a list in the case of negation. When statement doesn't handle this case
                           (when (and missing-val (> missing-val 0))
                             (setq unseen-new-condition t)))
                      (cond ((and dependent-condition (= dependent-condition 0) (not unseen-new-condition))
                             (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                                   (format t "~%set rule probability to: ~d" (rule-probability retrieved-rule)))
                             (setf (rule-probability new-rule) (rule-probability retrieved-rule)))
                            ((and dependent-condition (= dependent-condition 0) unseen-new-condition)
                             (setf (rule-probability new-rule) 1))
                            ((and dependent-condition (> dependent-condition 0) (not unseen-new-condition))
                             (setf (rule-probability new-rule) (rule-probability retrieved-rule)))
                            ((and dependent-condition (> dependent-condition 0) unseen-new-condition)
                             (setf (rule-probability new-rule) 0)))
                      (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                            (format t "~%set rule probability to: ~d" (rule-probability new-rule))))))
             (when nil (and print-special* (equal "STATE_VAR_307" (rule-based-cpd-dependent-id cpd)))
                   (format t "~%updated new rule:~%~S" new-rule))
             (setq new-rules (cons new-rule new-rules))
           finally
              (remhash var avoid-hash)
              (return (values new-rules avoid-hash))))))
|#

#| Make the rule of a rule compatible with context. See (Koller and Friedman, 2009)

;; rule = rule to split
;; conditions = context on which to split
;; cpd1 = conditional probability distribution
;; cpd2 = conditional probability distribution
;; var-dif = new idents in episode not in schema
(defun rule-split (rule conditions cpd1 cpd2 var-dif &key (enforce-compatible t) (avoid-hash (make-hash-table :test #'equal)))
  (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
	(format t "~%in rule-split on rule:~%~S~%conditions:~%~S~%avoid:~%~S" rule conditions avoid-hash))
  (cond ((and enforce-compatible (not (compatible-rule-p rule (make-rule :conditions conditions) cpd1 cpd2 :exact nil)))
         (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
               (format t "~%not compatible. Returning"))
         (list rule))
        ((not (hash-difference avoid-hash #|conditions|# (rule-conditions rule) nil))
         (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
               (format t "~%conditions are a subset of the current rule context. Returning"))
         (list rule))
        (t
         (let (y new-rules y-domain pos)
           (setq y (car (hash-difference avoid-hash #|conditions|# (rule-conditions rule) nil)))
           (cond (y
                  (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
                        (format t "~%splitting on ~S" y))
                  (setq pos (gethash y (rule-based-cpd-identifiers cpd1)))
                  ;;(setq y-domain (mapcar #'car (gethash pos (rule-based-cpd-var-value-block-map cpd1))))
                  (setq y-domain (gethash y avoid-hash))
                  (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
                        (format t "~%attribute domain:~%~S~%from cpd:~%~S" y-domain cpd1))
                  (multiple-value-setq (new-rules avoid-hash)
                    (split-rule-on-variable rule y y-domain cpd1 var-dif :avoid-hash avoid-hash))
                  (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
                        (format t "~%new rules:~%~S" new-rules)
                        ;;(break)
                        )
                  (mapcan #'(lambda (new-rule)
                              (rule-split new-rule conditions cpd1 cpd2 var-dif :enforce-compatible enforce-compatible :avoid-hash avoid-hash))
                          new-rules))
                 (t
                  (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id cpd1)))
                        (format t "~%No variable to split on. Returning"))
                  (list rule)))))))
|#

#| Apply operation to rule when both rules share the same context.
   Returns: Rule|#

;; r1 = one of the rules
;; r2 = another rule
;; op = operation to apply
;; case = case number for rule
;; rule-conditions = hash table of rule conditions for filtered rule
;; compute-count-p = flag for whether we will compute the count of the new rule or set it to default value, 1.
(defun rule-filter (r1 r2 op case rule-conditions compute-count-p)
  (let (norm-const new-prob count)
    (cond ((or (eq #'+ op) (eq '+ op))
           (setq new-prob (funcall op (* (rule-probability r1) (rule-count r1))
                                   (* (rule-probability r2) (rule-count r2))))
           (setq norm-const (+ (rule-count r1) (rule-count r2)))
           (setq count norm-const))
          ((or (eq #'* op) (eq '* op))
           (setq new-prob (funcall op (rule-probability r1) (rule-probability r2)))
	   (setq norm-const 0)
	   (cond ((rule-count r2)
		  ;;(setq count (* (if (rule-count r1) (rule-count r1) 1) (rule-count r2)))
		  
		  (cond (compute-count-p
			 (setq count (* (if (rule-count r1) (rule-count r1) 1) (rule-count r2))))
			(t
			 (setq count 1)))
		  )
		 ;; check here to see if the count is zero, set new prob to 0
                 (t
                  (setq norm-const 0)))))
    (cond (op
           (let (new-rule)
             (setq new-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                       :conditions rule-conditions ;;(copy-hash-table (rule-conditions r1))
                                       :probability (if (> norm-const 0)
                                                        (/ new-prob norm-const)
                                                        new-prob
                                                        ;;(error "norm const is 0.~%r1:~%~S~%r2:~%~S" r1 r2)
                                                        )
                                       :block (make-hash-table) ;;(list case)
                                       :count count))
             (setf (gethash case (rule-block new-rule)) case)
             new-rule))
          (t
           r1))))

#| replace rule in ruleset with its split correlates |#

;; existing-rules = ruleset
;; new-rules = rules to add to ruleset
;; remove-rule = base rule that was split on to remove from ruleset
(defun add-split-rules-to-existing (existing-rules new-rules remove-rule)
  (loop
    for new-rule in new-rules
    when (not (member new-rule existing-rules
                      :test #'(lambda (new existing)
                                (same-rule-p new existing :exact t))))
      do
         (setq existing-rules (cons new-rule existing-rules)))
  (remove remove-rule existing-rules :test #'equal))

#| Remove duplicate rules such that we keep the rule with max count and discard the rest |#

;; rules = list of rules
;; cpd = conditional probability distribution from factor
(defun remove-duplicate-rules-max-count (rules cpd)
  (let ((result nil))
    (dolist (rule rules)
      (let ((existing (car (member rule result
				   :test #'(lambda (r1 r2)
					     (same-rule-p r1 r2 cpd cpd :check-count nil))))))
        (cond (existing
               (if (> (rule-count rule) (rule-count existing))
                   (setf (rule-count existing) (rule-count rule))))
	      (t
               (push rule result)))))
    result))

#| Perform a filter operation over rules
   Returns: a list of rules |#

;; phi1 = episode conditional probability distribution
;; phi2 = schema conditional probability distribution
;; op = operation to apply on rules
;; new-rules = accumulator for the created filtered rules
;; rule-keys = hash table (test #'equal) for keeping track of visited rules
;; new-cpd = cpd to store the filtered rules
(defun operate-filter-rules (phi1 phi2 op new-rules rule-keys new-cpd &key (compute-count-p t))
  (labels ((find-matched-rules (r1s r2s matched-rules-hash no-match-list)
             (loop
               with matched = nil
               for r1 being the elements of r1s
               when (or (and (or (eq op '+) (eq op #'+)))
                        (and (or (eq op '*) (eq op #'*))))
                 do
                    (setq matched nil)
                    (loop
                      for r2 being the elements of r2s
                      when (compatible-rule-p r1 r2 phi1 phi2)
                        do
                           (setq matched t)
                           (when (null (gethash (rule-id r1) matched-rules-hash))
                             (setf (gethash (rule-id r1) matched-rules-hash) nil))
                           (setf (gethash (rule-id r1) matched-rules-hash)
                                 (cons r2 (gethash (rule-id r1) matched-rules-hash))))
                    (when (null matched)
                      (setq no-match-list (cons r1 no-match-list)))
               finally
                  (return (values matched-rules-hash no-match-list))))
           (n-make-intersected-rule-conditions (r1 r2 cpd2 conditions-hash)
             (loop
               with vals2 and rule-conditions-subsetp = t
               for attribute being the hash-keys of (rule-conditions r1)
                 using (hash-value vals1)
               do
                  (setq vals2 (gethash attribute (rule-conditions r2)))
                  (cond ((and (gethash attribute (rule-based-cpd-identifiers cpd2))
			      (null vals2))
                         ;; attribute was removed from local covering, so the set vals2 would contain all values
                         (setf (gethash attribute conditions-hash)
			       vals1))
                        ((and (null (gethash attribute (rule-based-cpd-identifiers cpd2)))
			      (null vals2))
                         ;; attribute is not in cpd2.
                         ;; That means we have an (attribute . [0]) and (attribute . [1 ...]) for all rules.
                         ;; (attribute . [0 ...]) will never happen during insertion
                         ;; We will never enter this branch during inference because attribute will be in cpd2 from schema
                         ;; So, it is safe to set the new rule condition to vals1
                         (setf (gethash attribute conditions-hash)
			       vals1)
                         (setq rule-conditions-subsetp nil))
                        ((and (gethash attribute (rule-based-cpd-identifiers cpd2))
			      vals2)
                         ;; attribute is in both cpds, so you take the intersection
			 (let ((int (intersection vals1 vals2)))
                           (setf (gethash attribute conditions-hash)
				 int)
			   (when (null int)
			     (setq rule-conditions-subsetp nil)))))
               finally
                  (return rule-conditions-subsetp)))
	   (rule-check-for-missing-identifiers (r1 cpd2)
	     (loop
	       for att being the hash-keys of (rule-conditions r1)
		 using (hash-value vals)
	       when (and (null (gethash att (rule-based-cpd-identifiers cpd2))))
		 collect att into missing-attributes
	       finally
		  (return missing-attributes)))
	   (make-split-rules (r1s r2 missing-r1-atts)
	     (cond ((null missing-r1-atts)
		    r1s)
		   (t
		    (loop
		      with r2-vals
		      with new-r1 and acc
		      for r1 in r1s
		      do
			 (setq r2-vals (gethash (car missing-r1-atts) (rule-conditions r2)))
			 (loop
			   for i from 0 to 1
			   do
			      (setq new-r1 (copy-cpd-rule r1))
			      (cond ((= i 0)
				     (setf (gethash (car missing-r1-atts)
						    (rule-conditions new-r1))
					   (list 0))
				     (when nil
				       (format t "~%candidate rule condition:")
				       (print-cpd-rule new-r1))
				     (when (compatible-rule-p new-r1 r2 nil nil)
				       (when nil
					 (format t "~%success"))
				       (setq acc (cons new-r1 acc))))
				    ((= i 1)
				     (let (removed-zero)
				       (setq removed-zero
					     (remove 0 r2-vals))
				       (when nil
					 (format t "~%testing new rule condition: (~S ~S)" (car missing-r1-atts) removed-zero))
				       (when removed-zero
					 (setf (gethash (car missing-r1-atts)
							(rule-conditions new-r1))
					       removed-zero)
					 (when (or (eq op '+)
						   (eq op #'+))
					   (setf (rule-probability new-r1) 0)
					   (setf (rule-count new-r1) 0))
					 (when (compatible-rule-p new-r1 r2 nil nil)
					   (when nil
					     (format t "~%success"))
					   (setq acc (cons new-r1 acc))))))))
		      finally
			 (return (make-split-rules acc r2 (rest missing-r1-atts)))))))
           (filter-no-match-rules (no-match-r1s cpd2 new-rules num-rules)
             (loop
	       with rule-key
               with no-match-r2 and no-match-rule and missing-no-match-attributes
               for no-match-r1 in no-match-r1s
               do
                  (setq no-match-r2 (copy-cpd-rule no-match-r1))
                  (setf (rule-probability no-match-r2) 0)
		  (loop
		    for att being the hash-keys of (rule-conditions no-match-r2)
		      using (hash-value vals)
		    when (and (null (gethash att (rule-based-cpd-identifiers cpd2)))
			      (set-difference vals (list 0)))
		      do
			 (setf (rule-count no-match-r2) 0))
                  (setq no-match-rule (rule-filter no-match-r1 no-match-r2 op num-rules (rule-conditions no-match-r2) compute-count-p))
		  (when nil
		    (format t "~%~%No match rule:")
		    (print-cpd-rule no-match-r1)
		    (format t "~%matching it against:")
		    (print-cpd-rule no-match-r2)
		    (format t "~%filtered no match rule:")
		    (print-cpd-rule no-match-rule))
		  (setq rule-key (polynomial-encoding no-match-rule))
		  (when (not (gethash rule-key rule-keys))
		    (setq new-rules (cons no-match-rule new-rules))
		    (setf (gethash rule-key rule-keys) no-match-rule)
                    (setq num-rules (+ num-rules 1))))
	     (values new-rules num-rules))
	   (mod-exp (base exp mod)
	     "Computes (base^exp) % mod efficiently using modular exponentiation."
	     (let ((result 1))
	       (loop
		 while (> exp 0)
		 do
		    ;; If exp is odd, multiply result by base
		    (when (oddp exp) 
		      (setq result (mod (* result base) mod)))
		    ;; Square the base
		    (setq base (mod (* base base) mod))
		    ;; Reduce exp by half
		    (setq exp (floor exp 2)))
	       result))
	   (polynomial-encoding (rule)
	     (let ((x 3)
		   (rule-key (make-array (hash-table-count (rule-based-cpd-identifiers new-cpd)))))
	       (loop
		 with values
		 for j from 0
		 for attribute being the hash-keys of (rule-based-cpd-identifiers new-cpd)
		   using (hash-value idx)
		 do
		    (setq values (gethash attribute (rule-conditions rule)))
		    (when (null values)
		      (setq values (gethash idx (rule-based-cpd-var-values new-cpd))))
		    (setf (aref rule-key j)
			  (reduce #'+
				  (mapcar #'(lambda (i)
					      (mod-exp x i (+ (expt 10 9) 7)))
					  values))))
	       (format nil "~{~a~}" (coerce rule-key 'list)))))
    (when nil (and (or (eq op '*)
		   (eq op #'*))
	       ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
	       )
      (format t "~%~%phi1:")
      (print-cpd phi1)
      (format t "~%phi2:")
      (print-cpd phi2))
    (let ((rules1 (rule-based-cpd-rules phi1))
	  (rules2 (rule-based-cpd-rules phi2))
	  (matched-r1s (make-hash-table :test #'equal))
          (matched-r2s (make-hash-table :test #'equal))
          (num-rules (length new-rules))
          no-match-r1s
          no-match-r2s)
      ;; check to see if r1 has a match in phi2
      (multiple-value-setq (matched-r1s no-match-r1s)
	(find-matched-rules rules1 rules2 matched-r1s no-match-r1s))
      ;; check to see if r2 has a match in phi1
      (multiple-value-setq (matched-r2s no-match-r2s)
	(find-matched-rules rules2 rules1 matched-r2s no-match-r2s))
      ;; process the matched rules
      (loop
	with matched-rules
	for r1 being the elements of rules1
	when (or (and (or (eq op '+) (eq op #'+)))
		 (and (or (eq op '*) (eq op #'*))))
          do
             (setq matched-rules (gethash (rule-id r1) matched-r1s))
	     (when nil (and (or (eq op '*)
			    (eq op #'*))
			;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
			)
	       (format t "~%"))
	     (loop
               with new-conditions and new-rule and same-rule-p and rule-key
               for r2 in matched-rules
               do
                  ;; check if the two rules are the same
		  (setq new-rule nil)
                  (setq new-conditions (make-hash-table :test #'equal))
                  (setq same-rule-p (notany #'null
					    (list 
					     (n-make-intersected-rule-conditions r1 r2 phi2 new-conditions)
					     (n-make-intersected-rule-conditions r2 r1 phi1 new-conditions))))
		  (when nil (and (or (eq op '*)
				 (eq op #'*))
			     ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
			     )
                      (format t "~%rule1:")
                      (print-cpd-rule r1)
                      (format t "~%~S~%rule2:" op)
                      (print-cpd-rule r2)
                      (format t "~%same-rule-p: ~S" same-rule-p))
		  (cond (same-rule-p
			 ;; for each rule condtion, there is a non-empty subset of the values of that conditions
			 (setq new-rule (rule-filter r1 r2 op num-rules new-conditions compute-count-p))
			 (when (rule-based-cpd-singleton-p phi2)
                           (setf (rule-count new-rule) nil)))
			((compatible-rule-p r1 r2 phi1 phi2)
			 ;; compatible, but not the same rule
			 (let (new-r2s
                               new-r1s
			       missing-r1-attributes
			       missing-r2-attributes)
			   (setq missing-r1-attributes (rule-check-for-missing-identifiers r2 phi1))
			   (setq missing-r2-attributes (rule-check-for-missing-identifiers r1 phi2))
			   (when nil (and (or (eq op '*)
					  (eq op #'*))
				      ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
				      )
			     (format t"~%missing r1 attributes:~%~S~%missing r2 attributes:~%~S" missing-r1-attributes missing-r2-attributes))
			   (cond ((and (null missing-r1-attributes)
				       (null missing-r2-attributes))
				  (setq new-rule (rule-filter r1 r2 op num-rules new-conditions compute-count-p))
				  (when (rule-based-cpd-singleton-p phi2)
				    (setf (rule-count new-rule) nil)))
				 ((and missing-r1-attributes
				       (null missing-r2-attributes))
				  (setq new-r1s (make-split-rules (list r1) r2 missing-r1-attributes))
				  (when nil (and (or (eq op '*)
						 (eq op #'*))
					     ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					     )
				    (format t "~%new r1s after splititng on missing variables:")
				    (map nil #'print-cpd-rule new-r1s))
				  (let (new-phi1 new-phi2)
				    (setq new-phi1 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi1)
						    :dependent-id (rule-based-cpd-dependent-id phi1)
						    :rules (make-array (length new-r1s) :initial-contents new-r1s)))
				    (setq new-phi2 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi2)
						    :dependent-id (rule-based-cpd-dependent-id phi2)
						    :rules (make-array 1 :initial-contents (list r2))))
				    (when nil (and (or (eq op '*)
						   (eq op #'*))
					       ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					       )
				      (format t "~%recursing..."))
				    (multiple-value-setq (new-rules rule-keys)
				      (operate-filter-rules new-phi1 new-phi2 op new-rules rule-keys new-cpd :compute-count-p compute-count-p))))
				 ((and (null missing-r1-attributes)
				       missing-r2-attributes)
				  (setq new-r2s (make-split-rules (list r2) r1 missing-r2-attributes))
				  (when nil (and (or (eq op '*)
						 (eq op #'*))
					     ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					     )
				    (format t "~%new r2s after splititng on missing variables:")
				    (map nil #'print-cpd-rule new-r2s))
				  (let (new-phi1 new-phi2)
				    (setq new-phi1 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi1)
						    :dependent-id (rule-based-cpd-dependent-id phi1)
						    :rules (make-array 1 :initial-contents (list r1))))
				    (setq new-phi2 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi2)
						    :dependent-id (rule-based-cpd-dependent-id phi2)
						    :rules (make-array (length new-r2s) :initial-contents new-r2s)))
				    (when nil (and (or (eq op '*)
						   (eq op #'*))
					       ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					       )
				      (format t "~%recursing..."))
				    (multiple-value-setq (new-rules rule-keys)
				      (operate-filter-rules new-phi1 new-phi2 op new-rules rule-keys new-cpd :compute-count-p compute-count-p))))
				 ((and missing-r1-attributes
				       missing-r2-attributes)
				  (setq new-r1s (make-split-rules (list r1) r2 missing-r1-attributes))
				  (setq new-r2s (make-split-rules (list r2) r1 missing-r2-attributes))
				  (when nil (and (or (eq op '*)
						 (eq op #'*))
					     ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					     )
				    (format t "~%new r1s after splititng on missing variables:")
				    (map nil #'print-cpd-rule new-r1s)
				    (format t "~%new r2s after splititng on missing variables:")
				    (map nil #'print-cpd-rule new-r2s))
				  (let (new-phi1 new-phi2)
				    (setq new-phi1 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi1)
						    :dependent-id (rule-based-cpd-dependent-id phi1)
						    :rules (make-array (length new-r1s) :initial-contents new-r1s)))
				    (setq new-phi2 (make-rule-based-cpd
						    :identifiers (rule-based-cpd-identifiers phi2)
						    :dependent-id (rule-based-cpd-dependent-id phi2)
						    :rules (make-array (length new-r2s) :initial-contents new-r2s)))
				    (when nil (and (or (eq op '*)
						   (eq op #'*))
					       ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
					       )
				      (format t "~%recursing..."))
				    (multiple-value-setq (new-rules rule-keys)
				      (operate-filter-rules new-phi1 new-phi2 op new-rules rule-keys new-cpd :compute-count-p compute-count-p))))))))
		  (when new-rule
		    (setf (gethash num-rules (rule-block new-rule)) num-rules)
		    (setq rule-key (polynomial-encoding new-rule))
		    (let ((old-rule (gethash rule-key rule-keys)))
		      
		    (cond ((null old-rule)
			   (setq new-rules (cons new-rule new-rules))
			   (setf (gethash rule-key rule-keys) new-rule)
			   (when nil (and (or (eq op '*)
					  (eq op #'*))
				      ;;(equal (rule-based-cpd-dependent-var phi1) "ONE_1")
				      )
			     (format t "~%new rule:")
			     (print-cpd-rule new-rule))
			   (setq num-rules (+ num-rules 1)))
			  (t
			   (when nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id phi2)))
			     (format t "~%discarded duplicate rule"))
			   (when nil (not (same-rule-p new-rule old-rule nil nil))
			     (format t "~%new-rule collided with different old rule.~%rule key: ~S~%new rule:" rule-key)
			     (print-cpd-rule new-rule)
			     (format t "~%old rule:")
			     (print-cpd-rule old-rule)
			     (break))))))))
      ;; process the no-match rules
      (multiple-value-setq (new-rules num-rules)
	(filter-no-match-rules no-match-r1s phi2 new-rules num-rules))
      (multiple-value-setq (new-rules num-rules)
	(filter-no-match-rules no-match-r2s phi1 new-rules num-rules))
      ;; update the counts of rules that are a subset of other rules with higher counts
      #| I'm not sure that this would actually happen now.
      (when (not (singleton-cpd? phi2))
	(loop
          for rule1 in new-rules
          for i from 0
          do
             (loop
               for rule2 in new-rules
               when (and (every #'(lambda (id)
                                    (gethash id (rule-conditions rule2)))
				(rule-conditions rule1))
			 (compatible-rule-p rule1 rule2 nil nil))
		 do
                    (setf (rule-count rule1) (max (rule-count rule1)
      (rule-count rule2))))))
      |#
      (values new-rules rule-keys))))  

#| Check cpd vvbms |#

;; cpd = conditional probability distribution
(defun check-cpd-vvbms (cpd)
  (when nil
    (loop
      for card being the elements of (rule-based-cpd-cardinalities cpd)
      for idx being the hash-keys of (rule-based-cpd-var-value-block-map cpd)
        using (hash-value vvbm)
      when (not (= card (length vvbm)))
        do
           (format t "~%Malformed cpd cardinalities/vvbms:~%~S" cpd)
           (error "Check vvbms"))))

#| Check if cpd is a valid cpd |#

;; cpd = conditional probability distribution
(defun check-cpd (cpd &key (check-uniqueness t) (check-prob-sum t) (check-counts t) (check-count-prob-agreement t) (check-rule-count t))
  (when t nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id cpd)))
    (loop
      with check-num-rules = (cond ((and check-rule-count (> (array-dimension (rule-based-cpd-rules cpd) 0) (reduce #'* (rule-based-cpd-cardinalities cpd))))
                                    (format t "~%number of rules exceeds cpd parameters.~%new phi:~%~S~%rules:" cpd)
                                    (map nil #'print-cpd-rule (rule-based-cpd-rules cpd))
                                    (error "check number of rules")))
      with row-len = (aref (rule-based-cpd-cardinalities cpd) 0)
      with index-rule = (make-rule :conditions (make-hash-table :test #'equal))
      with row-probs and row-counts = (make-list row-len :initial-element 0) and row-rules and row-assns and row-prob and compatible-rule and reference-count
      with assn = (make-array (hash-table-count (rule-based-cpd-identifiers cpd)) :initial-element 0)
      for i from 0 to (reduce #'* (rule-based-cpd-cardinalities cpd))
      do
         (setq assn (get-cpd-assignment-from-index cpd i))
         (loop
           for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
             using (hash-value pos)
           do
              (setf (gethash ident (rule-conditions index-rule)) (list (aref assn pos))))
         (setq compatible-rule (get-compatible-rules cpd cpd index-rule))
         (when (and compatible-rule (null reference-count))
           (setq reference-count (rule-count (car compatible-rule))))
         (cond ((null compatible-rule)
                (format t "~%no compatible rule for assignment:~%~S~%cpd:~%~S" index-rule cpd)
                (error "check compatible rules"))
               ((and check-uniqueness (> (length compatible-rule) 1))
                (format t "~%multiple rules fire for assignment:~%~S~%cpd:~%~S~%compatible rules:~%~S" index-rule cpd compatible-rule)
                (error "check compatible rules"))
               ((and (not check-uniqueness)
                     (= -1 (reduce #'(lambda(x y) (if (= x y) x -1))
                                   (mapcar #'(lambda (rule)
                                               (rule-probability rule))
                                           compatible-rule)))
                     )
                (format t "~%compatible rules have different probabilities.~%Assignment:~%~S~%cpd:~%~S~%compatible rules:~%~S" index-rule cpd compatible-rule)
                (error "check compatible rules"))
               #|
               ((not (= (rule-count (car compatible-rule)) reference-count))
               (format t "~%rule count is different from cpd count~%rule:~%~S~%cpd:~%~S" (car compatible-rule) cpd)
               (error "check rule count"))
               |#
               ((and check-count-prob-agreement (not (= (floor (* (rule-count (car compatible-rule)) (rule-probability (car compatible-rule))))
                                                        (ceiling (* (rule-count (car compatible-rule)) (rule-probability (car compatible-rule)))))))
                (format t "~%probability-count mismatch.~%rule:~%~S~%cpd:~%~S" (car compatible-rule) cpd)
                (error "check rule count and probability"))
               (t
                (setq compatible-rule (car compatible-rule))))
         (setq row-probs (cons (rule-probability compatible-rule) row-probs))
         (setq row-rules (cons compatible-rule row-rules))
         (setq row-assns (cons assn row-assns))
         ;;(setq row-counts (cons (rule-count compatible-rule) row-counts))
	 (multiple-value-bind (values present-p)
	     (gethash (rule-based-cpd-dependent-id cpd) (rule-conditions compatible-rule))
	   (cond (present-p
		  (loop
		    for value in values
		    do
                       (setf (nth value row-counts)
			     (rule-count compatible-rule))))
		 (t
                  (setq row-counts (make-list row-len :initial-element (rule-count compatible-rule))))))
         (when (= (length row-probs) row-len)
           (setq row-prob (reduce #'+ row-probs))
           (cond ((and check-prob-sum (not (= 1 (read-from-string (format nil "~$" row-prob)))))
                  (when (> row-prob 0)
                    (format t "~%Malformed cpd:~%~S~%row assignments:~%~S~%row rules:~%~S~%row probs:~%~S~%row probability is ~d, not 1" cpd row-assns row-rules row-probs row-prob)
                    (error "Check row sums")))
                 ((and check-counts (notevery #'= row-counts (rest row-counts)))
                  (format t "~%Malformed cpd:~%~S~%row assignments:~%~S~%row rules:~%~S~%row probs:~%~S~%row counts:~%~S~% row counts are not equal" cpd row-assns row-rules row-probs row-counts)
                  (error "Check row counts")))
           (setq row-probs nil)
           (setq row-rules nil)
           (setq row-assns nil)
           (setq row-counts (make-list row-len :initial-element 0))))))

#| Generate intermediate factor by multiplying two existing ones.
Roughly based on (Koller and Friedman, 2009) |#

;; phi1 = conditional probability density 1
;; phi2 = conditional probability density 2
;; op = operation to apply to factor (* or +)
(defun factor-filter (phi1 phi2 &optional (op '*))
  (cond ((and (numberp phi1) (rule-based-cpd-p phi2))
         (return-from factor-filter phi2))
        ((and (numberp phi2) (rule-based-cpd-p phi1))
         (return-from factor-filter  phi1))
        ((and (numberp phi1) (numberp phi2))
         (return-from factor-filter phi1))
        ((and (rule-based-cpd-p phi1) (null phi2))
         (return-from factor-filter phi1)))
  (let (var-union types idents concept-ids qvars values cardinalities steps var-value-block-map sva lower-vvbms new-phi new-rules)
    (multiple-value-setq (idents var-union types concept-ids qvars var-value-block-map sva lower-vvbms values)
      (ordered-union phi1 phi2))
    (when nil (and print-special* (equal "ADDEND_382" (rule-based-cpd-dependent-id phi1))) ;;nil (and #|(eq op '*)|# (eq op '+) (equal "GOAL732" (rule-based-cpd-dependent-id phi1)))
          (format t "~%~%phi1:~%~A~%phi2:~%~A~%unioned-ids: ~A~%var union: ~A~%unioned-concept-ids: ~A~%qualified vars: ~A~%var value block map: ~S" phi1 phi2 idents var-union concept-ids qvars var-value-block-map))
    (when nil (and (or (eq op '*)
		   (eq op #'*))
	       (equal (rule-based-cpd-dependent-var phi1) "ONE_1"))
      (format t "~%~%phi1:")
      (print-cpd phi1)
      (format t "~%phi2:")
      (print-cpd phi2))
    (setq cardinalities (get-var-cardinalities var-value-block-map))
    (setq steps (generate-cpd-step-sizes cardinalities))
    (setq new-phi (make-rule-based-cpd :dependent-id (rule-based-cpd-dependent-id phi1)
                                       :identifiers idents
                                       :dependent-var (rule-based-cpd-dependent-var phi1)
                                       :vars var-union
                                       :types types
                                       :concept-ids concept-ids
                                       :qualified-vars qvars
                                       :var-value-block-map var-value-block-map
                                       :set-valued-attributes sva
                                       :lower-approx-var-value-block-map lower-vvbms
                                       :characteristic-sets (make-hash-table)
                                       :characteristic-sets-values (make-hash-table)
                                       :var-values values
                                       :cardinalities cardinalities
                                       :step-sizes steps
                                       :count (if (or (eq #'+ op) (eq '+ op)) (+ (rule-based-cpd-count phi1) (rule-based-cpd-count phi2)))
				       :prior (rule-based-cpd-prior phi1)
                                       :singleton-p (rule-based-cpd-singleton-p phi1)
                                       :lvl (rule-based-cpd-lvl phi1)))
    (setq new-rules (reverse (operate-filter-rules phi2 phi1 op nil (make-hash-table :test #'equal) new-phi :compute-count-p (if (or (eq op '+) (eq op #'+)) t))))
    (when nil (and print-special* (equal "DEATH_254" (rule-based-cpd-dependent-id phi1)))
      (format t "~%~%filtered rules before compression: ~d" new-rules)
      ;;(mapcar #'print-cpd-rule new-rules)
      ;;(break)
      )
    (cond ((eq op '*)
           (setq new-phi (update-cpd-rules new-phi
                                           (make-array (length new-rules)
                                                       :initial-contents new-rules))))
          (t
	   (setq new-phi (get-local-coverings
                              (update-cpd-rules new-phi
						(make-array (length new-rules)
                                                            :initial-contents new-rules))))))
    
    (setq new-phi (get-local-coverings
                              (update-cpd-rules new-phi
						(make-array (length new-rules)
                                                            :initial-contents new-rules))))
    
    #|
    (cond ((eq op '*)
           (setf (rule-based-cpd-rules new-phi)
                 (make-array (length new-rules) :initial-contents new-rules))
	   (when nil (and (or (eq op '*)
			      (eq op #'*))
			  (equal (rule-based-cpd-dependent-var phi1) "ONE_1"))
		 (format t "~%unnormalized result:")
		 (print-cpd new-phi))
           (setq new-phi (normalize-rule-probabilities new-phi (rule-based-cpd-dependent-id new-phi)))
           ;;(check-cpd new-phi :check-uniqueness nil :check-prob-sum t :check-counts nil :check-count-prob-agreement nil)
           )
          (t
           ;; update-cpd-rules done in get-local-coverings
           (when nil (and nil print-special* (equal "STATE_VAR2_290" (rule-based-cpd-dependent-id new-phi)))
                 (check-cpd new-phi :check-uniqueness nil :check-prob-sum (if (rule-based-cpd-singleton-p new-phi) nil t) :check-count-prob-agreement (if (rule-based-cpd-singleton-p new-phi) nil t) :check-counts (if (rule-based-cpd-singleton-p new-phi) nil t)))
           ))
    |#
    (when nil (and (or (eq op '*)
		   (eq op #'*))
	       (equal (rule-based-cpd-dependent-var phi1) "ONE_1"))
      (format t "~%~%num final rules: ~d~%final rules for:~%~S" (array-dimension (rule-based-cpd-rules new-phi) 0) (rule-based-cpd-identifiers new-phi))
      (map nil #'print-cpd-rule (rule-based-cpd-rules new-phi))
      ;;(format t "~%final rules:~%~S" new-phi)
      ;;(break)
      )
    new-phi))

#| Merge two matching factors together |#

;; phi1 = conditional probability density from pattern
;; phi2 = conditional probability density from base
;; bindings = variable bindings from p to q
;; q-first-bindings = variable bindings from q to p
;; new-nodes = list of corespondences from p to q so far
;; phi2-count = schema episode count
(defun factor-merge (phi1 phi2 bindings q-first-bindings new-nodes phi2-count)
  (labels ((refresh-cpds (ph1 ph2)
             (let (new-phi1 new-phi2)
               (setq new-phi2 (cpd-update-existing-vvms ph2 bindings new-nodes))
               (when nil (and print-special* (equal "SIX_483" (rule-based-cpd-dependent-id new-phi2)))
                     (format t "~%intermediate schema:~%~S" new-phi2)
                     ;;(break)
                     )
               ;;(check-cpd ph2 :check-uniqueness nil)
               (setq new-phi2 (cpd-update-schema-domain new-phi2 ph1 new-nodes :q-first-bindings q-first-bindings))
               (check-cpd new-phi2 :check-uniqueness nil :check-rule-count nil)
               (when nil (and print-special* (equal "STATE_VAR2_309" (rule-based-cpd-dependent-id new-phi2)))
                 (format t "~%intermediate schema2:~%~S~%rules:" new-phi2)
                 (loop
                   for rule being the elements of (rule-based-cpd-rules new-phi2)
                   do
                      (print-cpd-rule rule))
                 ;;(break)
                 )
               (setq new-phi1 (subst-cpd ph1 new-phi2 bindings))
               (setq new-phi1 (cpd-transform-episode-domain new-phi1 new-phi2))
               (values new-phi1 new-phi2))))
    (cond ((null phi2)
           (let ((phi1-copy (copy-rule-based-cpd phi1)))
             (loop
               with dep-id = (rule-based-cpd-dependent-id phi1-copy)
               with copy-rule and new-rules
               for rule being the elements of (rule-based-cpd-rules phi1-copy)
               for i from 1
               do
                  (setq copy-rule (copy-cpd-rule rule))
                  (loop
                    named changer
                    for att being the hash-keys of (rule-conditions copy-rule)
                      using (hash-value vals)
                    do
                       (cond ((not (equal att dep-id))
                              (when (member 0 vals)
                                (setq new-rules (cons copy-rule new-rules))
                                (return-from changer nil))))
                    finally
                       (if (member 0 (gethash dep-id (rule-conditions copy-rule)))
                           (setf (rule-probability copy-rule) 1)
                           (setf (rule-probability copy-rule) 0))
                       (setf (rule-count copy-rule) 0)
                       (setq new-rules (cons copy-rule new-rules)))
               finally
                  (setf (rule-based-cpd-rules phi1-copy) (make-array i :initial-contents (reverse new-rules))))
             (multiple-value-bind (new-phi1 new-phi2)
                 (refresh-cpds phi1 phi1-copy)
               (loop
                 with rule-checker = (make-rule :conditions (make-hash-table :test #'equal)) and var and val
                 for att being the hash-keys of (rule-based-cpd-identifiers phi1)
                   using (hash-value idx)
                 when (not (equal att (rule-based-cpd-dependent-id phi1)))
                   do
                      (setq var (caar (nth 1 (gethash idx (rule-based-cpd-var-value-block-map phi1)))))
                      (when nil (and (equal (rule-based-cpd-dependent-id phi1) "TWO_HUNDRED_FOURTEEN_1_271"))
                            (format t "~%~%episode parent: ~S assignment: ~S"att var))
                      (setq idx (gethash att (rule-based-cpd-identifiers new-phi2)))
                      (setq val (cdaar (member var (gethash idx (rule-based-cpd-var-value-block-map new-phi2)) :test #'(lambda (v1 v2)
                                                                                                                         (equal v1 (caar v2))))))
                      (when nil (and (equal (rule-based-cpd-dependent-id phi1) "TWO_HUNDRED_FOURTEEN_1_271"))
                            (format t "~%schema parent: ~S~%schema parent idx: ~d~%schema vvbm:~%~S~%selected vvb:~%~S~%schema assignment: ~S"
                                    att idx
                                    (gethash idx (rule-based-cpd-var-value-block-map new-phi2))
                                    (member var (gethash idx (rule-based-cpd-var-value-block-map new-phi2)) :test #'(lambda (v1 v2)
                                                                                                                      (equal v1 (caar v2))))
                                    val)
                            (break))
                      (setf (gethash att (rule-conditions rule-checker)) (list val))
                 finally
                    (when nil (and (equal (rule-based-cpd-dependent-id phi1) "TWO_HUNDRED_FOURTEEN_1_271"))
                          (format t "~%checker rule")
                          (print-cpd-rule rule-checker))
                    (loop
                      for rule being the elements of (rule-based-cpd-rules new-phi2)
                      when (not (compatible-rule-p rule rule-checker new-phi2 new-phi2))
                        do
                           (setf (rule-count rule) phi2-count)))
               (when nil (and (equal (rule-based-cpd-dependent-id phi1) "TWO_HUNDRED_FOURTEEN_1_271"))
                     (format t "~%~%original episode:~%~S~%transformed episode:~%~S~%phi1-copy:~%~S~%generated schema:~%~S"phi1 new-phi1 phi1-copy new-phi2)
                     (break))
               (check-cpd new-phi1 :check-uniqueness nil :check-counts nil)
               (factor-filter new-phi2 new-phi1 '+))))
          (t
           (when (and (equal "EPOSITION_231" (rule-based-cpd-dependent-id phi2)))
             (format t "~%~%episode before update:~%~S~%schema before update:~%~S~%bindings:~%~S~%schema rules:~%" phi1 phi2 bindings)
	     (map nil #'print-cpd-rule (rule-based-cpd-rules phi2))
	     
             ;;(format t "~%updating episode with schema")
             )
	   (check-cpd phi1 :check-uniqueness nil :check-rule-count nil :check-counts nil)
           (setq phi2 (cpd-update-existing-vvms phi2 bindings new-nodes))
           (when (and (equal "EPOSITION_231" (rule-based-cpd-dependent-id phi2)))
                 (format t "~%intermediate schema:~%~S" phi2)
                 ;;(break)
                 )
           (check-cpd phi2 :check-uniqueness nil)
           (setq phi2 (cpd-update-schema-domain phi2 phi1 new-nodes :q-first-bindings q-first-bindings))
	   (check-cpd phi2 :check-uniqueness nil :check-rule-count nil)
           (when (and (equal "EPOSITION_231" (rule-based-cpd-dependent-id phi2)))
             (format t "~%intermediate schema2:~%~S~%rules:" phi2)
	     (map nil #'print-cpd-rule (rule-based-cpd-rules phi2))
             ;;(break)
             )
           (setq phi1 (subst-cpd phi1 phi2 bindings))
           (when (and (equal "EPOSITION_231" (rule-based-cpd-dependent-id phi2)))
                 (format t "~%intermediate episode:~%~S" phi1)
                 ;;(break)
                 )
           (setq phi1 (cpd-transform-episode-domain phi1 phi2))
           (when (and (equal "EPOSITION_231" (rule-based-cpd-dependent-id phi2)))
             (format t "~%episode after update:~%~S~%schema after update:~%~S~%schema rules:~%" phi1 phi2)
	     (map nil #'print-cpd-rule (rule-based-cpd-rules phi2))
	     (format t "~%~%episode rules:~%")
	     (map nil #'print-cpd-rule (rule-based-cpd-rules phi1))
             ;;(break)
             )
           (check-cpd phi1 :check-uniqueness nil :check-counts nil)
	   (setq phi1 (disambiguate-rules phi1 phi2))
	   (setq phi2 (disambiguate-rules phi2 phi1))
           (factor-filter phi2 phi1 '+)))))

#| Perform a marginalize operation over rules |#

;; phi = schema conditional probability distribution
;; vars = list variables to keep
;; op = operation to apply on rules
;; new-dep-id = dependent variable after marginalization step is complete
(defun operate-marginalize-rules-keep (phi vars op new-dep-id)
  (when nil (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
    (format t "~%marginalizing phi:~%~S" phi)
    (print-cpd phi)
    (format t "~%vars to keep:~%~S" vars))
  (loop
    with rules = (rule-based-cpd-rules phi)
    with new-rules
    with marginalized-rule
    with rule-bag
    with global-ignore-idxs
    with intersection1
    with num-rules = 0
    for r1 being the elements of rules
    for i from 0
    do
       (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
	     (format t "~%~%rule at index i = ~d" i)
	     (print-cpd-rule r1)
	     ;;(format t "~%global ignore indeces:~%~S" global-ignore-idxs)
	     )
       (setq marginalized-rule nil)
       (setq intersection1 nil)
       (loop
	 named inter
	 with vals
	 for var in vars
	 do
	    (setq vals (gethash var (rule-conditions r1)))
	 when vals
	   do
	      (setq intersection1 (cons (cons var vals) intersection1)))
       (when (not (member i global-ignore-idxs))
	 (setq rule-bag (list r1))
	 (setq marginalized-rule (make-rule :id (gensym "RULE-")
					    :conditions (make-hash-table :test #'equal)
					    :probability (rule-probability r1)
					    :block (make-hash-table)
					    :count (rule-count r1)))
	 (loop
	   for inter in intersection1
	   do
	      (setf (gethash (car inter) (rule-conditions marginalized-rule))
		    (cdr inter)))
	 (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
	   (format t "~%initial marginalized rule:~%~S" marginalized-rule))
	 (setf (gethash num-rules (rule-block marginalized-rule)) num-rules)
	 ;;(setq num-rules (+ num-rules 1))
	 (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
	   (format t "~%rule has intersection with keep vars"))
	 (loop
	   with intersection2
	   with local-ignore = global-ignore-idxs
	   with num-conditions
	   for r2 being the elements of rules
	   for j from 0
	   when (not (= j i)) do
	     (when nil (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
	       (format t "~%  checking if r2 is compatible with marginalized rule.~%  r2:")
	       (print-cpd-rule r2 :indent "        ")
	       (format t "~%  local ignore:~%  ~S" local-ignore))
	     (setq intersection2 nil)
	     (loop
	       named inter
	       with vals
	       for var in vars
	       do
		  (setq vals (gethash var (rule-conditions r2)))
	       when vals
		 do
		    (setq intersection2 (cons (cons var vals) intersection2)))
	     (when (compatible-rule-p r2 marginalized-rule phi phi)
	       (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-var phi))
			  (= 1 (rule-probability r2)))
		 (format t "~%  r2 is compatible with marginalized rule.~%  marginalized-rule:~%  ~S~%  r1:~%  ~S~%  r2:~%  ~S" marginalized-rule r1 r2))
	       (setq rule-bag (cons r2 rule-bag))
	       (setf (rule-probability marginalized-rule)
		     (funcall op
			      (rule-probability marginalized-rule)
			      (rule-probability r2)))
	       (when (not (rule-based-cpd-singleton-p phi))
		 (setf (rule-count marginalized-rule)
		       (funcall op 1)))
	       (setq num-conditions (hash-table-count (rule-conditions marginalized-rule)))
	       (loop
		 with vals
		 for inter in intersection2
		 do
		    (setq vals (gethash (car inter) (rule-conditions marginalized-rule)))
		    (setf (gethash (car inter) (rule-conditions marginalized-rule))
			  (if vals
			      (intersection vals (cdr inter))
			      (cdr inter))))
	       (if (> (hash-table-count (rule-conditions marginalized-rule)) num-conditions)
		   (setq local-ignore (cons j global-ignore-idxs))
		   (setq local-ignore (cons j local-ignore)))
	       (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
		 (format t "~%  updated marginalized rule:")
		 (print-cpd-rule marginalized-rule :indent "        ")))
	   finally
	      (setq new-rules (cons marginalized-rule new-rules))
	      (setq num-rules (+ num-rules 1))
	      (setq global-ignore-idxs local-ignore)
	      (when nil (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
		(format t "~%updated new rules:")
		(map nil #'print-cpd-rule new-rules)
		;;(format t "~%updated global ignore rule indexes:~%~S" global-ignore-idxs)
		;;(break)
		)))
    finally
       (when (null new-rules)
	 (error "No marginalized rules left."))
       (when nil (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
	 (format t "~%returning:")
	 (map nil #'print-cpd-rule new-rules))
       (return (make-array num-rules :initial-contents (reverse new-rules)))))

#| Perform a marginalize operation over rules

;; phi = schema conditional probability distribution
;; vars = list variables to keep
;; op = operation to apply on rules
;; new-dep-id = dependent variable after marginalization step is complete
(defun operate-marginalize-rules-keep (phi vars op new-dep-id)
  (when (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
    (format t "~%marginalizing phi:~%~S" phi)
    (print-cpd phi)
    (format t "~%vars to keep:~%~S" vars))
  (loop
    with rules = (rule-based-cpd-rules phi)
    with new-rules
    with marginalized-rule
    with rule-bag
    with global-ignore-idxs
    with intersection1
    with num-rules = 0
    for r1 being the elements of rules
    for i from 0
    do
       (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
	     (format t "~%~%rule at index i = ~d" i)
	     (print-cpd-rule r1)
	     ;;(format t "~%global ignore indeces:~%~S" global-ignore-idxs)
	     )
       (setq marginalized-rule nil)
       (setq intersection1 nil)
       (loop
	 named inter
	 with vals
	 for var in vars
	 do
	    (setq vals (gethash var (rule-conditions r1)))
	 when vals
	   do
	      (setq intersection1 (cons (cons var vals) intersection1)))
       (cond ((not intersection1)
	      (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
		(format t "~%adding rule to new rules because by default"))
	      (setq marginalized-rule (copy-cpd-rule r1))
	      (setf (rule-block marginalized-rule) (make-hash-table))
	      (setf (gethash num-rules (rule-block marginalized-rule)) num-rules)
	      (setq new-rules (cons marginalized-rule new-rules))
	      (setq num-rules (+ num-rules 1))
	      )
	     ((and intersection1 (not (member i global-ignore-idxs)))
	      (setq rule-bag (list r1))
	      (setq marginalized-rule (make-rule :id (gensym "RULE-")
						 :conditions (make-hash-table :test #'equal)
						 :probability (rule-probability r1)
						 :block (make-hash-table)
						 :count (rule-count r1)))
	      (loop
		for inter in intersection1
		do
		   (setf (gethash (car inter) (rule-conditions marginalized-rule))
			 (cdr inter)))
	      (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
		(format t "~%initial marginalized rule:~%~S" marginalized-rule))
	      (setf (gethash num-rules (rule-block marginalized-rule)) num-rules)
	      ;;(setq num-rules (+ num-rules 1))
	      (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
		(format t "~%rule has intersection with keep vars"))
	      (loop
		with intersection2
		with local-ignore = global-ignore-idxs
		with num-conditions
		for r2 being the elements of rules
		for j from 0
		when (not (= j i)) do
		  (when (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
		    (format t "~%  checking if r2 is compatible with marginalized rule.~%  r2:")
		    (print-cpd-rule r2 :indent "        ")
		    (format t "~%  local ignore:~%  ~S" local-ignore))
		  (setq intersection2 nil)
		  (loop
		    named inter
		    with vals
		    for var in vars
		    do
		       (setq vals (gethash var (rule-conditions r2)))
		    when vals
		      do
			 (setq intersection2 (cons (cons var vals) intersection2)))
		  (cond ((not intersection2)
			 (setq rule-bag (cons r2 rule-bag))
			 (setf (rule-probability marginalized-rule)
			       (funcall op
					(rule-probability marginalized-rule)
					(rule-probability r2)))
			 (when (not (rule-based-cpd-singleton-p phi))
			   (setf (rule-count marginalized-rule)
				 (funcall op 1
					  #|
					  (if (rule-count marginalized-rule)
					  (rule-count marginalized-rule)
					  1)
					  (if (rule-count r2)
					  (rule-count r2)
					  1)
					  |#)))
			 (when nil t
			       (format t "~%  compatible by default.~%  updated marginalized rule:~%  ~S" marginalized-rule)))
			(t
			 (when (compatible-rule-p r2 marginalized-rule phi phi)
			   (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-var phi))
				      (= 1 (rule-probability r2)))
			     (format t "~%  r2 is compatible with marginalized rule.~%  marginalized-rule:~%  ~S~%  r1:~%  ~S~%  r2:~%  ~S" marginalized-rule r1 r2))
			   (setq rule-bag (cons r2 rule-bag))
			   (setf (rule-probability marginalized-rule)
				 (funcall op
					  (rule-probability marginalized-rule)
					  (rule-probability r2)))
			   (when (not (rule-based-cpd-singleton-p phi))
			     (setf (rule-count marginalized-rule)
				   (funcall op 1
					    #|
					    (if (rule-count marginalized-rule)
					    (rule-count marginalized-rule)
					    1)
					    (if (rule-count r2)
					    (rule-count r2)
					    1)
					    |#)))
			   (setq num-conditions (hash-table-count (rule-conditions marginalized-rule)))
			   (loop
			     with vals
			     for inter in intersection2
			     do
				(setq vals (gethash (car inter) (rule-conditions marginalized-rule)))
				(setf (gethash (car inter) (rule-conditions marginalized-rule))
				      (if vals
					  (intersection vals (cdr inter))
					  (cdr inter))))
			   (if (> (hash-table-count (rule-conditions marginalized-rule)) num-conditions)
			       (setq local-ignore (cons j global-ignore-idxs))
			       (setq local-ignore (cons j local-ignore)))
			   (when (and (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi)))
			     (format t "~%  updated marginalized rule:")
			     (print-cpd-rule marginalized-rule :indent "        ")))))
		finally
		   (setq new-rules (cons marginalized-rule new-rules))
		   (setq num-rules (+ num-rules 1))
		   (setq global-ignore-idxs local-ignore)
		   (when (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
		     (format t "~%updated new rules:")
		     (map nil #'print-cpd-rule new-rules)
		     ;;(format t "~%updated global ignore rule indexes:~%~S" global-ignore-idxs)
		     ;;(break)
		     ))))
    finally
       #|
       (when (not (rule-based-cpd-singleton-p phi))
	 (loop
           with new-rule
	   with dep-val
           for rule in new-rules
           do
	      (setq dep-val (gethash new-dep-id (rule-conditions rule)))
	      #|
	      (when (and dep-val (= 0 dep-val) (not (= (rule-probability rule) 0)))
		(format t "~%observed case with ~S = 0 with probability greater than 0.~%marginalized rule:~%~S~%phi:~%~S" new-dep-id rule phi)
		(break "problem?"))
	      |#
	      (when (and dep-val (not (= 0 dep-val)))
		(setq new-rule (copy-cpd-rule rule))
		(setf (gethash new-dep-id (rule-conditions new-rule)) 0)
		(setf (rule-probability new-rule) 0)
		(setf (rule-count new-rule) 1)
		(setf (rule-block new-rule) (make-hash-table))
		(setf (gethash num-rules (rule-block new-rule)) num-rules)
		(setq num-rules (+ num-rules 1))
		(when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
                      (format t "~%new rule:~%~S" new-rule))
		(setq new-rules (cons new-rule new-rules)))))
    |#
       (when (null new-rules)
	 (error "No marginalized rules left."))
       (when (equal "OBSERVATION_0_1277" (rule-based-cpd-dependent-id phi))
	 (format t "~%returning:")
	 (map nil #'print-cpd-rule new-rules))
       (return (make-array num-rules :initial-contents (reverse new-rules)))))
|#

#| Perform a marginalize operation over rules

;; phi = schema conditional probability distribution
;; var = variable to marginalize out
;; op = operation to apply on rules
;; new-dep-id = dependent variable after marginalization step is complete
(defun operate-marginalize-rules (phi var op new-dep-id)
  (loop
    with rules = (rule-based-cpd-rules phi)
    with var-idx = (gethash var (rule-based-cpd-identifiers phi))
    with new-rules
    with var-val1 and num-var-vals = (make-hash-table)
    with marginalized-rule
    with rule-bag
    for r1 being the elements of rules
    do
       (setq var-val1 (gethash var (rule-conditions r1)))
       (setq rule-bag (list r1))
       (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
         (format t "~%~%rule1:~%~S~%var: ~S val: ~S" r1 var var-val1))
       (setq marginalized-rule (copy-cpd-rule r1))
       (cond ((null var-val1)
              (loop
                for i in (gethash var-idx (rule-based-cpd-var-values phi))
                do
                   (setf (gethash i num-var-vals) t)))
             (t
              (setf (gethash var-val1 num-var-vals) t)
              (remhash var (rule-conditions marginalized-rule))))
      (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
        (format t "~%~%candidate marginalized rule:~%~S" marginalized-rule))
      (loop
        with var-val2
        for r2 being the elements of rules
        for idx-j from 0
        do
           (setq var-val2 (gethash var (rule-conditions r2)))
           (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
             (format t "~%r2:~%~S~%var-val2:~%~S" r2 var-val2))
        when (and (or (and var-val2
                           (not (eq var-val1 var-val2)))
                      (null var-val2))
                  (compatible-rule-p marginalized-rule r2 phi phi :avoid var))
          do
             (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
               (format t "~%compatiblep: T"))
             (setq rule-bag (reverse (cons r2 (reverse rule-bag))))
             (cond ((null var-val2)
                    (loop
                      for i in (gethash var-idx (rule-based-cpd-var-values phi))
                      do
                         (setf (gethash i num-var-vals) t)))
                   (t
                    (setf (gethash var-val2 num-var-vals) t)))
             (setf (rule-probability marginalized-rule) (funcall op (rule-probability marginalized-rule) (rule-probability r2)))
             (when (< (rule-probability marginalized-rule) 0)
               (format t "~%rule with negative probability:~%~S" marginalized-rule)
               (break))
             (when (not (rule-based-cpd-singleton-p phi))
               (setf (rule-count marginalized-rule)
                     (funcall op
                              (if (rule-count marginalized-rule)
                                  (rule-count marginalized-rule)
                                  1)
                              (if (rule-count r2)
                                  (rule-count r2)
                                  1))))
             (loop
               for att being the hash-keys of (rule-conditions r2)
                 using (hash-value value)
               when (and (not (equal att var)) (null (gethash att (rule-conditions marginalized-rule))))
                 do
                    (setf (gethash att (rule-conditions marginalized-rule)) value))
             (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
               (format t "~%updated marginalized rule:~%~S" marginalized-rule))
        finally
          (let ((val-dif (- (length (gethash var-idx (rule-based-cpd-var-values phi))) (hash-table-count num-var-vals)))
                (dep-val nil))
            (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
                  (format t "~%rule:~%~S~%rule-bag:~%~S~%~S domain: ~S~%observed values for ~S: ~d~%num missing observations: ~d" r1 rule-bag var (gethash var-idx (rule-based-cpd-var-values phi)) var num-var-vals val-dif))
            (when (not (=  val-dif 0))
              (setq dep-val (gethash (rule-based-cpd-dependent-id phi) (rule-conditions r1)))
              (cond ((null dep-val)
                     (error "Rule has no assignment for ~S which is the dependent variable." (rule-based-cpd-dependent-id phi)))
                    ((= dep-val 0)
                     (setf (rule-probability marginalized-rule) (+ (rule-probability marginalized-rule) (* val-dif 1)))
                     (when (< (rule-probability marginalized-rule) 0)
                       (format t "~%rule with negative probability:~%~S" marginalized-rule)
                       (break))
                     (when (not (rule-based-cpd-singleton-p phi))
                       (setf (rule-count marginalized-rule) (+ (if (rule-count marginalized-rule)
                                                                   (rule-count marginalized-rule)
                                                                   1)
                                                               0))))))
            (setq new-rules (cons marginalized-rule new-rules))
            (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
                  (format t "~%updated new rules:~%~S" new-rules))))
    finally
       (when (equal var (rule-based-cpd-dependent-id phi))
         (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
           (format t "~%adding rules for unobserved cases with ~S = 0" new-dep-id))
         (loop
           with new-rule
           for rule in new-rules
           do
              (when (gethash new-dep-id (rule-conditions rule))
                (setq new-rule (copy-cpd-rule rule))
                (setf (gethash new-dep-id (rule-conditions new-rule)) 0)
                (setf (rule-probability new-rule) 0)
                (setf (rule-count new-rule) 1)
                (when nil (and (equal "TOWER545" (rule-based-cpd-dependent-id phi)))
                  (format t "~%new rule:~%~S" new-rule))
                (setq new-rules (cons new-rule new-rules)))))
       (return (remove-duplicates new-rules
                                  :test #'(lambda (r1 r2)
                                            (same-rule-p r1 r2 phi phi :check-probability nil :check-count nil))))))
|#

(defun reduce-cpd-meta-data (phi var)
  (let* ((var-pos (gethash var (rule-based-cpd-identifiers phi)))
         new-dep-id new-dep-var new-identifiers
         (var-difference (reduce-ordinal-hash (rule-based-cpd-vars phi) var-pos))
         (type-difference (reduce-ordinal-hash (rule-based-cpd-types phi) var-pos))
         (new-concept-ids (reduce-ordinal-hash (rule-based-cpd-concept-ids phi) var-pos))
         (new-qvars (reduce-ordinal-hash (rule-based-cpd-qualified-vars phi) var-pos))
         (new-vvbm (reduce-ordinal-hash (rule-based-cpd-var-value-block-map phi) var-pos))
         (new-sva (reduce-ordinal-hash (rule-based-cpd-set-valued-attributes phi) var-pos))
         (new-lower-vvbm (reduce-ordinal-hash (rule-based-cpd-lower-approx-var-value-block-map phi) var-pos))
         (new-values (reduce-ordinal-hash (rule-based-cpd-var-values phi) var-pos))
         (cardinalities (get-var-cardinalities new-vvbm))
         (steps (generate-cpd-step-sizes cardinalities))
         ;;(var-card (aref (rule-based-cpd-cardinalities phi) var-pos))
         (marginalized nil))
    (multiple-value-setq (new-identifiers new-dep-id)
      (reduce-categorical-hash (rule-based-cpd-identifiers phi) var var-pos))
    (when (null new-dep-id)
      (setq new-dep-id (rule-based-cpd-dependent-id phi)))
    (setq new-dep-var (gethash 0 var-difference))
    (setq marginalized (make-rule-based-cpd :dependent-id new-dep-id
                                            :identifiers new-identifiers
                                            :dependent-var new-dep-var
                                            :vars var-difference
                                            :types type-difference
                                            :concept-ids new-concept-ids
                                            :qualified-vars new-qvars
                                            :var-value-block-map new-vvbm
                                            :set-valued-attributes new-sva
                                            :lower-approx-var-value-block-map new-lower-vvbm
                                            :characteristic-sets (make-hash-table)
                                            :characteristic-sets-values (make-hash-table)
                                            :var-values new-values
                                            :cardinalities cardinalities
                                            :step-sizes steps
					    :rules (rule-based-cpd-rules phi)
					    :count (rule-based-cpd-count phi)
					    :prior (rule-based-cpd-prior phi)
                                            :singleton-p (rule-based-cpd-singleton-p phi)
                                            :lvl (rule-based-cpd-lvl phi)))
    marginalized))

#| Marginalize out one variable from factor |#

;; phi = conditional probability density
;; vars = variables to keep
;; op = operation to apply to factor (max or +)
(defun operate-factor (phi vars op)
  (setf (rule-based-cpd-rules phi)
	(operate-marginalize-rules-keep phi vars op (rule-based-cpd-dependent-id phi)))
  phi)

#| Generate intermediate factor by marginalization or max |#

;; phi = conditional probability density
;; keep = vars to keep
;; remove = variables to op out
;; op = operation to apply to factor (max or +)
(defun factor-operation (phi keep remove op)
  (cond ((null remove)
	 (operate-factor phi keep op))
	(t
	 (factor-operation (reduce-cpd-meta-data phi (car remove)) keep (rest remove) op))))

#| Prepare factor graph for message passing |#

;; edges = array of edges in factor graph
;; evidence = self-messages from conditional probability densities
(defun initialize-graph (edges evidence)
  ;;See (Koller & Friedman, 2009) if this is not a factor graph
  (when nil
    (format t "~%size of evidence:~%~A~%size of edges:~%~A" (hash-table-count evidence) (array-dimension edges 0)))
  (loop
    for edge being the elements of edges
    when (not (= (car edge) (cdr edge)))
      do
         (when (null (gethash (car edge) evidence))
           (setf (gethash (car edge) evidence) (make-hash-table)))
         (setf (gethash (cdr edge) (gethash (car edge) evidence)) 1))
  evidence)

#| Send a message from one factor to the other |#

;; i = index of conditional probability density message sender
;; j = index of conditional probability density message receiver
;; factors = array of conditional probability densities
;; op = operation to apply to factor (max or +)
;; edges = array of edges in factor graph
;; messages = messages from factor to factor
;; sepset = separating set preserving the Running Intersection Property
(defun send-message (i j factors op edges messages sepset)
  ;;(format t "~%edges:~%~A" edges)
  ;;(print-messages messages)
  (when nil (and (= i 1) (= j 7))
    (format t "~%~%sending message from ~d to ~d" i j)
    (format t "~%~d:" i)
    (print-cpd (aref factors i))
    (format t "~%~d:" j)
    (print-cpd (aref factors j)))
  (let (nbrs-minus-j reduced)
    (loop
      for k from 0 to (- (array-dimension edges 0) 1)
      for edge being the elements of edges
      when (and (= (cdr edge) i) (not (= (car edge) j)))
        collect (gethash i (gethash (car edge) messages)) into neighbors
      finally (setq nbrs-minus-j neighbors))
    (when nil (and (= i 1) (= j 3))
          (format t "~%neighbors minus j:~%~S~%i:~%~S"
                  (loop for nbr in nbrs-minus-j
                        when (rule-based-cpd-p nbr)
                          collect (cons (rule-based-cpd-identifiers nbr) (rule-based-cpd-rules nbr)) into nbrs
                        else
                          collect nbr into nbrs
                        finally
                           (return nbrs))
                  (cons (rule-based-cpd-identifiers (aref factors i))
                        (rule-based-cpd-rules (aref factors i)))))
    (setq reduced (reduce 'factor-filter (cons (aref factors i) nbrs-minus-j)))
    (when (and (= i 1) (= j 7))
      (format t "~%evidence-collected:~%")
      (print-cpd reduced)
      (format t "~%sepset: ~S~%variables to eliminate: ~S"  sepset
              (set-difference (hash-keys-to-list (rule-based-cpd-identifiers reduced)) sepset :test #'equal)))
    (factor-operation reduced sepset (set-difference (hash-keys-to-list (rule-based-cpd-identifiers reduced)) sepset :test #'equal) op)))

#| Compute final belief of a factor |#

;; i = index of conditional probability density
;; factors = array of conditional probability densities
;; edges = array of edges in factor graph
;; messages = messages from factor to factor
(defun compute-belief (i factors edges messages)
  (loop
    with factor
    for k from 0 to (- (array-dimension edges 0) 1)
    for edge being the elements of edges
    when (= (cdr edge) i)
      collect (gethash i (gethash (car edge) messages)) into nbrs
    and
      collect (car edge) into idxs
    finally
       (when nil (and (rule-based-cpd-singleton-p (aref factors i))
		  (equal "WORKER_AGENT_REPUTATION" (rule-based-cpd-dependent-var (aref factors i))))
         (format t "~%computing belief for factor:~%~A~%on nbrs:~%" (aref factors i))
	 (loop
	   for nbr in nbrs
	   for idx in idxs
	   when (rule-based-cpd-p nbr)
	     do
		(format t "~%neighbor ~d:~%~A" idx (rule-based-cpd-identifiers nbr))
		(loop
		  for rule being the elements of (rule-based-cpd-rules nbr)
		  do
		     (print-cpd-rule rule))))
       (setq factor (reduce 'factor-filter (cons (aref factors i) nbrs)))
       (when nil
	 (format t "~%~%belief")
	 (print-hash-entry k factor))
       (when nil (and (rule-based-cpd-singleton-p factor)
		  (equal "WORKER_AGENT_REPUTATION" (rule-based-cpd-dependent-var factor)))
	 (format t "~%~%posterior marginal for:~%~A~%~A" (rule-based-cpd-identifiers factor) (rule-based-cpd-rules factor)))
       ;;(check-cpd factor)
       (return factor)))

#| Dampen message signals to avoid oscilations

;; message = conditional probability density
;; messages = messages from factor to factor
;; j = index into messages
;; k = index into messages
;; lr = learning rate to dampen updates, and help convergence
(defun smooth (factor j k messages lr)
  (let (factor-rules old-cpd old-rules new-rules)
    (setq factor-rules (coerce (rule-based-cpd-rules factor) 'list))
    (setq old-cpd (gethash k (gethash j messages)))
    (when (rule-based-cpd-p old-cpd)
      (setq old-rules (coerce (rule-based-cpd-rules old-cpd) 'list))
      (setq new-rules (mapcar #'(lambda (r1 r2)
                                  (make-rule
                                   :id (gensym "RULE-")
                                   :conditions (rule-conditions r1)
                                   :probability (rationalize (+ (* lr r1) (* (- 1 lr) r2)))
                                   :block (rule-block r1)
                                   :certain-block (rule-certain-block r1)
                                   :avoid-list (rule-avoid-list r1)
                                   :redundancies (rule-redundancies r1)
                                   :count (rule-count r1)))
                              factor-rules old-rules))
      (setf (rule-based-cpd-rules factor) (make-array (length new-rules) :initial-contents new-rules :fill-pointer t))
      ;;(break "new-message: ~A~%old-message: ~A~%res: ~A~%updated-factor: ~A" factor-assns old-assns new-assns factor)
      )
    factor))
|#

(defun smooth (factor j k messages lr)
  (let (old-cpd new-assns)
    (cond ((= lr 1)
	   factor)
	  (t
	   (setq old-cpd (gethash k (gethash j messages)))
     (loop
       with new-val and new-rule and r2
       for r1 being the elements of (rule-based-cpd-rules factor)
       ;;for r2 being the elements of (rule-based-cpd-rules old-cpd)
       do
          (cond ((rule-based-cpd-p old-cpd)
                 (setq r2 (car (get-compatible-rules old-cpd factor r1 :find-all nil))))
                (t
                 (setq r2 (make-rule :probability old-cpd))))
          (setq new-val (rationalize (+ (* lr (rule-probability r1)) (* (- 1 lr) (rule-probability r2)))))
          (setq new-rule (copy-cpd-rule r1))
          (setf (rule-probability new-rule) new-val)
       collect new-rule into new-rules
       finally
          (setf (rule-based-cpd-rules factor) (make-array (array-dimension (rule-based-cpd-rules factor) 0) :initial-contents new-rules)))
	   (normalize-rule-probabilities factor (rule-based-cpd-dependent-id factor))))))

#| Check if factor message has changed from one iteration to the next |#

;; m1 = current message
;; m2 = updated message
(defun same-message-p (m1 m2 &key round (check-count t))
  (cond ((and (numberp m1) (numberp m2))
         (= m1 m2))
        ((and (numberp m1) (rule-based-cpd-p m2))
         nil)
        ((and (rule-based-cpd-p m1) (numberp m2))
         nil)
	((and (null m1) (rule-based-cpd-p m2))
	 nil)
	((and (rule-based-cpd-p m1) (null m2))
	 nil)
        ((and (rule-based-cpd-p m1) (rule-based-cpd-p m2))
         (cond ((not (= (array-dimension (rule-based-cpd-rules m1) 0)
                        (array-dimension (rule-based-cpd-rules m2) 0)))
                nil)
               (t
                (loop
                  for rule being the elements of (rule-based-cpd-rules m1)
                  when (notany #'(lambda (r) (same-rule-p rule r m1 m2 :check-count nil :round round :check-count check-count)) (rule-based-cpd-rules m2))
                    do
                       (return-from same-message-p nil))
                (loop
                  for rule being the elements of (rule-based-cpd-rules m2)
                  when (notany #'(lambda (r) (same-rule-p rule r m1 m2 :check-count nil :round round :check-count check-count)) (rule-based-cpd-rules m1))
                    do
                       (return-from same-message-p nil))
                t)))))

#| Perform loopy belief propagation over a factor graph
   See (Koller & Friedman, 2009) |#

;; factors = array of conditional probability densities
;; op = operation to apply to factor (max or +)
;; edges = array of edges in factor graph
;; evidence = hashtable of self-messages from conditional probability densities
;; lr = learning rate to dampen updates, and help convergence
(defun calibrate-factor-graph (factors op edges evidence lr)
  (loop
    with round = t
    with j and k and sepset and messages = (initialize-graph edges evidence)
    with calibrated and conflicts and max-iter = 30 and deltas
    for count from 0
    do
       (when nil t
         (format t "~%~%Iteration: ~d." count))
       (setq calibrated t)
       (setq conflicts nil)
       (setq deltas nil)
       (loop
         with current-message and new-message
         for i from 0 to (- (array-dimension edges 0) 1)
         do
            (setq j (car (aref edges i)))
            (setq k (cdr (aref edges i)))
            (when (not (= j k))
              (setq sepset (hash-intersection (rule-based-cpd-identifiers (aref factors j))
                                              (rule-based-cpd-identifiers (aref factors k))
                                              :test #'equal))
              (when nil (and (= j 1) (= k 3))
                    (format t "~%~%factor j = ~d:~%~A singleton-p: ~S~%factor k = ~d:~%~A singleton-p: ~S~%sepset: ~A" j (rule-based-cpd-identifiers (aref factors j)) (rule-based-cpd-singleton-p (aref factors j)) k (rule-based-cpd-identifiers (aref factors k)) (rule-based-cpd-singleton-p (aref factors k)) sepset))
              (setq current-message (gethash k (gethash j messages)))
              ;;(setq new-message (smooth (send-message j k factors op edges messages sepset) j k messages lr))
              (setq new-message (send-message j k factors op edges messages sepset))
	      ;; when doing sum-product message passing, normalize after getting the message
	      (when (or (eq #'+ op) (eq '+ op))
		(setq new-message (normalize-rule-probabilities new-message (rule-based-cpd-dependent-id new-message)))
		(check-cpd new-message :check-uniqueness nil :check-prob-sum nil #|(when (not (rule-based-cpd-singleton-p marginalized)) t)|# :check-counts nil :check-count-prob-agreement nil)
		)
	      (setq new-message (smooth new-message j k messages lr))
	      (when nil t (and (= j 1) (= k 3))
                (format t "~%current message from ~d:" j)
                (print-hash-entry k current-message)
                (format t "~%new message from ~d:" j)
                (print-hash-entry k new-message))
              (loop
                for new-rule being the elements of (rule-based-cpd-rules new-message)
                do
                   (cond (round
                          (setq deltas (cons (abs (- (read-from-string (format nil "~$" (rule-probability new-rule)))
                                                     (read-from-string (format nil "~$"
                                                                               (if (rule-based-cpd-p current-message)
                                                                                   (rule-probability (car (get-compatible-rules
                                                                                                           current-message
                                                                                                           new-message
                                                                                                           new-rule
                                                                                                           :find-all nil)))
                                                                                   current-message)))))
                                             deltas)))
                         (t
                          (setq deltas (cons (abs (- (rule-probability new-rule)
                                                     (if (rule-based-cpd-p current-message)
                                                         (rule-probability (car (get-compatible-rules
                                                                                 current-message
                                                                                 new-message
                                                                                 new-rule
                                                                                 :find-all nil)))
                                                         current-message)))
                                             deltas)))))
              (setf (gethash k (gethash j messages)) new-message))
         when (not (same-message-p current-message new-message :round t))
           do
              (setq conflicts (cons (cons current-message new-message) conflicts))
              (setq calibrated nil))
       ;;(break "~%end of iteration")
       (when nil t
	 (format t "~%~%num conflicts: ~d" (length conflicts))
	 (format t "~%delta_mean: ~d~%delta_std: ~d" (float (mean deltas)) (float (stdev deltas))))
       ;;(log-message (list "~d,~d,~d,~d,~d~%" lr count (length conflicts) (float (mean deltas)) (float (stdev deltas))) "learning-curves.csv")
    until (or calibrated (= (+ count 1) max-iter))
    finally
       (when nil t
         (cond (calibrated
                (format t "~%Reached convergence after ~d iterations." (+ count 1)))
               (t
                (format t "~%Reached inference limit at iteration ~d." (+ count 1)))))
       (return
         (cond ((or (eq op '+)
		    (eq op #'+))	
                (loop
                  for i from 0 to (- (array-dimension factors 0) 1)
		 when (rule-based-cpd-singleton-p (aref factors i))
                   collect (compute-belief i factors edges messages) into posterior-marginals
		  else
		    collect (compute-belief i factors edges messages) into posterior-distribution
		  finally
		     (return (values posterior-distribution posterior-marginals))))
               ((or (eq op 'max)
		    (eq op #'max))
                (when nil
                  (format t "~%Computing most likely state."))
                ;;(break)
                (let (constraints vars unassigned csp copy-factors-list)
                  (when nil
                    (format t "~%factors:~%~A" factors))
                  (loop
                    for factor being the elements of factors
                    do
                       (setq copy-factors-list (cons (copy-rule-based-cpd factor) copy-factors-list))
                    finally
                       (setq copy-factors-list (reverse copy-factors-list)))
                  (when nil
                    (format t "~%Max marginals:~%~A" copy-factors-list))
                  (loop
                    for i from 0 to (- (array-dimension factors 0) 1)
                    for copy-factor in copy-factors-list
                    with constraint and max-val and new-assns and num-assignments
                    do
                       (setq max-val 0)
                       (setq constraint (compute-belief i factors edges messages))
                       (when nil
                         (format t "~%constraint:~%~A" constraint)
                         (break))
                       (setq num-assignments (reduce #'* (coerce (cpd-cardinalities constraint) 'list)))
                       (setf (cpd-counts constraint) (cpd-counts copy-factor))
                       (setq new-assns (make-hash-table))
                       (loop
                         for i from 0 to (- num-assignments 1)
                         with hashed-val and max = 0
                         do
                            (cond ((cpd-counts constraint)
                                   (when (> (access-counts (cpd-counts constraint) i (aref (cpd-cardinalities constraint) 0)) 0)
                                     (setq hashed-val (hash-access (cpd-assignments constraint) 0 constraint (list i)))
                                     (if (> hashed-val max)
                                         (setq max hashed-val))
                                     (if (> hashed-val 0)
                                         (setf (gethash i new-assns) hashed-val))))
                                  (t
                                   (setq hashed-val (hash-access (cpd-assignments constraint) 0 nil (list i)))
                                   (if (> hashed-val max)
                                       (setq max hashed-val))))
                         finally (setq max-val max))
                       (when (cpd-counts constraint)
                         (setf (cpd-assignments constraint) new-assns))
                       (loop
                         for j from 0 to (- num-assignments 1)
                         do
                            (cond ((and (> max-val 0) (= (hash-access (cpd-assignments constraint) 0 constraint (list j)) max-val))
                                   (setf (gethash j (cpd-assignments constraint)) 1))
                                  (t
                                   (remhash j (cpd-assignments constraint)))))
                    collect constraint into cnstrts
                    finally
                       ;;(break)
                       (setq constraints cnstrts))
                  (setq vars (remove-duplicates
                              (mapcan #'(lambda (cpd)
                                          (hash-keys-to-list (cpd-identifiers cpd)))
                                      constraints)
                              :test #'equal))
                  (loop
                    for constraint in constraints
                    do
                    #|
                       (when (= (length (cpd-identifiers constraint)) 1)
                       (format t "~%singleton constraint:~%~A~%assignments" constraint)
                       (maphash #'print-hash-entry (cpd-assignments constraint)))|#
                       (loop
                         with bindings and values
                         for var being the hash-keys of (cpd-identifiers constraint)
                           using (hash-value pos)
                         do
                            (setq bindings (gethash pos (cpd-var-value-map constraint)))
                            (setq values (mapcar 'car bindings))
                            (when (not (member (cons var values)
                                               unassigned :test #'equal))
                              (setq unassigned (cons (cons var values)
                                                     unassigned)))))
                  (setq unassigned (node-consistency unassigned constraints))
                  (setq csp (list ':constraints (make-array (length constraints) :initial-contents constraints :fill-pointer t) ':vars vars))
                  (when nil
                    (format t "~%constraints:~%~S" (getf csp :constraints))
                    ;;(break)
                    )
                  ;;(backtracking-search csp unassigned)
                  (min-conflicts csp)))))))

(defun ins (item lst &optional (key #'<))
  (if (null lst)
      (list item)
      (if (funcall key (cdr item) (cdr (car lst)))
          (cons item lst)
          (cons (car lst) (ins item (cdr lst) key)))))

(defun iter-ins (item lst &optional (key #'<))
  (cond ((null lst)
	 (list item))
	(t
	 (loop
	    for val in lst
	    for i from 0
	    when (funcall key (second item) (second val))
	    do
	      (return (append (subseq lst 0 i) (cons item (subseq lst i))))
	    finally
	      (return (reverse (cons item (reverse lst))))))))

#| Make a ruleset for describing the conditional probability distribution

;; cpd = conditional probability distribution
;; assn = assignment with probability 1
(defun make-initial-rules (cpd assn)
  (labels ((invert-assignment-at-index (assn idx invert-map)
             (setf (aref assn idx)
                   (cdr (assoc (aref assn idx)
                               invert-map)))
             assn)
           (make-initial-rule (asn prob case count)
             (let (rule)
               (setq rule (make-rule :id (symbol-name (gensym "RULE-"))
                                     :conditions (make-hash-table :test #'equal)
                                     :probability prob
                                     :block (make-hash-table) ;;(list case)
                                     :certain-block (make-hash-table) ;;(list case)
                                     :count count))
               (setf (gethash case (rule-block rule)) case)
               (setf (gethash case (rule-certain-block rule)) case)
               (loop
                 for attribute being the hash-keys of (rule-based-cpd-identifiers cpd)
                   using (hash-value pos)
                 when (< pos (array-dimension asn 0))
                   do
                      (setf (gethash attribute (rule-conditions rule)) (aref asn pos)))
               rule)))
    (let (assn-0)
      (setq assn-0 (copy-array assn))
      (if (= (aref assn 0) 0)
          (setf (aref assn-0 0) 1)
          (setf (aref assn-0 0) 0))
      (loop
        with var-value-prob-map = '((0 . 1) (1 . 0))
        with rules and case = 0 and rule
        for assignment in (list assn assn-0)
        for prob in (list 1 0)
        do
           (setq rule (make-initial-rule assignment prob case 1))
           (setq rules (cons rule rules))
           (setq case (+ case 1))
           (when (> (array-dimension assignment 0) 1)
             (setq assignment (invert-assignment-at-index (copy-array assignment)
                                                          (- (array-dimension assignment 0) 1)
                                                          var-value-prob-map))
             (when (or (and (= prob 0) (not (= (aref assignment 0) 1)))
                       (and (= prob 1) (not (= (aref assignment 0) 0))))
               (setq assignment (invert-assignment-at-index assignment 0 var-value-prob-map)))
             (setq rule (make-initial-rule assignment prob case 0))
             (setq rules (cons rule rules))
             (setq case (+ case 1)))
           (loop
             for i from (- (array-dimension assignment 0) 1) downto 2
             do
                (setq assignment (invert-assignment-at-index (subseq assignment 0 i) (- i 1) var-value-prob-map))
                (setq rule (make-initial-rule assignment prob case 0))
                (setq rules (cons rule rules))
                (setq case (+ case 1)))
        finally
           (return (make-array case :initial-contents (nreverse rules)))))))
|#

#| Make a ruleset for describing the conditional probability distribution |#

;; cpd = conditional probability distribution
;; assn = assignment with probability 1
(defun make-initial-rules (cpd assn)
  (labels ((invert-assignment-at-index (assn idx invert-map)
             (setf (aref assn idx)
                   (cdr (assoc (aref assn idx)
                               invert-map)))
             assn)
           (make-initial-rule (asn prob case count)
             (let (rule)
               (setq rule (make-rule :id (symbol-name (gensym "RULE-"))
                                     :conditions (make-hash-table :test #'equal)
                                     :probability prob
                                     :block (make-hash-table) ;;(list case)
                                     :certain-block (make-hash-table) ;;(list case)
                                     :count count))
               (setf (gethash case (rule-block rule)) case)
               (setf (gethash case (rule-certain-block rule)) case)
               (loop
                 for attribute being the hash-keys of (rule-based-cpd-identifiers cpd)
                   using (hash-value pos)
                 when (< pos (array-dimension asn 0))
                   do
                      (setf (gethash attribute (rule-conditions rule))
                            (list (aref asn pos))))
               rule)))
    (let (assn-0)
      (setq assn-0 (copy-array assn))
      (if (= (aref assn 0) 0)
          (setf (aref assn-0 0) 1)
          (setf (aref assn-0 0) 0))
      (loop
        with var-value-prob-map = '((0 . 1) (1 . 0))
        with rules and case = 0 and rule
        for assignment in (list assn assn-0)
        for prob in (list 1 0)
        do
           (setq rule (make-initial-rule assignment prob case 1))
           (setq rules (cons rule rules))
           (setq case (+ case 1))
           (when (> (array-dimension assignment 0) 1)
             (setq assignment (invert-assignment-at-index (copy-array assignment)
                                                          (- (array-dimension assignment 0) 1)
                                                          var-value-prob-map))
             (when (or (and (= prob 0) (not (= (aref assignment 0) 1)))
                       (and (= prob 1) (not (= (aref assignment 0) 0))))
               (setq assignment (invert-assignment-at-index assignment 0 var-value-prob-map)))
             (setq rule (make-initial-rule assignment prob case 0))
             (setq rules (cons rule rules))
             (setq case (+ case 1)))
           (loop
             for i from (- (array-dimension assignment 0) 1) downto 2
             do
                (setq assignment (invert-assignment-at-index (subseq assignment 0 i) (- i 1) var-value-prob-map))
                (setq rule (make-initial-rule assignment prob case 0))
                (setq rules (cons rule rules))
                (setq case (+ case 1)))
        finally
           (return (make-array case :initial-contents (nreverse rules)))))))

#| Make a ruleset for describing the conditional probability distribution. Does not create any 0-count rules

;; cpd = conditional probability distribution
;; assn = assignment with probability 1
(defun make-initial-rules (cpd assn)
  (labels ((invert-assignment-at-index (assn idx invert-map)
             (setf (aref assn idx)
                   (cdr (assoc (aref assn idx)
                               invert-map)))
             assn)
           (make-initial-rule (asn prob case count)
             (let (rule)
               (setq rule (make-rule :id (symbol-name (gensym "RULE-"))
                                     :conditions (make-hash-table :test #'equal)
                                     :probability prob
                                     :block (make-hash-table) ;;(list case)
                                     :certain-block (make-hash-table) ;;(list case)
                                     :count count))
               (setf (gethash case (rule-block rule)) case)
               (setf (gethash case (rule-certain-block rule)) case)
               (loop
                 for attribute being the hash-keys of (rule-based-cpd-identifiers cpd)
                   using (hash-value pos)
                 when (< pos (array-dimension asn 0))
                   do
                      (setf (gethash attribute (rule-conditions rule)) (aref asn pos)))
               rule)))
    (loop
      with assn-0s and assn-0 and 0s
      for card from 0 to (- (aref (rule-based-cpd-cardinalities cpd) 0) 1)
      when (not (= card (aref assn 0)))
	do
	   (setq assn-0 (copy-array assn))
	   (setf (aref assn-0 0) card)
	   (setq assn-0s (cons assn-0 assn-0s))
	   (setq 0s (cons 0 0s))
      finally 
	 (return
	   (loop
	     with var-value-prob-map = '((0 . 1) (1 . 0))
	     with rules and case = 0 and rule
	     for assignment in (cons assn assn-0s)
	     for prob in (cons 1 0s)
	     do
		(setq rule (make-initial-rule assignment prob case 1))
		(setq rules (cons rule rules))
		(setq case (+ case 1))
	     finally
		(return (make-array case :initial-contents (nreverse rules))))))))
|#

#| Make proper attribute blocs, concept blocks, and rules for each factor |#

;; factors-list = list of factors
(defun finalize-factors (factors-list)
  (loop
    with factor-rules and assn
    for factor in factors-list
    do
       (setq assn (make-array (hash-table-count (rule-based-cpd-vars factor)) :initial-element 1))
       (setq factor-rules (make-initial-rules factor assn))
    collect (update-cpd-rules factor factor-rules :check-uniqueness t)
      into final
    finally
       (return final)))

#| Make a list of counts for assignments in a cpd |#

;; rows = number of entrys in assignemnts array
;; row-length = length of rows
(defun make-counts (rows row-length)
  (let ((counts (make-hash-table)))
    (setf (gethash (* (- rows 1) row-length) counts) 1)
    counts))

#| Return the corresponding concept of a belief |#

;; belief = cinstance
(defun getconcept (belief)
  (car (member (cinstance-id belief) cltm*
               :key 'concept-id
               :test #'(lambda (id1 id2) (equal (symbol-name id1) (symbol-name id2))))))

#| Check if variable matches value |#

;; var = variable
;; val = value
;; bindings = variable bindings
(defun var-eq (var val &optional bindings)
  (cond ((numberp var)
         (equal var val))
         ((and (variable-p (make-symbol var))
               (not (rassoc val bindings :test #'(lambda (v b)
                                                   (equal v (if (numberp b) b (symbol-name b)))))))
         t)
        (t
         (equal var val))))

#| Find CPDs that corresponds to belief's elements and conditions |#

;; instantiated = instantiated belief element
;; concept = concept definition for instantiated
;; elements-cpds = conditional probabilities for each state element
;; bindings = variable bindings
;; start = subset of elements-cpds starting from index
;; stop = subset of elements-cpds ending at index
(defun find-matching-cpd (instantiated concept elements-cpds bindings start &optional stop)
  (loop
    named matcher
    for element-cpds in (subseq elements-cpds start stop)
    with copy-element
     do
        (setq copy-element (car element-cpds))
    when (every #'(lambda (item)
                    (cond ((equal copy-element (remove item copy-element
                                                       :count 1
                                                       :test #'(lambda (c i)
                                                                 (var-eq i c bindings))))
                           nil)
                          (t
                           (setq copy-element (remove item copy-element
                                                      :count 1
                                                      :test #'(lambda (c i)
                                                                (var-eq i c bindings))))
                           t)))
                instantiated)
      do
         (return-from matcher element-cpds)))

#| Find CPDs that corresponds to skill actions |#

;; instantiated = instantiated action
;; elements-cpds = conditional probabilities for each state element
;; start = subset of elements-cpds starting from index
;; stop = subset of elements-cpds ending at index
(defun find-matching-cpd-for-action (instantiated elements-cpds start &optional stop)
  (loop
    named matcher
    for element-cpds in (subseq elements-cpds start stop)
    with copy-element and action-name
    do
       (setq action-name (subseq (car instantiated) 1))
       (setq copy-element (car element-cpds))
    when (equal action-name (car copy-element))
      do
         (return-from matcher element-cpds)))

#| Get variable name without number modifiers at the end |#

;; var-string = variable name in string form
(defun get-var-stem (var-string)
  (loop
     for i from (- (length var-string) 1) downto 0
     when (and (not (digit-char-p (aref var-string i)))
	       (not (equal #\. (aref var-string i))))
     do
       (return-from get-var-stem (+ i 1))))

#| Flatten a nested list |#

;; x = list
(defun flatten (x &optional stack out)
  (cond ((consp x) (flatten (rest x) (cons (first x) stack) out))
        (x         (flatten (first stack) (rest stack) (cons x out)))
        (stack     (flatten (first stack) (rest stack) out))
        (t out)))

#| Modify the conents of original CPD with another cpd |#

;; cpd = cpd to modify
;; modifier-cpd = cpd that updates values in cpd
(defun modify-cpd (cpd modifier-cpd &key causal-discovery)
  (let (new-cards new-steps new-rules)
    (setf (gethash (rule-based-cpd-dependent-id modifier-cpd)
                   (rule-based-cpd-identifiers cpd))
          (hash-table-count (rule-based-cpd-identifiers cpd)))
    (setf (gethash (hash-table-count (rule-based-cpd-vars cpd))
                   (rule-based-cpd-vars cpd))
          (gethash 0 (rule-based-cpd-vars modifier-cpd)))
    (setf (gethash (hash-table-count (rule-based-cpd-types cpd))
                   (rule-based-cpd-types cpd))
          (gethash 0 (rule-based-cpd-types modifier-cpd)))
    (setf (gethash (hash-table-count (rule-based-cpd-concept-ids cpd))
                   (rule-based-cpd-concept-ids cpd))
          (gethash 0 (rule-based-cpd-concept-ids modifier-cpd)))
    (setf (gethash (hash-table-count (rule-based-cpd-qualified-vars cpd))
                   (rule-based-cpd-qualified-vars cpd))
          (gethash 0 (rule-based-cpd-qualified-vars modifier-cpd)))
    (unless causal-discovery
      (setf (gethash (hash-table-count (rule-based-cpd-var-value-block-map cpd))
                     (rule-based-cpd-var-value-block-map cpd))
            (deep-copy-list (gethash 0 (rule-based-cpd-var-value-block-map modifier-cpd))))
      (setf (gethash (hash-table-count (rule-based-cpd-set-valued-attributes cpd))
                     (rule-based-cpd-set-valued-attributes cpd))
            (copy-tree (gethash 0 (rule-based-cpd-set-valued-attributes modifier-cpd))))
      (setf (gethash (hash-table-count (rule-based-cpd-lower-approx-var-value-block-map cpd))
                     (rule-based-cpd-lower-approx-var-value-block-map cpd))
            (deep-copy-list (gethash 0 (rule-based-cpd-lower-approx-var-value-block-map modifier-cpd))))
      (setf (gethash (hash-table-count (rule-based-cpd-var-values cpd))
                     (rule-based-cpd-var-values cpd))
            (copy-list (gethash 0 (rule-based-cpd-var-values modifier-cpd))))
      (setq new-cards (generate-cpd-cardinalities (rule-based-cpd-var-value-block-map cpd)))
      (setq new-steps (generate-cpd-step-sizes new-cards))
      (setf (rule-based-cpd-cardinalities cpd) new-cards)
      (setf (rule-based-cpd-step-sizes cpd) new-steps)
      (setq new-rules (operate-filter-rules cpd modifier-cpd #'* nil (make-hash-table :test #'equal) cpd :compute-count-p t))
      (when nil (string-equal "state" (gethash 0 (rule-based-cpd-types cpd)))
	(format t "~%~%cpd:~%")
	(print-cpd cpd)
	(format t "~%modifier cpd:~%")
	(print-cpd modifier-cpd)
	(format t "~%new rules")
	(map nil #'(lambda (rule)
			   (print-cpd-rule rule))
		   new-rules))
      (setf (rule-based-cpd-rules cpd) (make-array (length new-rules) :initial-contents new-rules))
      ;;(normalize-rule-probabilities cpd (rule-based-cpd-dependent-id cpd))
      )
    cpd))

#| Update the conditional probability densities with new variables

;; cpds = conditional probability densities
;; modifier-cpd = conditional probability to modify cpds
;; concept = concept definition for modifier-cpd
;; element = item in concept elements or conditions
(defun update-cpds (cpds modifier-cpd concept element &optional (test-accessor #'concept-tests))
  (loop
    for cpd in cpds
    for i from 0
    with match and copy-element = (mapcar #'(lambda (l) (if (numberp l) l (symbol-name l))) element) and ele and variable and stripped-not
    with flat-tests = (mapcar #'(lambda (l) (if (numberp l) l (symbol-name l))) (flatten (funcall test-accessor concept)))
    do
       (when nil (eq "BELIEF" (gethash 0 (cpd-types modifier-cpd)))
         (format t "~%copy-element: ~A~%cpd:~%~A" copy-element cpd))
       (setq match nil)
       (cond ((equal "PERCEPT" (gethash 0 (rule-based-cpd-types cpd)))
              (setq ele (remove (gethash 0 (rule-based-cpd-vars cpd)) copy-element :count 1 :test #'equal))
	      (when nil t
		(format t "~%ele: ~A" ele))
              (cond ((and (= i 0) (not (equal ele copy-element)))
                     (setq match t))
                    ((not (equal ele copy-element))
                     (setq variable (cadr (member (gethash 0 (rule-based-cpd-vars cpd)) copy-element :test #'equal)))
                     (when (member variable flat-tests :test #'equal)
                       (setq match t)))))
             ((equal "ACTION" (gethash 0 (rule-based-cpd-types cpd)))
              (if (char=  #\* (char (car copy-element) 0))
                  (setq copy-element (cons (subseq (car copy-element) 1) (rest copy-element))))
              (setq ele (remove (gethash 0 (rule-based-cpd-vars cpd)) copy-element :count 1 :test #'equal))
              ;;(format t "~%ele: ~A~%copy-element: ~A" ele copy-element)
              (when (not (equal ele copy-element))
                (setq match t)))
             (t
              (when (eq 'not (car copy-element))
                (setq copy-element (second copy-element))
                (setq stripped-not t))
              (setq ele (remove (gethash 0 (rule-based-cpd-vars cpd)) copy-element :count 1 :test #'equal))
              (if stripped-not
                  (setq ele (cons 'not ele)))
              (cond ((and (= i 0)
                          (not (equal ele copy-element)))
                     (setq match t))
                    ((not (equal ele copy-element))
                     (setq variable (cadr (member (gethash 0 (rule-based-cpd-vars cpd)) copy-element :test #'equal)))
                     (when (member variable flat-tests :test #'equal)
                       (setq match t))))))
       ;;(when (= cycle* 11)
       ;;  (format t "~%match: ~A" match))
       (when match
         (modify-cpd cpd modifier-cpd)))
  cpds)
|#

#| Update the conditional probability densities with new variables |#

;; cpds = conditional probability densities
;; modifier-cpds = conditional probability distributions to modify cpds
(defun update-cpds-given-action (cpds modifier-cpds)
  ;;(format t "~%~%concept:~%~A~%modifier-cpd:~%~A" concept modifier-cpd)
  (loop
    for cpd in cpds
    for i from 0
    with match and modifier-cpd
    do
       ;;(format t "~%copy-element: ~A~%cpd:~%~A" copy-element cpd)
       (setq match nil)
       (setq modifier-cpd nil)
       (loop
         named matcher
         for m-cpd in modifier-cpds do
           (when (and (equal "PERCEPT" (gethash 0 (rule-based-cpd-types cpd)))
                      (equal (rule-based-cpd-dependent-var cpd) (rule-based-cpd-dependent-var m-cpd)))
             (setq match t)
             (setq modifier-cpd m-cpd)
             (return-from matcher)))
       ;;(when (= cycle* 11)
       ;;(format t "~%~%modifier-cpd:~%~A~%cpd:~%~A" modifier-cpd cpd))
       (when match
         (modify-cpd cpd modifier-cpd)
         ;;(when (= cycle* 11)
         ;;  (format t "~%modified:~%~A" cpd))
         ))
  cpds)

(defun add-temporal-link-for-action (elements-cpds prev-state)
  (when prev-state
    (let (action-cpds cpd)
      (setq action-cpds (car (member 'action elements-cpds
                                     :key #'(lambda(ele) (second (car ele))))))
      (setq cpd (car (member 'action (rest action-cpds) :key #'rule-based-cpd-dependent-var)))
      (loop
        for modifier-cpd being the elements of (car prev-state)
        when (equal (rule-based-cpd-dependent-var cpd) (rule-based-cpd-dependent-var modifier-cpd)) do
          (modify-cpd cpd modifier-cpd)))))

(defun list-to-string (l)
  (format nil "(~{~A~^ ~})" l))

#| Make CPDs for intentions on execution stack. |#

;; int = intention structure
;; lvl = level of current intention
;; intentions = list of intention cpds so far
(defun get-cpds-for-executing-intention (int lvl intentions elements-cpds pstm)
  (cond ((null int)
         (let (top-lvl-int top-lvl-int-cpd)
           (setq top-lvl-int (car intentions))
           (setq top-lvl-int-cpd (second intentions))
           (setq intentions (rest intentions))
           (loop
             with cpd1 and cpd2 and type and id and dep-id and idents and vars and types-hash and cid and cids and vvbm
             with sva and svna and vals and cards and steps and rules
             for goal in (if top-lvl-int (intention-targets top-lvl-int) nil)
             do
                (setq type (symbol-name (car goal)))
                (setq vars (make-hash-table))
                (setf (gethash 0 vars) "GOAL")
                (setq types-hash (make-hash-table))
                (setf (gethash 0 types-hash) "GOAL")
                (setq id (symbol-name (gensym type)))
                (setq idents (make-hash-table :test #'equal))
                (loop
                  for idx being the hash-keys of vars
                    using (hash-value ele)
                  do
                     (if (= idx 0) (setq dep-id (symbol-name (gensym ele))))
                     (setf (gethash (if (= idx 0) dep-id (symbol-name (gensym ele))) idents) idx))
                (setq vvbm (make-hash-table))
                (setf (gethash 0 vvbm) (list (list (cons "NA" 0) (make-hash-table)) (list (cons id 1) (make-hash-table))))
                (setq sva (make-hash-table))
                (setf (gethash 0 sva) (list (list 0) (list 1)))
                (setq svna (make-hash-table))
                (setf (gethash 0 svna) (list (list 1) (list 0)))
                (setq vals (make-hash-table))
                (setf (gethash 0 vals) (list 0 1))
                (setq cards (generate-cpd-cardinalities vvbm))
                (setq steps (generate-cpd-step-sizes cards))
                (setq cids (make-hash-table))
                (setf (gethash 0 cids) "NIL")
                (setq cpd1 (make-rule-based-cpd :dependent-id dep-id
                                                :identifiers idents
                                                :dependent-var (gethash 0 vars)
                                                :vars vars
                                                :types types-hash
                                                :concept-ids cids
                                                :qualified-vars (generate-cpd-vars idents vars cids)
                                                :var-value-block-map vvbm
                                                :negated-vvbms (copy-hash-table vvbm)
                                                :set-valued-attributes sva
                                                :set-valued-negated-attributes svna
                                                :lower-approx-var-value-block-map (copy-hash-table vvbm)
                                                :lower-approx-negated-vvbms (copy-hash-table vvbm)
                                                :characteristic-sets (make-hash-table)
                                                :characteristic-sets-values (make-hash-table)
                                                :var-values vals
                                                :cardinalities cards
                                                :step-sizes steps
                                                :rules rules
                                                :concept-blocks (make-hash-table)
                                                :count 1
                                                :lvl lvl))
                (setq vars (make-hash-table))
                (setf (gethash 0 vars) type)
                (setf (gethash 1 vars) "GOAL")
                (setq types-hash (make-hash-table))
                (setf (gethash 0 types-hash) "GOAL")
                (setf (gethash 1 types-hash) "GOAL")
                (setq idents (make-hash-table :test #'equal))
                (setf (gethash id idents) 0)
                (setf (gethash (rule-based-cpd-dependent-id cpd1) idents) 1)
                (setq cid "NIL")
                (setq vvbm (make-hash-table))
                (setf (gethash 0 vvbm) (list (list (cons "NA" 0) (make-hash-table))
                                             (list (cons (list-to-string (sublis (intention-bindings top-lvl-int) goal)) 1) (make-hash-table))))
                (setf (gethash 1 vvbm) (list (list (cons "NA" 0) (make-hash-table)) (list (cons id 1) (make-hash-table))))
                (setq sva (make-hash-table))
                (setf (gethash 0 sva) (list (list 0) (list 1)))
                (setf (gethash 1 sva) (list (list 0) (list 1)))
                (setq svna (make-hash-table))
                (setf (gethash 0 svna) (list (list 1) (list 0)))
                (setf (gethash 1 svna) (list (list 1) (list 0)))
                (setq vals (make-hash-table))
                (setf (gethash 0 vals) (list 0 1))
                (setf (gethash 1 vals) (list 0 1))
                (setq cards (generate-cpd-cardinalities vvbm))
                (setq steps (generate-cpd-step-sizes cards))
                (setq cids (make-hash-table))
                (setf (gethash 0 cids) cid)
                (setf (gethash 1 cids) (gethash 0 (rule-based-cpd-concept-ids cpd1)))
                (setq cpd2 (make-rule-based-cpd :dependent-id id
                                                :identifiers idents
                                                :dependent-var type
                                                :vars vars
                                                :types types-hash
                                                :concept-ids cids
                                                :qualified-vars (generate-cpd-vars idents vars cids)
                                                :var-value-block-map vvbm
                                                :negated-vvbms (copy-hash-table vvbm)
                                                :set-valued-attributes sva
                                                :set-valued-negated-attributes svna
                                                :lower-approx-var-value-block-map (copy-hash-table vvbm)
                                                :lower-approx-negated-vvbms (copy-hash-table vvbm)
                                                :characteristic-sets (make-hash-table)
                                                :characteristic-sets-values (make-hash-table)
                                                :var-values vals
                                                :cardinalities cards
                                                :step-sizes steps
                                                :rules rules
                                                :concept-blocks (make-hash-table)
                                                :count 1
                                                :lvl lvl))
                (modify-cpd top-lvl-int-cpd cpd2)
                (setq intentions (cons cpd2 intentions))
                (setq intentions (cons cpd1 intentions))))
         intentions)
        (t
         (let (cpd cpd1 dep-id dependent-id identifiers vars type types-hash cids var-value-block-map
               sva svna vals cards steps rules prev-cpd sclause)
           (setq type (symbol-name (car (intention-head int))))
           (setq vars (make-hash-table))
           (setf (gethash 0 vars) "INTENTION")
           (setq types-hash (make-hash-table))
           (setf (gethash 0 types-hash) "INTENTION")
           (setq dependent-id (symbol-name (gensym type)))
           (setq identifiers (make-hash-table :test #'equal))
           (loop
             for idx being the hash-keys of vars
               using (hash-value ele)
             do
                (if (= idx 0) (setq dep-id (symbol-name (gensym ele))))
                (setf (gethash (if (= idx 0) dep-id (symbol-name (gensym ele))) identifiers) idx))
           (setq var-value-block-map (make-hash-table))
           ;;(setf (gethash 0 var-value-map) (list (cons "NA" 0) (cons dependent-id 1)))
           (setf (gethash 0 var-value-block-map) (list (list (cons "NA" 0) (make-hash-table))
                                                       (list (cons (list-to-string (sublis (intention-bindings int) (intention-head int))) 1) (make-hash-table))))
           (setq sva (make-hash-table))
           (setf (gethash 0 sva) (list (list 0) (list 1)))
           (setq svna (make-hash-table))
           (setf (gethash 0 svna) (list (list 1) (list 0)))
           (setq vals (make-hash-table))
           (setf (gethash 0 vals) (list 0 1))
           (setq cards (generate-cpd-cardinalities var-value-block-map))
           (setq steps (generate-cpd-step-sizes cards))
           (setq cids (make-hash-table))
           (setf (gethash 0 cids) "NIL")
           (setq cpd1 (make-rule-based-cpd :dependent-id dep-id
                                           :identifiers identifiers
                                           :dependent-var (gethash 0 vars)
                                           :vars vars
                                           :types types-hash
                                           :concept-ids cids
                                           :qualified-vars (generate-cpd-vars identifiers vars cids)
                                           :var-value-block-map var-value-block-map
                                           :negated-vvbms (copy-hash-table var-value-block-map)
                                           :set-valued-attributes sva
                                           :set-valued-negated-attributes svna
                                           :lower-approx-var-value-block-map (copy-hash-table var-value-block-map)
                                           :lower-approx-negated-vvbms (copy-hash-table var-value-block-map)
                                           :characteristic-sets (make-hash-table)
                                           :characteristic-sets-values (make-hash-table)
                                           :var-values vals
                                           :cardinalities cards
                                           :step-sizes steps
                                           :rules rules
                                           :concept-blocks (make-hash-table)
                                           :count 1
                                           :lvl lvl))
           (setq identifiers (make-hash-table :test #'equal))
           (setf (gethash dependent-id identifiers) 0)
           (setf (gethash (rule-based-cpd-dependent-id cpd1) identifiers) 1)
           (setq vars (make-hash-table))
           (setf (gethash 0 vars) type)
           (setf (gethash 1 vars) type)
           (setq types-hash (make-hash-table))
           (setf (gethash 0 types-hash) "INTENTION")
           (setf (gethash 1 types-hash) "INTENTION")
           (setq cids (make-hash-table))
           (setf (gethash 0 cids) (write-to-string (intention-id int)))
           (setf (gethash 1 cids) (gethash 0 (rule-based-cpd-concept-ids cpd1)))
           (setq var-value-block-map (make-hash-table))
           (setf (gethash 0 var-value-block-map) (list (list (cons "NA" 0) (make-hash-table)) (list (cons (if (car intentions) (rule-based-cpd-dependent-id (car intentions)) "T") 1) (make-hash-table))))
           (setf (gethash 1 var-value-block-map) (list (list (cons "NA" 0) (make-hash-table)) (list (cons (list-to-string (sublis (intention-bindings int) (intention-head int))) 1) (make-hash-table))))
           (setq sva (make-hash-table))
           (setf (gethash 0 sva) (list (list 0) (list 1)))
           (setf (gethash 1 sva) (list (list 0) (list 1)))
           (setq svna (make-hash-table))
           (setf (gethash 0 svna) (list (list 1) (list 0)))
           (setf (gethash 1 svna) (list (list 1) (list 0)))
           (setq vals (make-hash-table))
           (setf (gethash 0 vals) (list 0 1))
           (setf (gethash 1 vals) (list 0 1))
           (setq cards (generate-cpd-cardinalities var-value-block-map))
           (setq steps (generate-cpd-step-sizes cards))
           (setq cpd (make-rule-based-cpd :dependent-id dependent-id
                                          :identifiers identifiers
                                          :dependent-var type
                                          :vars vars
                                          :types types-hash
                                          :concept-ids cids
                                          :qualified-vars (generate-cpd-vars identifiers vars cids)
                                          :var-value-block-map var-value-block-map
                                          :negated-vvbms (copy-hash-table var-value-block-map)
                                          :set-valued-attributes sva
                                          :set-valued-negated-attributes svna
                                          :lower-approx-var-value-block-map (copy-hash-table var-value-block-map)
                                          :lower-approx-negated-vvbms (copy-hash-table var-value-block-map)
                                          :characteristic-sets (make-hash-table)
                                          :characteristic-sets-values (make-hash-table)
                                          :var-values vals
                                          :cardinalities cards
                                          :step-sizes steps
                                          :rules rules
                                          :concept-blocks (make-hash-table)
                                          :count 1
                                          :lvl lvl))
           (setq prev-cpd (car intentions))
           (when prev-cpd
             (modify-cpd prev-cpd cpd))
           (setq sclause (intention-operator int))
	   #|
	   (loop
             for element in (sclause-elements sclause)
             with instantiated and match
             do
                (setq instantiated (mapcar #'(lambda (p) (if (numberp p) p (symbol-name p))) (sublis (intention-bindings int) element)))
                (setq match (find-matching-cpd instantiated sclause elements-cpds (intention-bindings int) 0 (length pstm)))
             when match
               do
                  (update-cpds (rest match) cpd sclause element #'sclause-tests))
           (loop
             for condition in (sclause-conditions sclause)
             with instantiated and match
             do
                (when (eq 'not (car condition))
                  (setq condition (second condition)))
                (setq instantiated (mapcar #'(lambda (p) (if (numberp p) p (symbol-name p))) (sublis (intention-bindings int) condition)))
                (setq match (find-matching-cpd instantiated sclause elements-cpds (intention-bindings int) (length pstm)))
             when match
               do
                  (if (>= (rule-based-cpd-lvl (car (rest match))) (rule-based-cpd-lvl cpd))
                      (setq lvl (+ (rule-based-cpd-lvl (car (rest match))) 1))
                      (setf (rule-based-cpd-lvl cpd) lvl))
                  (update-cpds (rest match) cpd sclause condition #'sclause-tests))
	   |#
           (loop
             for act in (sclause-actions sclause)
             with instantiated and match
             do
                ;;(format t "~%action:~%~S" act)
                (setq instantiated (mapcar #'(lambda (p) (if (or (stringp p) (numberp p)) p (symbol-name p))) (sublis (intention-bindings int) act)))
                ;;(format  t "~%instantiated action:~%~A~%elements-cpds:~%~A" instantiated elements-cpds)
                (setq match (find-matching-cpd-for-action instantiated elements-cpds 0 (length pstm)))
                ;;(format t "~%match: ~A" match)
             when match
               do
                  (update-cpds (rest match) cpd sclause act #'sclause-tests))
           (get-cpds-for-executing-intention (intention-execution-i-parent int) (+ lvl 1) (if (intention-execution-i-parent int) (cons cpd1 (cons cpd intentions)) (cons int (cons cpd1 (cons cpd intentions)))) elements-cpds pstm)))))

#| Convert decompositions to a Bayesion Network |#

;; dcmps = list of references to lower-level decompositions
;; cpds = list of cpds representing state transitions
(defun get-cpds-for-decompositions (dcmps cpds)
  (cond ((null dcmps)
         (let (factors edges)
           (setq factors (finalize-factors (reverse cpds)))
           (setq factors (make-array (length cpds) :initial-contents factors :fill-pointer t))
           (setq edges (make-graph-edges factors))
           (values factors edges)))
        (t
         (let (cpd vars types-hash id dependent-ident vvbm sva svna vals cards steps rules lvl identifiers cids type)
           (setq type "STATE")
           (setq vars (make-hash-table))
           (setf (gethash 0 vars) type)
           (if cpds
               (setf (gethash 1 vars) (rule-based-cpd-dependent-var (car cpds))))
           (setq types-hash (make-hash-table))
           (setf (gethash 0 types-hash) "DECOMPOSITION")
           (if cpds
               (setf (gethash 1 types-hash) (gethash 0 (rule-based-cpd-types (car cpds)))))
           (setq id (episode-id (caar dcmps)))
           (setq identifiers (make-hash-table :test #'equal))
           (setq dependent-ident (symbol-name (gensym (gethash 0 vars))))
           (setf (gethash dependent-ident identifiers) 0)
           (if cpds
               (setf (gethash (rule-based-cpd-dependent-id (car cpds)) identifiers) 1))
           (setq vvbm (make-hash-table))
           (setf (gethash 0 vvbm) (list (list (cons "NA" 0) (make-hash-table)) (list (cons id 1) (make-hash-table))))
           (setq sva (make-hash-table))
           (setf (gethash 0 sva) (list (list 0) (list 1)))
           (setq svna (make-hash-table))
           (setf (gethash 0 svna) (list (list 1) (list 0)))
           (setq vals (make-hash-table))
           (setf (gethash 0 vals) (list 0 1))
           (when cpds
             (setf (gethash 1 vvbm) (gethash 0 (rule-based-cpd-var-value-block-map (car cpds))))
             (setf (gethash 1 sva) (list (list 0) (list 1)))
             (setf (gethash 1 svna) (list (list 1) (list 0)))
             (setf (gethash 1 vals) (list 0 1)))
           (setq lvl 1)
           (setq cards (generate-cpd-cardinalities vvbm))
           (setq steps (generate-cpd-step-sizes cards))
           (setq cids (make-hash-table))
           (setf (gethash 0 cids) "NIL")
           (if cpds
               (setf (gethash 1 cids) "NIL"))
           (setq cpd (make-rule-based-cpd :dependent-id dependent-ident
                                          :identifiers identifiers
                                          :dependent-var type
                                          :vars vars
                                          :types types-hash
                                          :concept-ids cids
                                          :qualified-vars (generate-cpd-vars identifiers vars cids)
                                          :var-value-block-map vvbm
                                          :negated-vvbms (copy-hash-table vvbm)
                                          :set-valued-attributes sva
                                          :set-valued-negated-attributes svna
                                          :lower-approx-var-value-block-map (copy-hash-table vvbm)
                                          :lower-approx-negated-vvbms (copy-hash-table vvbm)
                                          :characteristic-sets (make-hash-table)
                                          :characteristic-sets-values (make-hash-table)
                                          :var-values vals
                                          :cardinalities cards
                                          :step-sizes steps
                                          :rules rules
                                          :concept-blocks (make-hash-table)
                                          :count 1
                                          :lvl lvl))
           (get-cpds-for-decompositions (rest dcmps) (cons cpd cpds))))))

#| Update cpd assignments to reflect the state

;; elements-cpds
(defun update-cpd-assignments (cpds)
  (loop
    for cpd in cpds
    with num-assignments
    do
       (setq num-assignments (reduce #'* (cpd-cardinalities cpd)))
       (setf (gethash (- num-assignments 1) (cpd-assignments cpd)) 1))
  cpds)
|#

#| Construct a Bethe Cluster graph |#

;; factors = array of factors
;; singleton-factors = array of factors with one variable
;; evidence = potentially empty hash-table of variable value pairs
(defun make-bethe-graph-edges (factors singleton-factors evidence)
  (loop
    for i from 0 to (- (array-dimension factors 0) 1)
    nconc (loop
            for j from 0 to (- (array-dimension singleton-factors 0) 1)
            when (gethash (rule-based-cpd-dependent-id (aref singleton-factors j)) (rule-based-cpd-identifiers (aref factors i)))
              collect (cons i (+ j (array-dimension factors 0)))
              and collect (cons (+ j (array-dimension factors 0)) i)) into i-edges
    finally
       (loop ;; make place holders for evidence edges
         for i from 1 to (hash-table-count evidence)
             do (setq i-edges (reverse (cons 0 (reverse i-edges)))))
       (return (make-array (length i-edges) :initial-contents i-edges :fill-pointer t))))

#| Construct a Bayesian Network |#

;; factors = array of factors
(defun make-graph-edges (factors &key (edge-type "-->"))
  (loop
    with edges = (make-hash-table :test #'equal)
    for i from 0 to (- (array-dimension factors 0) 1)
    do
       (loop
         for j from 0 to (- (array-dimension factors 0) 1)
         when (and (not (= i j)) (cpd-child-p (aref factors j) (aref factors i)))
           do
              ;;(format t "~%adding (~d ~d) and (~d ~d) edges." i j j i)
              (multiple-value-bind (hash bool)
                  (gethash i edges)
                (cond (bool
                       (multiple-value-bind (val bool2)
                           (gethash j hash)
                         (declare (ignore val))
                         (cond (bool2
                                ;;(error "(i: ~d, val: ~d), and (val: ~d, i: ~d) already exists. Can't overrwite assignment with (i: ~d, j: ~d) and (j: ~d, i: ~d).~%i: ~A~%val: ~A~%j: ~A" i val val i i j j i (aref factors i) (aref factors val) (aref factors j))
                                (when nil
				  (warn "edge (~d, ~d) already set:~%parent factor (i = ~d):~%~S~%child factor (j = ~d):~%~S" i j i (aref factors i) j (aref factors j))))
                               (t
                                (setf (gethash j hash) edge-type)))))
                      (t
                       (let (row)
                         (setq row (make-hash-table))
                         (setf (gethash j row) edge-type)
                         (setf (gethash i edges) row)))))
              (multiple-value-bind (hash bool)
                  (gethash j edges)
                (cond (bool
                       (multiple-value-bind (val bool2)
                           (gethash i hash)
                         (declare (ignore val))
                         (cond (bool2
                                ;;(error "can't overrwite values")
                                (when nil
				  (warn "edge (~d, ~d) already set" j i)))
                               (t
                                (setf (gethash i hash) edge-type)))))
                      (t
                       (let (row)
                         (setq row (make-hash-table))
                         (setf (gethash i row) edge-type)
                         (setf (gethash j edges) row))))))
    finally
       ;;(print-messages edges)
       ;;(return (make-array (length i-edges) :initial-contents i-edges))
       (return edges)))

#| See if cpd1 is higher level than cpd2 |#

;; cpd1 = conditional probability distribution
;; cpd2 = conditional probability distribution
(defun higher-lvl-cpd (cpd1 cpd2)
  (cond ((> (rule-based-cpd-lvl cpd1) (rule-based-cpd-lvl cpd2)) t)
        ((and (= (rule-based-cpd-lvl cpd1) (rule-based-cpd-lvl cpd2))
              (cpd-child-p cpd2 cpd1)) t)
        (t nil)))

(defun make-empty-graph ()
  (cons (make-array 0) (make-hash-table :test #'equal)))

(defun add-hash-key-value-pair (hash-table key val)
  (setf (gethash key hash-table) val)
  hash-table)

#| Make singleton CPD |#

;; cpd = conditional probability distribution
(defun make-singleton-cpd (cpd &key probability-distribution-p)
  (labels ((make-singleton-prob-distribution (values rules size)
	     (if (null values)
		 (make-array size :initial-contents rules)
		 (make-singleton-prob-distribution (rest values)
						   (cons (make-rule :id (gensym "RULE-")
								    :conditions (add-hash-key-value-pair (make-hash-table :test #'equal)
													 (rule-based-cpd-dependent-id cpd)
													 (car values))
								    :probability (float (if (= (car values) probability-distribution-p) 1 0))
								    :count 1.0)
							 rules)
						   (+ size 1)))))
    (make-rule-based-cpd :dependent-id (rule-based-cpd-dependent-id cpd)
			 :identifiers (add-hash-key-value-pair (make-hash-table :test #'equal) (rule-based-cpd-dependent-id cpd) 0)
			 :dependent-var (rule-based-cpd-dependent-var cpd)
			 :vars (add-hash-key-value-pair (make-hash-table) 0 (rule-based-cpd-dependent-var cpd))
			 :types (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-types cpd)))
			 :concept-ids (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-concept-ids cpd)))
			 :qualified-vars (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-qualified-vars cpd)))
			 :var-value-block-map (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-var-value-block-map cpd)))
			 :negated-vvbms (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-negated-vvbms cpd)))
			 :set-valued-attributes (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-set-valued-attributes cpd)))
			 :set-valued-negated-attributes (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-set-valued-negated-attributes cpd)))
			 :lower-approx-var-value-block-map (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-lower-approx-var-value-block-map cpd)))
			 :lower-approx-negated-vvbms (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-lower-approx-negated-vvbms cpd)))
			 :characteristic-sets (make-hash-table)
			 :characteristic-sets-values (make-hash-table)
			 :var-values (add-hash-key-value-pair (make-hash-table) 0 (gethash 0 (rule-based-cpd-var-values cpd)))
			 :cardinalities (make-array 1 :initial-contents (list (aref (rule-based-cpd-cardinalities cpd) 0)) :fill-pointer t)
			 :step-sizes (make-array 1 :initial-element 1 :fill-pointer t)
			 :rules (if probability-distribution-p
				    (make-singleton-prob-distribution (gethash 0 (rule-based-cpd-var-values cpd)) nil 0)
				    (initialize-rule-potentials factor 1))
			 :singleton-p t
			 :lvl (rule-based-cpd-lvl cpd))))

#| Compile hems program in CPD prior field across the bayesian network |#

;; net = Bayesian network
(defun compile-bn-priors (net)
  (let ((priors (make-hash-table :test #'equal))
	bn)
    (setq bn (copy-bn net))
      ;; update schema domain on all bn cpds that include prior variables
      (loop
	with prior-cpd and bindings = (make-hash-table :test #'equal)
	for cpd1 being the elements of (car bn)
	when (rule-based-cpd-prior cpd1)
	do
	   (setq prior-cpd
		 (aref (car (eval `(compile-program nil
				     c1 = ,(rule-based-cpd-prior cpd1))))
		       0))
	   (setf (rule-based-cpd-singleton-p prior-cpd) t)
	   (when nil
	     (format t "~%prior:~%")
	     (print-cpd prior-cpd))
	   ;; make bindings
	   (setf (gethash (rule-based-cpd-dependent-id prior-cpd) bindings)
		 (rule-based-cpd-dependent-id cpd1))
	   (loop
	     for value in (getf (rule-based-cpd-prior cpd1) :values)
	     do
		(setf (gethash (getf value :value) bindings)
		      (getf value :value)))
	   (setq prior-cpd (subst-cpd prior-cpd cpd1 bindings))
	   (cpd-update-schema-domain cpd1 prior-cpd nil)
	   ;; update the domain of CPD1 in downstream cpds
	   (loop
	     for cpd2 being the elements of (car bn)
	     for i from 0
	     when (and (gethash (rule-based-cpd-dependent-id cpd1)
				(rule-based-cpd-identifiers cpd2))
		       (not (equal (rule-based-cpd-dependent-id cpd1)
				   (rule-based-cpd-dependent-id cpd2))))
	       do
		  (setf (aref (car bn) i)
			(cpd-update-existing-vvms cpd2 bindings (list cpd1)))
		  (when nil
		    (format t "~%updated downstream cpd:~%")
		    (print-cpd (aref (car bn) i))
		    (break)))
	   (setf (gethash (rule-based-cpd-dependent-id cpd1) priors) prior-cpd))
    (values bn priors)))

#| Perfrom probabilistic inference over bayesian network |#

  ;; state = bayesian network of the state represented as a graph of cpds
  ;; evidence = hash-table of variable value pairs
  ;; priors = hash table mapping cpd dependent IDs to their associated priors
;; op = operation to apply to factor (max or +)
;; lr = learning rate
(defun loopy-belief-propagation (state evidence priors op lr)
  (when nil
    (format t "~%evidence listing:~%")
    (maphash #'print-hash-entry evidence))
  (let (factors-list factors singleton-factors-list singleton-factors all-factors-list all-factors edges initial-messages)
    ;;(setq factors-list (coerce (car state) 'list))
    (loop
      for factor being the elements of (car state)
       do
	 (when nil (equal "WORKER_AGENT_REPUTATION" (rule-based-cpd-dependent-var factor))
	   (format t "~%~%prior probabilities for:~%~A~%rules:~%~A" (rule-based-cpd-identifiers factor) (rule-based-cpd-rules factor)))
	 (loop
	   for rule being the elements of (rule-based-cpd-rules factor)
	   do
	      (setf (rule-probability rule) (float (rule-probability rule)))
	      (setf (rule-count rule) (float (rule-count rule))))
	 (setq factors-list (cons factor factors-list))
      finally
	 (setq factors-list (reverse factors-list)))
    (when nil t 
      (format t "~%explicit factors:~%~A~%num elements: ~d" factors-list (array-dimension (car state) 0)))
    (loop
      with singleton
      with dep-var and vars and types-hash and id and dep-id and cid and qvars and vvbm and sva and lower-vvbm and var-values and cards and steps and rules and lvl
      for factor in factors-list
      for i from (length factors-list)
      when (gethash (rule-based-cpd-dependent-id factor) priors)
	do
	   (setq singleton (gethash (rule-based-cpd-dependent-id factor) priors))
      else do
         (setq dep-id (rule-based-cpd-dependent-id factor))
         (setq id (make-hash-table :test #'equal))
         (setf (gethash dep-id id) 0)
         (setq dep-var (rule-based-cpd-dependent-var factor))
         (setq vars (make-hash-table))
         (setf (gethash 0 vars) dep-var)
         (setq types-hash (make-hash-table))
         (setf (gethash 0 types-hash) (gethash 0 (rule-based-cpd-types factor)))
         (setq cid (make-hash-table))
         (setf (gethash 0 cid) (gethash 0 (rule-based-cpd-concept-ids factor)))
         (setq qvars (make-hash-table))
         (setf (gethash 0 qvars) (gethash 0 (rule-based-cpd-qualified-vars factor)))
         (setq vvbm (make-hash-table))
         (setf (gethash 0 vvbm) (gethash 0 (rule-based-cpd-var-value-block-map factor)))
         (setq sva (make-hash-table))
         (setf (gethash 0 sva) (gethash 0 (rule-based-cpd-set-valued-attributes factor)))
         (setq lower-vvbm (make-hash-table))
         (setf (gethash 0 lower-vvbm) (gethash 0 (rule-based-cpd-lower-approx-var-value-block-map factor)))
         (setq var-values (make-hash-table))
         (setf (gethash 0 var-values) (gethash 0 (rule-based-cpd-var-values factor)))
         (setq cards (make-array 1 :initial-contents (list (aref (rule-based-cpd-cardinalities factor) 0)) :fill-pointer t))
         (setq steps (make-array 1 :initial-element 1 :fill-pointer t))
         (setq rules (initialize-rule-potentials factor 1))
         (setq lvl (rule-based-cpd-lvl factor))
         (setq singleton (make-rule-based-cpd :dependent-id dep-id
                                              :identifiers id
                                              :dependent-var dep-var
                                              :vars vars
                                              :types types-hash
                                              :concept-ids cid
                                              :qualified-vars qvars
                                              :var-value-block-map vvbm
                                              :set-valued-attributes sva
                                              :lower-approx-var-value-block-map lower-vvbm
                                              :characteristic-sets (make-hash-table)
                                              :characteristic-sets-values (make-hash-table)
                                              :var-values var-values
                                              :cardinalities cards
                                              :step-sizes steps
                                              :rules rules
                                              :singleton-p t
                                              :lvl lvl))
	 (when nil 
	   (format t "~%factor:~%~S~%singleton:~%~S" factor singleton)
	   (break))
      collect singleton into singletons
      finally (setq singleton-factors-list singletons))
    (when nil t
      (format t "~%singleton factors:~%~S:~%num elements: ~d" singleton-factors-list (length singleton-factors-list)))
    (setq all-factors-list (append factors-list singleton-factors-list))
    (setq factors (make-array (length factors-list) :initial-contents factors-list :fill-pointer t))
    (setq singleton-factors (make-array (length singleton-factors-list)
                                        :initial-contents singleton-factors-list
                                        :fill-pointer t))
    (setq all-factors (make-array (length all-factors-list)
                                  :initial-contents all-factors-list
                                  :fill-pointer t))
    (setq edges (make-bethe-graph-edges factors singleton-factors evidence))
    (loop
      for i from 0 to (- (array-dimension singleton-factors 0) 1)
      with factor and offset = (- (array-dimension edges 0) (hash-table-count evidence))
      with var-probs and index
      with messages = (make-hash-table)
      with rules
      do
	 (setq factor (aref singleton-factors i))
	 (setq var-probs (gethash (rule-based-cpd-dependent-id factor) evidence))
         (when nil
           (format t "~%~%singleton factor:~%~A~%id in evidence?: ~A" (rule-based-cpd-identifiers factor) var-probs))
         (when var-probs
	   (setq rules (make-array (length (gethash 0 (rule-based-cpd-var-values factor)))))
	   (setq index (+ i (array-dimension factors 0)))
	   (setf (aref edges offset) (cons index index))
	   (setq offset (+ offset 1))
	   (loop
	      with msg = factor
	      with value and seen and rule and remaining-prob = 1
	      with j = 0
	      for var-prob in var-probs
	      do
	        (setq value (cdar (assoc (car var-prob)
					 (gethash 0 (rule-based-cpd-var-value-block-map factor))
					 :test #'equal :key #'car)))
		(when nil
		  (format t "~%observed variable: ~A~%var-prob: ~A~%observed variable value: ~A" (rule-based-cpd-dependent-id factor) var-prob value))
		(when value
		  (setq seen (cons value seen))
		  (setq remaining-prob (- remaining-prob (cdr var-prob)))
                  ;;(format t "~%index: ~d~%offset: ~d~%value: ~d" index offset value)
		  (setq rule (make-rule :id (gensym "RULE-")
					:conditions (make-hash-table :test #'equal)
					:probability (cdr var-prob)
					:count 1.0))
		  (setf (gethash (rule-based-cpd-dependent-id factor)
				 (rule-conditions rule))
			(list value))
		  (setf (aref rules j) rule)
		  (when nil (equal (rule-based-cpd-dependent-id factor) "ACTION7337")
			(format t "~%message:~%~S" msg)
			(break))
		  (setq j (+ j 1)))		
	      finally
		(when seen
		  (loop
		     with fill-ins = (set-difference (gethash 0 (rule-based-cpd-var-values factor))
						     seen)
		       with num-fill-ins = (length fill-ins)
		     for val in fill-ins
		     for k from j
		     do
		       (setq rule (make-rule :id (gensym "RULE-")
					     :conditions (make-hash-table :test #'equal)
					     :probability (/ remaining-prob num-fill-ins)
					     :count 1.0))
		       (setf (gethash  (rule-based-cpd-dependent-id factor)
				       (rule-conditions rule))
			     (list val))
		       (setf (aref rules k) rule))
		  (setq msg (make-rule-based-cpd :dependent-id (rule-based-cpd-dependent-id factor)
						 :identifiers (rule-based-cpd-identifiers factor)
						 :dependent-var (rule-based-cpd-dependent-var factor)
						 :vars (rule-based-cpd-vars factor)
						 :types (rule-based-cpd-types factor)
						 :concept-ids (rule-based-cpd-concept-ids factor)
						 :qualified-vars (rule-based-cpd-qualified-vars factor)
						 :cardinalities (rule-based-cpd-cardinalities factor)
						 :var-value-block-map (rule-based-cpd-var-value-block-map factor)
						 :step-sizes (rule-based-cpd-step-sizes factor)
						 :rules rules
						 :singleton-p t
						 :lvl (rule-based-cpd-lvl factor)))
		  (when nil
		    (format t "~%final rules:~%~A" rules))
		  (when (null (gethash index messages))
		    (setf (gethash index messages) (make-hash-table)))
		  (setf (gethash index (gethash index messages)) msg))))
      finally
         (setq initial-messages messages))
    (when nil t
      (format t "~%~%Factors:~%~A~%Edges:~%~A" all-factors edges)
      (format t "~%~%initial messages:~%~A" initial-messages)
      ;;(break)
      )
    (calibrate-factor-graph all-factors op edges initial-messages lr)))

#| Move assignment by 1 |#

;; assignment = current assignment array
;; cardnialities = cardinalities of variable in assignment
;; step-sizes = step sizes for variables
;; j = ...not sure..
(defun generate-next-assignment (assignment cardinalities step-sizes j)
  (loop
    for l from 0 to (- (array-dimension assignment 0) 1)
    do
       (setf (aref assignment l) (+ (aref assignment l) 1))
       (cond ((= (aref assignment l) (aref cardinalities l))
              (setf (aref assignment l) 0)
              (setq j (- j (* (- (aref cardinalities l) 1)
                              (aref step-sizes l)))))
             (t
              (setq j (+ j (aref step-sizes l)))
              (return))))
  (cons assignment j))

(defun get-adjacent-nodes (node graph)
  (loop
     for i from 0 to (- (array-dimension (cdr graph) 0) 1)
     when (= 1 (aref (cdr graph) node i))
     collect i into adjacent
     finally (return adjacent)))

;; node = node in graph
;; visited = array of visited nodes
;; graph = relation or object node in graph
;; objects = list of object indecies
(defun graph-dfs-util (node visited graph objects)
  (setf (aref visited node) t)
  (when (<= (cpd-lvl (aref (car graph) node)) 2)
    (setq objects (reverse (cons (aref (car graph) node) (reverse objects)))))
  (loop
     for i in (get-adjacent-nodes node graph)
     when (not (aref visited i))
     do (setq objects (graph-dfs-util i visited graph objects)))
  objects)

#| Do depth first traverse to the object nodes |#

;; source = node in graph
;; graph = relation node in graph
(defun graph-dfs-from-source (source graph &aux visited)
  (setq visited (make-array (array-dimension (car graph) 0) :initial-element nil :fill-pointer t))
  (graph-dfs-util source visited graph nil))

(defun my-count (a l)
  (cond
   ((null l) 0)
   ((equal a (car l)) (+ 1 (my-count a (cdr l))))
   (t (my-count a (cdr l)))))

#| Obtain subgraph of original graph starting at node source |#

;; source = node in graph
;; graph = relation node in graph
(defun get-objects (source graph)
  (let (factors-list factors edges)
    (setq factors-list (graph-dfs-from-source source graph))
    (setq factors (make-array (length factors-list) :initial-contents factors-list :fill-pointer t))
    (setq edges (make-graph-edges factors))
    (cons factors edges)))

(defun list-difference (list1 list2)
  (cond ((null list2) list1)
        (t (list-difference (remove (car list2) list1 :count 1 :test #'equal) (rest list2)))))

(defun attribute-cpd-p (cpd)
  (or (and (> (hash-table-count (rule-based-cpd-types cpd)) 1) (equal "PERCEPT" (gethash 0 (rule-based-cpd-types cpd))) (equal "PERCEPT" (gethash 1 (rule-based-cpd-types cpd))))
      (and (> (hash-table-count (rule-based-cpd-types cpd)) 1) (equal "ACTION" (gethash 0 (rule-based-cpd-types cpd))) (equal "ACTION" (gethash 1 (rule-based-cpd-types cpd))))))

(defun percept-cpd-p (cpd)
  (and (not (attribute-cpd-p cpd))
       (equal "PERCEPT" (gethash 0 (rule-based-cpd-types cpd)))))

(defun action-cpd-p (cpd)
  (and (equal "ACTION" (gethash 0 (rule-based-cpd-types cpd)))))

;; cpd1 = cpd in p
;; cpd2 = cpd in q
;;bindings from p to q
(defun same-parent-percept (cpd1 cpd2 bindings &aux parent index)
  (loop
    named parent-finder
    for p being the hash-keys of (rule-based-cpd-identifiers cpd1)
      using (hash-value i)
    when (= i 1)
      do (setq parent p)
         (setq index i)
         (return-from parent-finder))
  (equal index (gethash (gethash parent bindings) (rule-based-cpd-identifiers cpd2))))

#| Return true if two cpds have the same set of matched parents 

;; p-cpd = conditional probability distribution in pattern graph
;; q-cpd = conditional probability distribution in base graph
;; p-copy = p-cpd with substitutions for q-cpd
;; p = pattern graph
;; q = base graph
;; assignments = matches so far
(defun same-matched-parents (p-cpd q-cpd p-copy p q assignment heuristic)
  (cond ((and (attribute-cpd-p cpd1) (attribute-cpd-p cpd2))
	 (same-parent-percept p-copy q-cpd))
	(t
	 (loop
	    with p-node and q-node
	    with p-val and q-val
	    for (n1 . n2) in assignment
	    do
	      (setq p-node (aref (car p) n1))
	      (setq p-val (cpd-child-p p-cpd p-node))
	      (setq q-node nil)
	      (setq q-val nil)
	      (when n2
          (setq q-node (aref (car q) n2))
          (setq q-val (cpd-child-p q-cpd q-node)))
	      (cond ((or (and q-node (not p-val) q-val))
               (return-from same-matched-parents nil))
              ((and (eq 'percept (gethash 0 (cpd-types p-cpd)))
                    (eq 'percept (gethash 0 (cpd-types p-node))) p-val (null q-node))
		     (return-from same-matched-parents nil)))
	    finally
	      (return t)))))
|#

#| Return true if two cpds have the same set of matched parents |#

;; p-cpd = conditional probability distribution in pattern graph
;; q-cpd = conditional probability distribution in base graph
;; bindings = variable bindings for matches
;; q-first-bindings = bindings hash table where elements of q are the keys
(defun same-matched-parents (p-cpd q-cpd bindings q-first-bindings heuristic)
  (cond ((and (attribute-cpd-p p-cpd) (attribute-cpd-p q-cpd))
         (same-parent-percept p-cpd q-cpd bindings))
	;; hotbar test is domain-specific heuristic -- I could change the domain language to make sure hotbar percepts are encoded differently, but I don't have time for that right now. I need unique hotbar percepts, so that all of them don't get mashed together in the schema.
	((and (percept-cpd-p p-cpd) (percept-cpd-p q-cpd) (not (equal "HOTBAR" (gethash 0 (rule-based-cpd-vars p-cpd)))))
	 t)
	((or (and (equal "ACTION" (gethash 0 (rule-based-cpd-types p-cpd)))
		  (equal "ACTION" (gethash 0 (rule-based-cpd-types q-cpd))))
	     (and (equal "OBSERVATION" (gethash 0 (rule-based-cpd-types p-cpd)))
		  (equal "OBSERVATION" (gethash 0 (rule-based-cpd-types q-cpd))))
	     (and (equal "STATE" (gethash 0 (rule-based-cpd-types p-cpd)))
		  (equal "STATE" (gethash 0 (rule-based-cpd-types q-cpd)))))
	 t)
        (t
         (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
           (format t "~%~%p-cpd: ~S~%q-cpd: ~S" (rule-based-cpd-identifiers p-cpd) (rule-based-cpd-identifiers q-cpd)))
         (loop
           with p-val and p-match
           for q-val being the hash-keys of (rule-based-cpd-identifiers q-cpd)
             using (hash-value q-idx)
           when (> q-idx 0) do
             (setq p-val nil)
             (setq p-match (gethash q-val q-first-bindings))
             (when p-match
               (if (gethash p-match (rule-based-cpd-identifiers p-cpd))
                   (setq p-val t)))
             (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
               (format t "~%~%p bindings:~%~S~%q first bindings:~%~S" bindings q-first-bindings)
               (format t "~%q-parent: ~S~%p-parent match: ~S~%p-val: ~S" q-val p-match p-val))
             (cond ((and p-match (not p-val) q-val)
                    (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
                      (format t "~%fail. Returning.")
                      (break))
                    (return-from same-matched-parents nil))))
         (loop
           with q-val and q-match and no-matched-parents = t
           for p-val being the hash-keys of (rule-based-cpd-identifiers p-cpd)
             using (hash-value p-idx)
           when (> p-idx 0) do
             (setq q-val nil)
             (setq q-match (gethash p-val bindings))
             (when q-match
               (setq no-matched-parents nil)
               (if (gethash q-match (rule-based-cpd-identifiers q-cpd))
                   (setq q-val t)))
             (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
               (format t "~%~%p bindings:~%~S~%q first bindings:~%~S" bindings q-first-bindings)
               (format t "~%p-parent: ~S~%q-parent match: ~S~%q-val: ~S" p-val q-match q-val))
             (cond ((and q-match p-val (not q-val))
                    (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
                      (format t "~%fail. Returning.")
                      (break))
                    (return-from same-matched-parents nil)))
           finally
              (if (and nil no-matched-parents (> (hash-table-count (rule-based-cpd-identifiers q-cpd)) 1))
                  (return-from same-matched-parents nil)))
         (when nil (and heuristic (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
           (format t "~%success.")
           ;;(break)
	   )
         t)))

#| A set of candidate matches for pnum |#

;; pnum = index of cpd in pattern graph
;; p = pattern graph
;; q = base graph
;; possible-q-candidates = list of potential candidate nodes in base graph
;; bindings = variable bindings for matches
;; q-first-bindings = bindings hash table where elements of q are the keys
(defun candidate-nodes (pnum p q possible-q-candidates bindings q-first-bindings &optional (heuristic nil) &aux p-cpd)
  (setq p-cpd (aref (car p) pnum))
  (when nil (and (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
        (format t "~%~%p-cpd:~%~S" (rule-based-cpd-identifiers p-cpd)))
  (loop
    with q-cpd
    for i in possible-q-candidates
    do
       (setq q-cpd (aref (car q) i))
       (when nil (and (equal (rule-based-cpd-dependent-var p-cpd) "RESOURCE"))
        (format t "~%~%q-cpd:~%~S" (rule-based-cpd-identifiers q-cpd)))
    when (and (not (gethash (rule-based-cpd-dependent-id q-cpd) q-first-bindings))
              (same-matched-parents p-cpd q-cpd bindings q-first-bindings heuristic))
      collect i into candidates
     finally
       (cond ((and (= (hash-table-count (rule-based-cpd-identifiers p-cpd)) 1)
		   candidates)
	      (return candidates)
	      ;;(return (cons nil candidates))
	      )
	     ((and (> (hash-table-count (rule-based-cpd-identifiers p-cpd)) 1)
		   candidates)
	      (return candidates))
	     ((null candidates)
	      (return (list nil))))))

#| Find nodes in q that have the same role as pnum in p |#

;; pnum = index of cpd in pattern graph
;; p = pattern graph
;; q = base graph
;; possible-q-candidates = list of potential candidate nodes in base graph
;; bindings = variable bindings for matches
;; q-first-bindings = bindings hash table where elements of q are the keys
(defun analog-nodes (pnum p q possible-q-candidates bindings q-first-bindings &aux p-cpd)
  (setq p-cpd (aref (car p) pnum))
  (when nil (and (= cycle* 11) (equal (rule-based-cpd-dependent-var p-cpd) "BLOCK"))
        (format t "~%~%p-cpd:~%~S" (rule-based-cpd-identifiers p-cpd)))
  (loop
    with q-cpd
    for i in possible-q-candidates
    do
       (setq q-cpd (aref (car q) i))
       (when nil (and (= cycle* 11) (equal (rule-based-cpd-dependent-var p-cpd) "BLOCK"))
             (format t "~%q-cpd:~%~S" (rule-based-cpd-identifiers q-cpd)))
    when (same-matched-parents p-cpd q-cpd bindings q-first-bindings t)
     collect i into candidates
     and counting i into size
     finally
	(cond (nil (and (= (hash-table-count (rule-based-cpd-identifiers p-cpd)) 1)
		    candidates)
	       (setq candidates (cons nil candidates))
	       (setq size (+ 1 size)))
	      ((null candidates)
	       (setq candidates (list nil))
	       (setq size 1)))
	(return (make-array size :initial-contents candidates :fill-pointer t))))

(defun unzip (lol)
  (loop
     for ele in lol
     collect (car ele) into list1
     collect (cdr ele) into list2
     finally
       (return (values list1 list2))))

#| Find rules whose conditions in the intersection agree |#

;; schema-cpd = conditional probability distribution
;; event-cpd = conditional probability distribution
;; rule = rule to reference (from event-cpd) when finding compatible rules
(defun get-compatible-rules (schema-cpd event-cpd rule &key (find-all t) (check-count nil))
  (loop
    with event-dependent-id-vals = (gethash (rule-based-cpd-dependent-id event-cpd) (rule-conditions rule))
    with match-p = nil
    for schema-rule being the elements of (rule-based-cpd-rules schema-cpd)
    when (and find-all (compatible-rule-p schema-rule rule schema-cpd event-cpd :check-count check-count))
      do
         (setq match-p t)
      and collect schema-rule into compatible-rules
    else when (and (not find-all) (compatible-rule-p schema-rule rule schema-cpd event-cpd :check-count check-count))
      collect schema-rule into compatible-rules and
    do
       (setq match-p t)
       (return-from get-compatible-rules compatible-rules)
    finally
       (when (null match-p)
	 (when nil t
	   (format t "~%~%schema cpd:")
	   (print-cpd schema-cpd)
	   (format t "~%~%episode cpd:")
	   (print-cpd event-cpd)
	   (format t "~%rule to reference (from episode cpd) when finding compatible rules")
	   (print-cpd-rule rule))
         (let (zero-count-rule)
           (cond ((null event-dependent-id-vals)
		  (setq zero-count-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                                   :conditions (copy-hash-table (rule-conditions rule))
						   :probability 0
                                                   :count (if (rule-based-cpd-singleton-p schema-cpd) nil 0)))
                  (loop
                    for i from 0 to (- (aref (rule-based-cpd-cardinalities event-cpd) 0) 1)
                      do
			 (setf (gethash (rule-based-cpd-dependent-id event-cpd)
					(rule-conditions zero-count-rule))
			       (cons i (gethash (rule-based-cpd-dependent-id event-cpd)
						(rule-conditions zero-count-rule))))
                    finally
		       (setq compatible-rules (cons zero-count-rule compatible-rules))))
                 (t
                  (setq zero-count-rule (make-rule :id (symbol-name (gensym "RULE-"))
                                                   :conditions (copy-hash-table (rule-conditions rule))
                                                   :probability 0
                                                   :count (if (rule-based-cpd-singleton-p schema-cpd) nil 0)))
                  (setq compatible-rules (cons zero-count-rule compatible-rules))))))
       (return compatible-rules)))

#| Compute the likelihood that schema generates epsidode |#

;; event = episode cpd
;; cpd = schema cpd
;; forbidden-likelihood-p = flag for whether or not we should calculate likelihood or just return 1
(defun local-likelihood (event cpd &optional forbidden-likelihood-p)
  (cond (cpd
         (cond (forbidden-likelihood-p
                1)
               ((> (hash-table-count (rule-based-cpd-vars event)) (hash-table-count (rule-based-cpd-vars cpd)))
                0)
               (t
                (let (local-likelihood extra-schema-vars)
                  (declare (ignore extra-schema-vars))
                  (setq local-likelihood 1)
                  ;; if the arg has no match, you shouldn't match it..
                  (cond ((not (= (hash-difference-p (rule-based-cpd-identifiers event) (rule-based-cpd-identifiers cpd) event) 0))
                         (setq local-likelihood 0))
                        (t
                         (cond ((> (hash-table-count (rule-based-cpd-vars event)) (hash-table-count (rule-based-cpd-vars cpd)))
                                (setq local-likelihood 0))
                               (t
                                (when nil t
                                  (format t "~%episode cpd:~%~S~%schema cpd:~%~S" event cpd))
                                (loop
                                  with rule and compatible-rules
                                  with m and theta-mle and res
                                  for rule-idx from 0 to (- (array-dimension (rule-based-cpd-rules event) 0) 1)
                                  ;;for count-idx being the hash-keys of (cpd-counts event)
                                  do
                                     (setq rule (aref (rule-based-cpd-rules event) rule-idx))
				     (when (> (rule-probability rule) 0)
				       ;;(setq compatible-rules (list (car (get-compatible-rules cpd event rule))))
                                       (setq compatible-rules (get-compatible-rules cpd event rule :find-all t))
                                       ;; find compatible rules in schema
                                       (cond (compatible-rules
                                              (when nil t
                                                    (format t "~%episode rule:~%~S" rule))
                                              (loop
					        for compatible-rule in compatible-rules
						for denom from 1
						summing (rule-probability compatible-rule) into prob
						finally
						   (setq theta-mle (/ prob denom))
						   (setq m (rule-count rule))
						   (setq res (rationalize (expt theta-mle m)))
						   (setq local-likelihood (* local-likelihood res))
						   (when (= local-likelihood 0)
						     (return-from local-likelihood 0))
						   (when nil t
							 (format t "~%new likelihood: ~d" local-likelihood))
						#|
						do
						   
                                                   (setq theta-mle (rule-probability compatible-rule))
					           (setq m (rule-count rule))
						   (setq res (rationalize (expt theta-mle m)))
                                                   (when nil t
							 (format t "~%compatible rule:~%~S~%theta-mle: ~d~%m: ~d~%res: ~d" compatible-rule theta-mle m res))
                                                   (when (> res 1)
                                                     (error "probability is greater than 1!~%rules:~%~A~%theta-mle: ~d~%m: ~d~%probability: ~d " (rule-based-cpd-rules cpd) theta-mle m (expt theta-mle m)))
                                                   (setq local-likelihood (* local-likelihood res))
						   (when (= local-likelihood 0)
						     (return-from local-likelihood 0))
						   (when nil t
							 (format t "~%new likelihood: ~d" local-likelihood))
						|#))
                                             (t
                                              (return-from local-likelihood 0)))))))))
                  local-likelihood))))
        (t
         0)))

#| Prevent system from penalyzing on cpds that it shouldn't |#

;; var-dif = list of identifiers in schema that are not in episode
;; cpd = schema cpd
;; forbidden-types = cpd types to remove from var-dif
(defun remove-forbidden-identifiers (var-dif cpd forbidden-types)
  (loop
    with new-vars
    for type in forbidden-types
    do
       (loop
         with var-pos and var-type
         for var in var-dif do
           (setq var-pos (gethash var (cpd-identifiers cpd)))
           (setq var-type (gethash var-pos (cpd-types cpd)))
           (when (not (equal type var-type))
             (setq new-vars (cons var-type new-vars))))
    finally
       (if forbidden-types
           (return new-vars)
           (return var-dif))))


#| Cost of matching two cpds |#

;; x = episode cpd
;; y = schema cpd
;; bindings = bindings between episode and schema
;; q-first-bindings = bindings hash table where elements of q are the keys
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun cost (x y bindings q-first-bindings &key (cost-of-nil 2) (bic-p t) (forbidden-types nil))
  (cond ((and (numberp x) (numberp y))
         (abs (- x y)))
        (t ;; we are matching cpds
         (incf calls-to-cost*)
         (let (likelihood var-x-name var-y-name sum-count)
           (setq var-x-name (rule-based-cpd-dependent-var x))
           (when (rule-based-cpd-p y)
             (setq var-y-name (rule-based-cpd-dependent-var y))
             (if (= (rule-based-cpd-count y) 1)
                 (setq sum-count 2)
                 (setq sum-count (rule-based-cpd-count y))))
           (cond ((and (not (null y))
                       (or (not (equal var-x-name var-y-name))
                           #|(not (equal (gethash 0 (rule-based-cpd-concept-ids x))
                                       (gethash 0 (rule-based-cpd-concept-ids y))))|#
			   ))
                  0)
                 ((member (gethash 0 (rule-based-cpd-types x)) forbidden-types :test #'equal)
                  1)
                 (t
                  (let (x-copy discount var-dif kost bic)
                    (cond ((rule-based-cpd-p y)
			   (when nil (and (= cycle* 4) y (equal "BLOCK581" (rule-based-cpd-dependent-id y)))
			     (format t "~%~%p-cpd before subst:~%~S~%q-match:~%~S" x y))
                           (setq x-copy (subst-cpd-2 x y bindings))
			   (when nil (and (= cycle* 4) y (equal "BLOCK581" (rule-based-cpd-dependent-id y)))
			     (format t "~%p-cpd after subst:~%~S" x-copy))
                           (cond ((hash-intersection-p (rule-based-cpd-identifiers x-copy) (rule-based-cpd-identifiers y))
				  (multiple-value-bind (dif forbidden-likelihood)
                                      (hash-difference-p (rule-based-cpd-identifiers y)
                                                       (rule-based-cpd-identifiers x-copy) y forbidden-types)
                                    (setq var-dif dif)
                                    ;;remove identifiers whose cpd types are in the ignore list
                                    ;;(setq var-dif (remove-forbidden-identifiers var-dif y forbidden-types))
				    ;;(setq x-copy (add-na-conditions-to-rules x-copy var-dif))
                                    (setq likelihood (local-likelihood x-copy y forbidden-likelihood))
                                    ;;(when (< bic 0) (setq bic 0))
                                    (when nil
                                      (format t "~%var-dif: ~A~%discount: ~d~%likelihood: ~d~%forbidden likelihood?: ~A~%total penalty: ~d" var-dif discount likelihood forbidden-likelihood (- likelihood discount))))
                                  (cond (bic-p
                                         ;;(setq kost (- 1 (/ (* (rule-based-cpd-lvl x) bic) (rule-based-cpd-lvl x))))
                                         ;;(setq kost (* (rule-based-cpd-lvl x) (- 1 (- likelihood discount))))
					 ;;(setq kost (* (- 1 (/ 1 (rule-based-cpd-lvl x))) likelihood))
					 (setq kost likelihood)
					 (when (< kost 0)
                                           (error "~%negative cost ~d for cpds:~%~A~%and~%~A.~%(cpd-lvl x): ~d~%likelihood: ~d~%discount: ~d~%(log sum-count): ~d~%sum-count: ~d~%length var-dif: ~d" kost x-copy y (rule-based-cpd-lvl x) likelihood discount (log sum-count) sum-count var-dif))
					 (when nil (and (= cycle* 4) y (equal "BLOCK581" (rule-based-cpd-dependent-id y)))
					   (format t "~%likelihood: ~d" kost)
					   (break))
					 kost)
                                        (t
                                         ;;(setq kost (- 1 (/ (* (rule-based-cpd-lvl x) likelihood) (rule-based-cpd-lvl x))))
                                         ;;(setq kost (* (rule-based-cpd-lvl x) (- 1 likelihood)))
					 ;;(setq kost (* (- 1 (/ 1 (rule-based-cpd-lvl x))) likelihood))
					 (setq kost likelihood)
					 (when nil (and (= cycle* 4) y (equal "BLOCK581" (rule-based-cpd-dependent-id y)))
					   (format t "~%likelihood: ~d" kost)
					   (break))
					 kost)))
                                 (t
				  ;;(break "~%here2~%episode cpd:~%~A~%substituted episode:~%~A~%schema cpd:~%~A~%bindings:~%~A~%q-first-bindings:~%~A" x x-copy y bindings q-first-bindings)
                                  ;;most-positive-fixnum
				  (when nil (and (= cycle* 4) y (equal "BLOCK581" (rule-based-cpd-dependent-id y)))
				    (format t "~%likelihood: 0")
				    (break))
				  0)))
                          (t
			   ;;(* (cpd-lvl x) 1)
                           (if (= cost-of-nil 1) (setq cost-of-nil 2))
                           (setq var-dif (hash-table-count (rule-based-cpd-identifiers x)))
                           (setq discount (* (/ (log cost-of-nil) 2) var-dif))
                           (setq likelihood 0)
                           (setq bic 0)
			   0
			   #|
			   (cond (bic-p
                                  ;;(- 1 (/ (* (rule-based-cpd-lvl x) bic) (rule-based-cpd-lvl x)))
                                  (* (rule-based-cpd-lvl x) (- 1 (- likelihood discount))))
                                 (t
                                  ;;(- 1 (/ (* (rule-based-cpd-lvl x) likelihood) (rule-based-cpd-lvl x)))
                                  (* (rule-based-cpd-lvl x) (- 1 likelihood))))
			   |#)))))))))

(defun c (a b bindings p q)
  (cond (b
         #|
         (format t "~%~%edge1: ~A~%edge2: ~A~%cost: ~d" a b (cost (hash-access (cdr p) most-positive-fixnum (list (car a) (cdr a)))
         (hash-access (cdr q) most-positive-fixnum (list (car b) (cdr b)))
         bindings))
         |#
         (cost (hash-access (cdr p) most-positive-fixnum nil (list (car a) (cdr a)))
               (hash-access (cdr q) most-positive-fixnum nil (list (car b) (cdr b)))
               bindings))
        (t
         #|
         (format t "~%~%edge1: ~A~%no b.~%cost: ~d" a (cost (hash-access (cdr p) most-positive-fixnum (list (car a) (cdr a)))
                                                            ;; add the depth of p[a, 0] as penalty
                                                            (+ (hash-access (cdr p) most-positive-fixnum (list (car a) (cdr a))) (cpd-lvl (aref (car p) (car a))))
                                                            bindings)) |#
         (cost (hash-access (cdr p) most-positive-fixnum nil (list (car a) (cdr a)))
               ;; add the depth of p[a, 0] as penalty
               (+ (hash-access (cdr p) most-positive-fixnum nil (list (car a) (cdr a))) (cpd-lvl (aref (car p) (car a))))
               bindings))))

(defun c-prime (e1 e2 bindings p q)
  (* (c e1 (when (and (car e2) (cdr e2)) e2) bindings p q)
     2))

;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun k (n bindings p q cost-of-nil bic-p forbidden-types)
  (let (p-node qp)
    (multiple-value-bind (n1 n2)
        (unzip n)
      (setq p-node (car n1))
      (setq qp (car n2))
      (cost (aref (car p) p-node)
            (if qp (aref (car q) qp) nil)
            bindings
            :cost-of-nil cost-of-nil
            :bic-p bic-p
            :forbidden-types forbidden-types))))

#| Determine total cost for current assignment |#

;; n = assignment so far
;; bindings = variable bindings hash table
;; q-first-bindings = bindings hash table where elements of q are the keys
;; p = pattern graph
;; q = base graph
;; q-dif = difference between number of free variables (nodes with no parents) in q that p doesn't have
;; p-refs-map = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; qp-refs-map = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; cost-of-nil = episode count for matching to nil
(defun g (n bindings q-first-bindings p q q-dif q-m p-refs-map qp-refs-map &key (cost-of-nil 2) (bic-p t) (forbidden-types nil) (score-p nil))
  (loop
     with q-likelihood = 1 and kost
     with num-local-preds = 0
     for (p-node . qp) in n
     do
	(cond ((or (equal "OBSERVATION" (gethash 0 (rule-based-cpd-types (aref (car p) p-node))))
		   (equal "STATE" (gethash 0 (rule-based-cpd-types (aref (car p) p-node)))))	       
	       (let ((p-ref (caar (second (gethash 0 (rule-based-cpd-var-value-block-map (aref (car p) p-node))))))
		     (qp-refs (when qp
				(mapcan #'(lambda (vvbm)
					    (when (not (equal "NA" (caar vvbm)))
					      (list (caar vvbm))))
					(gethash 0 (rule-based-cpd-var-value-block-map (aref (car q) qp)))))))
		 (loop
		   named probber
		   with res and prob
		   with max-res = nil and max-prob = 1/2 and best-qp-ref
		   for qp-ref in qp-refs
		   do
		      (when nil
			(format t "~%~%cpd type: ~S~%p-ref: ~S~%p-episode: ~S~%qp-ref: ~d~%q episode: ~S" (gethash 0 (rule-based-cpd-types (aref (car p) p-node))) p-ref (episode-id (car (gethash p-ref p-refs-map))) qp-ref (episode-id (car (gethash qp-ref qp-refs-map))))
			;;(break)
			)
		      (setq res (get-common-episode-class (car (gethash p-ref p-refs-map)) (car (gethash qp-ref qp-refs-map))))
		      (if res
			  (setq prob (/ (episode-count (car
							(gethash p-ref p-refs-map)))
					(episode-count (car
							(gethash qp-ref qp-refs-map)))))
			  (setq prob 0))
		      (when nil t
			    (format t "~%pq-ref is an ancestor of p-ref?: ~S" (if res t nil))
			    (break))
		      (when (> prob max-prob)
			(setq max-res res)
			(setq max-prob prob)
			(setq best-qp-ref qp-ref))		      
		   finally
		      (cond (max-res
			     (setf (gethash p-ref bindings) best-qp-ref)
			     (setf (gethash best-qp-ref q-first-bindings) p-ref)
			     (setq q-likelihood (* q-likelihood (/ (episode-count (car
										   (gethash p-ref p-refs-map)))
								   (episode-count (car
										   (gethash best-qp-ref qp-refs-map))))))
			    
			     ;;(setq q-likelihood (* q-likelihood max-prob))
			     (setq num-local-preds (+ num-local-preds 1)))
			    (t
			     ;;(setq num-local-preds 0)
			     (setq q-likelihood (* q-likelihood 0)))))))
	      (t
	       (setq kost (cost (aref (car p) p-node)
				(if qp (aref (car q) qp) nil)
				bindings
				q-first-bindings
				:cost-of-nil cost-of-nil
				:bic-p bic-p
				:forbidden-types forbidden-types))
	       (setq q-likelihood (* q-likelihood kost))
	       (when (> kost 0)
		 (setq num-local-preds (+ num-local-preds 1)))))
     finally
	(when nil
	  (format t "~%q-m: ~d~%q-dif: ~d" q-m q-dif))
	(if bic-p
	    (return (values (if score-p
				(- q-likelihood
				   (* (/ (log q-m) 2)
					    q-dif))
				(abs (- 1 (- q-likelihood
					 (* (/ (log q-m) 2)
					    q-dif)))))
			    num-local-preds))
	    (return (values (if score-p
				q-likelihood
				(abs (- 1 q-likelihood)))
			    num-local-preds)))))

;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
;; q-first-bindings = bindings hash table where elements of q are the keys
(defun k-prime (p-node qp n1 n2 bindings q-first-bindings p q cost-of-nil bic-p forbidden-types)
  (cost (aref (car p) p-node)
        (if qp (aref (car q) qp) nil)
        bindings
        q-first-bindings
        :cost-of-nil cost-of-nil
        :bic-p bic-p
        :forbidden-types forbidden-types))

(defun my-min (vals)
  (loop
     with min-ele = (first vals)
     for val in (rest vals)
     do
       (when (< (fourth val) (fourth min-ele))
	 (setq min-ele val))
     finally
       (return min-ele)))

#| Estimate future cost of matches |#

;; m1 = unassigned nodes in pattern
;; n1 = assigned nodes in pattern
;; n2 = base nodes that match to n1 nodes
;; assignment = assignment so far
;; possible-candidates = list of potential candidate nodes in base graph
;; bindings = variable bindings hash table
;; q-first-bindings = bindings hash table where elements of q are the keys
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun a (m1 n1 n2 assignment possible-candidates bindings q-first-bindings p q cost-of-nil bic-p forbidden-types)
  (when (and nil (= cycle* 2) (= (car n1) 8))
    (format t "~%~%estimating future cost"))
  (setq assignment (cons (cons (car n1) (car n2)) assignment))
  (reduce '+ (mapcar #'(lambda (i)
                         (when (and nil (= cycle* 2) (= (car n1) 8))
                           (format t "~%~%unmatched p: ~d~%~A" i (aref (car p) i)))
                         (let (min-ele)
                           (setq min-ele (my-min (mapcar #'(lambda (qmatch)
                                                             (when (and nil (= cycle* 2) (= (car n1) 8))
                                                               (format t "~%qp: ~d~%~A" qmatch (if (null qmatch) nil (aref (car q) qmatch))))
                                                             (let (new-bindings new-q-first-bindings new-assn kost)
                                                               (setq new-bindings (copy-hash-table bindings))
                                                               (setq new-q-first-bindings (copy-hash-table q-first-bindings))
                                                               (when qmatch
                                                                 (setf (gethash (rule-based-cpd-dependent-id (aref (car p) i)) new-bindings) (rule-based-cpd-dependent-id (aref (car q) qmatch)))
                                                                 (setf (gethash (rule-based-cpd-dependent-id (aref (car q) qmatch)) new-q-first-bindings) (rule-based-cpd-dependent-id (aref (car p) i))))
                                                               (setq new-assn (cons (cons i qmatch) assignment))
                                                               (setq kost (k-prime i qmatch n1 n2 new-bindings new-q-first-bindings p q cost-of-nil bic-p forbidden-types))
                                                               (when (and nil (= cycle* 2) (= (car n1) 8))
                                                                 (format t "~%cost of match: ~d" kost))
                                                               (list new-bindings new-q-first-bindings new-assn kost)))
                                                         (candidate-nodes i p q (gethash i possible-candidates) bindings q-first-bindings))))
                           (when (and nil (= cycle* 2) (= (car n1) 8))
                             (format t "~%future assignment:~%~A~%bindings: ~A~%cost: ~d" (second min-ele) (first min-ele) (third min-ele)))
                           (setq bindings (first min-ele))
			   (setq q-first-bindings (second min-ele))
                           (setq assignment (third min-ele))
                           (fourth min-ele)))
                     m1)))

;; cost-of-nil = episode count for matching to nil
;; possible-candidates = list of potential candidate nodes in base graph
(defun h (m1 n1 n2 assignment possible-candidates bindings q-first-bindings p q cost-of-nil bic-p forbidden-types)
  (a m1 n1 n2 assignment possible-candidates bindings q-first-bindings p q cost-of-nil bic-p forbidden-types))

#| Estimate total cost of match from partial match |#

;; n = assignment so far
;; possible-candidates = list of potential candidate nodes in base graph
;; bindings = variable bindings hash table
;; q-first-bindings = bindings hash table where elements of q are the keys
;; m1 = unassigned nodes from pattern
;; p = pattern graph
;; q = base graph
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun f (n possible-candidates bindings q-first-bindings m1 p q cost-of-nil bic-p forbidden-types)
  (let (optimal-cost-to-p)
    (setq optimal-cost-to-p (g n bindings q-first-bindings p q :cost-of-nil cost-of-nil :bic-p bic-p :forbidden-types forbidden-types))
    (when nil t
      (format t "~%optimal cost to p: ~d" optimal-cost-to-p))
    (+ optimal-cost-to-p (h m1 (mapcar 'car n) (mapcar 'cdr n) (rest n) possible-candidates bindings q-first-bindings p q cost-of-nil bic-p forbidden-types))))

#| Map each node in p to a set of possible matches in q |#

;; p = pattern graph
;; q = base graph
(defun get-possible-candidates (p q)
  (loop
    with possible-candidates = (make-hash-table)
    with p-cpd
    for i from 0 to (- (if p (array-dimension (car p) 0) 0) 1)
    do
       (setq p-cpd (aref (car p) i))
       (when nil (and (= cycle* 6) (equal (rule-based-cpd-dependent-var p-cpd) "BLOCK"))
             (format t "~%~%p-cpd:~%~S" (rule-based-cpd-identifiers p-cpd)))
       (loop
         with q-cpd
         for j from 0 to (- (if q (array-dimension (car q) 0) 0) 1)
         do
            (setq q-cpd (aref (car q) j))
            (when (and
		   ;;(equal (gethash 0 (rule-based-cpd-vars p-cpd)) (gethash 0 (rule-based-cpd-vars q-cpd)))
		   (equal (gethash 0 (rule-based-cpd-qualified-vars p-cpd)) (gethash 0 (rule-based-cpd-qualified-vars q-cpd)))
                   (equal (gethash 0 (rule-based-cpd-types p-cpd)) (gethash 0 (rule-based-cpd-types q-cpd))))
              (when nil (and (= cycle* 6) (equal (rule-based-cpd-dependent-var p-cpd) "BLOCK"))
                    (format t "~%possible candidate::~%~S" (rule-based-cpd-identifiers q-cpd))
                    (break))
              (setf (gethash i possible-candidates)
                    (cons j (gethash i possible-candidates)))))
    finally
       (return possible-candidates)))

#| Find largest common subgraph between two graphs |#


;; p = pattern graph
;; q = base graph
;; bic-p = whether to compute bic or likelihood
(defun subgraph-optimal-monomorphism (p q &optional (bic-p t) &aux p-nodes q-nodes)
  ;;(setq p (cons (car p) (make-edge-matrix (cdr p) (array-dimension (car p) 0))))
  ;;(setq q (cons (car q) (make-edge-matrix (cdr q) (array-dimension (car q) 0))))
  (loop
     for i from 0 to (- (array-dimension (car p) 0) 1)
     collect i into nds
     finally (setq p-nodes (make-array (length nds)
				       :initial-contents nds
				       :fill-pointer t)))
  (loop
     for i from 0 to (- (array-dimension (car q) 0) 1)
     collect i into nds
     finally (setq q-nodes (make-array (length nds)
				       :initial-contents nds
				       :fill-pointer t)))
  (let* ((tentative nil)
	 (tentative-bindings nil)
	 (n2 nil)
	 (active-node-list (list (list n2 0 nil)))
	 (p-weight)
	 (q-weight)
	 (intersection-weight)
	 (intersection)
	 (weighted-jaccard-index)
	 (upper most-positive-fixnum))
    (setq p-weight (reduce #'+ (mapcar #'(lambda (node)
					   (cpd-lvl (aref (car p) node)))
				       (coerce p-nodes 'list))))
    (setq q-weight (reduce #'+ (mapcar #'(lambda (node)
					   (cpd-lvl (aref (car q) node)))
				       (coerce q-nodes 'list))))
    ;;(format t "~%~%p:~%~A~%q:~%~A" (car p) (car q))
    (loop
       while active-node-list
       with cur-node and n2-prime and m1 and m2-prime and pnum
       with plist and qlist and p-candidates and bindings
       do
	 ;;cur-node = (list matches cost bindings)
	 (setq cur-node (car active-node-list))
	 (setq active-node-list (rest active-node-list))
	 (setq n2-prime (car cur-node))
	 (setq bindings (third cur-node))
	 (setq plist (coerce p-nodes 'list))
	 (setq qlist (coerce q-nodes 'list))
	 (loop
	    with p-copy = plist
	    for node in (mapcar 'car n2-prime)
	    do
	      (setq p-copy (remove node p-copy))
	    finally (setq pnum (car p-copy)))
	 (loop
	    with p-copy = plist
	    for node in (mapcar 'car n2-prime)
	    do
	      (setq p-copy (remove node p-copy))
	    finally (setq m1 (cdr p-copy)))
	 (loop
	    with q-copy = qlist
	    for node in (mapcar 'cdr n2-prime)
	    do
	      (setq q-copy (remove node q-copy))
	    finally (setq m2-prime q-copy))
	 (setq p-candidates (candidate-nodes pnum p q n2-prime bindings))
	 ;;(format t "~%~%matching node ~d:~%~A~%qps: ~A~%current bindings: ~A" pnum (aref (car p) pnum) p-candidates bindings)
	 (loop
	    for s in p-candidates
	    with qp and res and m2
	    with kost and binding and new-bindings
	    do
	      (setq qp s)
	      ;;(format t "~%candiate match:~%~A" qp)
	      (cond (qp
		     (setq binding (cons (car (cpd-identifiers (aref (car p) pnum)))
					 (car (cpd-identifiers (aref (car q) qp)))))
		     (setq new-bindings (cons binding bindings)))
		    (t
		     (setq new-bindings (cons nil bindings))))
	      (setq n2 (cons (cons pnum qp) n2-prime))
	      (setq m2 (remove qp m2-prime))
	      (setq kost (f n2 new-bindings m1 n2-prime p q))
	      ;; res needs to add the bindings
	      (setq res (list n2 kost new-bindings))
	      (cond (m1
               (setq active-node-list (iter-ins res active-node-list)))
              ((< (second res) upper)
               (setq upper (second res))
               (setq tentative (car res))
               (setq tentative-bindings (third res))))
	      ;;(format t "~%upper: ~d ~%active node list: ~A" upper active-node-list)
      )
	 (setq active-node-list (mapcan #'(lambda (node)
					    (when (< (second node) upper)
					      (list node)))
					active-node-list))
       ;;(format t "~%Active-node-list after pruning: ~A" active-node-list)
	 )
    ;; values solution and optimal cost / jaccard index
    (loop
       for ele in tentative
       collect (cons (aref (car p) (car ele))
		     (if (cdr ele)
			 (aref (car q) (cdr ele))
			 nil)) into tent
       finally
	 (setq tentative tent))
    (setq tentative (sort tentative #'higher-lvl-cpd :key 'car))
    (setq intersection (mapcan #'(lambda (pair)
				   (when (cdr pair)
				     (list pair)))
			       tentative))
    (setq intersection-weight (reduce #'+ (mapcar #'(lambda (pair)
						      (cpd-lvl (car pair)))
						  intersection)))
    (setq weighted-jaccard-index (/ (* intersection-weight (length intersection))
				    (- (+ (* p-weight (array-dimension p-nodes 0))
					  (* q-weight (array-dimension q-nodes 0)))
				       (* intersection-weight (length intersection)))))
    (if (> weighted-jaccard-index 0)
	(values tentative (/ upper weighted-jaccard-index) tentative-bindings)
	(values tentative most-positive-fixnum tentative-bindings))))

#| Find largest common subgraph between two graphs |#

;; p = pattern graph
;; q = base graph
;; bic-p = whether to compute bic or likelihood
(defun subgraph-greedy-monomorphism (p q &key (cost-of-nil 2) (bic-p t) (forbidden-types nil) &aux p-nodes q-nodes)
  (let* ((partial-sol (list nil 0 (make-hash-table) (make-hash-table)))
         (n2 nil)
         (p-weight 0)
         (q-weight 0)
         (possible-candidates (get-possible-candidates p q))
         total-weight
         plist
         qlist)
    (setq p-nodes (make-hash-table))
    (setq q-nodes (make-hash-table))
    (loop
      for i from 0 to (- (if p (array-dimension (car p) 0) 0) 1)
      do
         (setf (gethash (rule-based-cpd-dependent-id (aref (car p) i)) p-nodes) i)
      collect i into p-list
      summing (rule-based-cpd-lvl (aref (car p) i)) into weight
      finally
         (setq plist p-list)
         (setq p-weight weight))
    (loop
      for i from 0 to (- (if q (array-dimension (car q) 0) 0) 1)
      do
         (setf (gethash (rule-based-cpd-dependent-id (aref (car q) i)) q-nodes) i)
      collect i into q-list
      summing (rule-based-cpd-lvl (aref (car q) i)) into weight
      finally
         (setq qlist q-list)
         (setq q-weight weight))
    (setq total-weight (+ p-weight q-weight))
    (when nil t
      (format t "~%~%p:~%~A~%q:~%~A" (car p) (car q)))
    (loop
      with n2-prime and m2-prime
      with m1 = plist and p-candidates and bindings = (make-hash-table) and q-first-bindings = (make-hash-table)
      for pnum from 0 to (- (length plist) 1)
      do
         ;;partial-sol = (list matches cost bindings q-first-bindings)
         (setq n2-prime (car partial-sol))
         (if (third partial-sol)
             (setq bindings (third partial-sol)))
         (if (fourth partial-sol)
             (setq q-first-bindings (fourth partial-sol)))
         (when nil t
               (format t "~%~%partial assignments: ~A~%partial bindings: ~A" n2-prime bindings))
         (setq m1 (remove pnum m1))
         (loop
           with q-copy = qlist
           for node in (mapcar 'cdr n2-prime)
           do
              (setq q-copy (remove node q-copy))
           finally (setq m2-prime q-copy))
         (setq p-candidates (candidate-nodes pnum p q (gethash pnum possible-candidates) bindings q-first-bindings))
         (when nil t
           (format t "~%matching node ~d:~%~A~%qps: ~A" pnum (aref (car p) pnum) p-candidates))
         (loop
           for s in p-candidates
           with qp and res and m2
           with kost and new-bindings and new-q-first-bindings
           do
              (setq new-bindings (copy-hash-table bindings))
              (setq new-q-first-bindings (copy-hash-table q-first-bindings))
              (setq qp s)
              (cond (qp
                     (when nil t
                       (format t "~%~%candidate match: ~A~%~A" qp (aref (car q) qp)))
                     (setf (gethash (rule-based-cpd-dependent-id (aref (car p) pnum)) new-bindings)
                           (rule-based-cpd-dependent-id (aref (car q) qp)))
                     (setf (gethash (rule-based-cpd-dependent-id (aref (car q) qp)) new-q-first-bindings) (rule-based-cpd-dependent-id (aref (car p) pnum))))
                    (t
                     (when nil t
                           (format t "~%candidate match: ~A" qp))))
              (when nil t
                    (format t "~%current bindings: ~A~%current q-first-bindings: ~A" new-bindings new-q-first-bindings))
              (setq n2 (cons (cons pnum qp) n2-prime))
              (setq m2 (remove qp m2-prime))
              (setq kost (f n2 possible-candidates new-bindings new-q-first-bindings m1 p q cost-of-nil bic-p forbidden-types))
              ;; res needs to add the bindings
              (setq res (list n2 kost new-bindings new-q-first-bindings))
           collect res into pool
           finally
              (loop
                for assn in pool
                with min = (car pool)
                do
                   (cond ((< (second assn) (second min))
                          (setq min assn))
                         ((and (= (second assn) (second min))
                               (eq nil (cdar (first min))))
                          (setq min assn)))
                finally
                   (setq partial-sol min)))
         (when nil t
               (format t "~%partial solution: ~A~%cost so far: ~d" (first partial-sol) (second partial-sol))))
    (multiple-value-bind (sol weighted-cost bindings q-first-bindings cost)
        (if bic-p 
            (get-cost (make-array (if p (array-dimension (car p) 0) 0) :initial-contents (reverse (first partial-sol)) :fill-pointer t)
                      (if (third partial-sol) (third partial-sol) (make-hash-table))
                      (if (fourth partial-sol) (fourth partial-sol) (make-hash-table))
                      p q #|get-cost needs q-dif and q-m arguments|# p-nodes q-nodes cost-of-nil bic-p forbidden-types)
            (values (first partial-sol) (second partial-sol) (third partial-sol) (fourth partial-sol) (second partial-sol)))
      (loop
        for ele being the elements of sol
        collect (cons (aref (car p) (car ele))
                      (if (cdr ele)
                          (aref (car q) (cdr ele))
                          nil)) into solution
        finally
           (setq sol solution))
      (values sol (make-na-matches-for-unmatched-cpds p q sol  bindings q-first-bindings p-nodes) weighted-cost bindings q-first-bindings cost))))

#| For each unmatched cpd in base graph, add a corresponding CPD that takes on NA with probability 1 |#

;; p = pattern-graph
;; q = base graph
;; matches = array mapping from pattern to base
;; bindings = variable bindings for matches
;; q-first-bindings = bindings hash table where elements of q are the keys
;; p-nodes = nodes in p in list form
(defun make-na-matches-for-unmatched-cpds (p q matches bindings q-first-bindings p-nodes)
  (loop
    with matched-qs = (map 'list #'cdr matches)
    for i from 0 to (- (if q (array-dimension (car q) 0) 0) 1)
    when (not (member i matched-qs :test #'equalp))
      collect i into unmatched
    finally
       (return
         (loop
           for unmatched-q in unmatched
           with q-cpd
           with idents and vars and types and vvbm and nvvbm and sva and svna and vals
           with cards and steps and cids and qvars and assn and dummy-match and rules
           do
              (setq q-cpd (aref (car q) unmatched-q))
              (setq idents (make-hash-table :test #'equal))
              (setq vars (make-hash-table))
              (setq types (make-hash-table))
              (setq vvbm (make-hash-table))
              (setq sva (make-hash-table))
              (setq vals (make-hash-table))
              (setq cids (make-hash-table))
              (setq qvars (make-hash-table))
              (loop
                with i = 1 and p-match and zeros = (list 0)
                for parent being the hash-keys of (rule-based-cpd-identifiers q-cpd)
                  using (hash-value idx)
                do
                   (cond ((= idx 0)
                          (setf (gethash (rule-based-cpd-dependent-id q-cpd) idents) idx)
                          (setf (gethash idx vars) (gethash idx (rule-based-cpd-vars q-cpd)))
                          (setf (gethash idx types) (gethash idx (rule-based-cpd-types q-cpd)))
                          (setf (gethash idx vvbm) (gethash idx (rule-based-cpd-var-value-block-map q-cpd)))
                          (setf (gethash idx sva) (gethash idx (rule-based-cpd-set-valued-attributes q-cpd)))
                          (setf (gethash idx vals) (gethash idx (rule-based-cpd-var-values q-cpd)))
                          (setf (gethash idx cids) (gethash idx (rule-based-cpd-concept-ids q-cpd)))
                          (setf (gethash idx qvars) (gethash idx (rule-based-cpd-qualified-vars q-cpd))))
                         (t
                          (setq p-match nil)
                          (when (gethash parent q-first-bindings)
                            (setq p-match (aref (car p) (gethash (gethash parent q-first-bindings) p-nodes))))
                          (setf (gethash parent idents) i)
                          (setf (gethash i vars) (gethash idx (rule-based-cpd-vars q-cpd)))
                          (setf (gethash i types) (gethash idx (rule-based-cpd-types q-cpd)))
                          (setf (gethash i cids) (gethash idx (rule-based-cpd-concept-ids q-cpd)))
                          (setf (gethash i qvars) (gethash idx (rule-based-cpd-qualified-vars q-cpd)))
                          (cond (p-match
                                 (setf (gethash i vvbm) (gethash 0 (rule-based-cpd-var-value-block-map p-match)))
                                 (setf (gethash i sva) (gethash 0 (rule-based-cpd-set-valued-attributes p-match)))
                                 (setf (gethash i vals) (gethash 0 (rule-based-cpd-var-values p-match))))
                                (t
                                 (setf (gethash i vvbm) (gethash idx (rule-based-cpd-var-value-block-map q-cpd)))
                                 (setf (gethash i sva) (gethash idx (rule-based-cpd-set-valued-attributes q-cpd)))
                                 (setf (gethash i vals) (gethash idx (rule-based-cpd-var-values q-cpd)))
                                 (setq zeros (cons i zeros))))
                          (setq i (+ i 1))))
                finally
                   (setq assn (make-array (hash-table-count idents) :initial-element 1))
                   (loop
                     for zero in zeros
                     do
                        (setf (aref assn zero) 0))
                   ;; make hash table for assignment
                   ;;(setq cards (make-array (hash-table-count idents) :initial-element 2))
                   (setq cards (get-var-cardinalities vvbm))
                   (setq steps (generate-cpd-step-sizes cards)))
              (setq dummy-match
                    (make-rule-based-cpd
                     :dependent-id (rule-based-cpd-dependent-id q-cpd)
                     :identifiers idents
                     :dependent-var (rule-based-cpd-dependent-var q-cpd)
                     :vars vars
                     :types types
                     :concept-ids cids
                     :qualified-vars qvars
                     :var-value-block-map vvbm
                     :set-valued-attributes sva
                     :lower-approx-var-value-block-map (copy-hash-table vvbm)
                     :characteristic-sets (make-hash-table)
                     :characteristic-sets-values (make-hash-table)
                     :var-values vals
                     :cardinalities cards
                     :step-sizes steps
		     :prior (rule-based-cpd-prior q-cpd)
                     :count 1
                     :lvl (rule-based-cpd-lvl q-cpd)))
              (setq rules (make-initial-rules dummy-match assn))
              (loop
                with ident = (rule-based-cpd-dependent-id dummy-match)
                with rules-list = (reverse (coerce rules 'list))
                with block-num = (array-dimension rules 0)
                for rule being the elements of rules
                when (not (= (car (gethash ident (rule-conditions rule))) 0))
                  do
                     (loop
                       with cp-rule
                       for val in (cdr (gethash 0 vals))
                       do
                          (setq cp-rule (copy-cpd-rule rule))
                          (setf (rule-block cp-rule) (make-hash-table))
                          (setf (gethash block-num (rule-block cp-rule)) block-num)
                          (setf (rule-certain-block cp-rule) (make-hash-table))
                          (setf (gethash block-num (rule-certain-block cp-rule)) block-num)
                          (setf (gethash ident (rule-conditions cp-rule)) (list val))
                          (when (notany #'(lambda (r) (same-rule-p cp-rule r dummy-match dummy-match)) rules-list)
                            (setq rules-list (cons cp-rule rules-list))
                            (setq block-num (+ block-num 1))))
                finally
                   (setq rules (make-array block-num :initial-contents (reverse rules-list))))
              (when nil (and (equal "CLOSE_HAND2405" (rule-based-cpd-dependent-id dummy-match)))
                    (format t "~%unmatched q-cpd:~%~S~%dummy match:~%~S~%assignment with probability 1:~%~S~%initial rules:~%~S" q-cpd dummy-match assn rules)
                    (break))
              (setq dummy-match (update-cpd-rules dummy-match rules :check-uniqueness t))
           collect (cons (subst-cpd dummy-match q-cpd bindings) unmatched-q) into no-matches
           finally
              (return no-matches)))))

#| Generate hash key for candidate solution |#

;; matches = current structure mapping cast as array 
(defun key-from-matches (matches)
  (let ((key-str ""))
    (map nil #'(lambda (match)
                 (setq key-str (concatenate 'string key-str (write-to-string (car match))))
                 (when (cdr match)
                   (setq key-str (concatenate 'string key-str (write-to-string (cdr match))))))
         matches)
    key-str))

#| Compute the cost of a solution |#

;; solution = structure mapping from pattern to base graph
;; bindings = array of variable bindings
;; q-first-bindings = bindings hash table where elements of q are the keys
;; p-nodes = nodes in p in list form
;; q-nodes = nodes in q in list form
;; q-dif = difference between number of free variables (nodes with no parents) in q that p doesn't have
;; q-m = number of summarized in q
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
;; p-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; q-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
(defun get-cost (solution p-backlinks q-backlinks bindings q-first-bindings p q q-dif q-m p-nodes q-nodes cost-of-nil bic-p forbidden-types &key (sol-cost-map) (score-p nil))
  (let (cost num-local-preds key previous-cost prev-num-local-preds)
    (setq key (key-from-matches solution))
    (when sol-cost-map
      (let ((res (gethash key sol-cost-map)))
	(setq previous-cost (car res))
	(setq prev-num-local-preds (cdr res))))
    (cond (previous-cost
           (values solution previous-cost bindings q-first-bindings prev-num-local-preds))
          (t
	   (multiple-value-setq (cost num-local-preds)
             (g (coerce solution 'list)
                bindings
                q-first-bindings
                p q q-dif q-m
		p-backlinks q-backlinks
                :cost-of-nil cost-of-nil
                :bic-p bic-p
                :forbidden-types forbidden-types
		:score-p score-p))
           (when sol-cost-map
             (setf (gethash key sol-cost-map) (cons cost num-local-preds)))
           (values solution cost bindings q-first-bindings num-local-preds)))))

#| Find largest common subgraph between two graphs |#

;; p = pattern graph
;; q = base graph
;; p-nodes = nodes in p in list form
;; p-nodes = nodes in q in list form
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun greedy-assignment (p q &key (cost-of-nil 2) (bic-p t) (forbidden-types nil))
  (let* ((partial-sol (list nil 0 (make-hash-table) (make-hash-table)))
         (n2 nil)
         (possible-candidates nil))
    (when nil t
      (format t "~%~%p:~%~A~%q:~%~A" (car p) (car q)))
    (setq possible-candidates (get-possible-candidates p q))
    (loop
      with n2-prime
      with p-candidates and bindings = (make-hash-table :test #'equal) and q-first-bindings = (make-hash-table :test #'equal)
      for pnum from 0 to (- (if p (array-dimension (car p) 0) 0) 1)
      do
         ;;partial-sol = (list matches cost bindings q-first-bindings)
         (setq n2-prime (car partial-sol))
         (if (third partial-sol)
             (setq bindings (third partial-sol)))
         (if (fourth partial-sol)
             (setq q-first-bindings (fourth partial-sol)))
         (when nil (and (= cycle* 6))
           (format t "~%~%pnum: ~d~%p-identifiers: ~S" pnum (rule-based-cpd-identifiers (aref (car p) pnum))))
         (setq p-candidates (candidate-nodes pnum p q (gethash pnum possible-candidates) bindings q-first-bindings))
         (when nil (and (= cycle* 6))
           (format t "~%candidate matches:~%~S~%partial assignments: ~A~%partial bindings: ~A"  p-candidates n2-prime bindings)
           (break))
         (when nil t
               (format t "~%matching node ~d:~%~A~%qps: ~A" pnum (aref (car p) pnum) p-candidates))
         (loop
           for s in p-candidates
           with qp and res and best-res = (list nil most-positive-fixnum)
           with kost and new-bindings and new-q-first-bindings
           do
              (setq new-bindings (copy-hash-table bindings))
              (setq new-q-first-bindings (copy-hash-table q-first-bindings))
              (setq qp s)
              (cond (qp
                     (when nil (and (= cycle* 6))
                           (format t "~%   candidate match: ~A~%   ~A" qp (rule-based-cpd-identifiers (aref (car q) qp))))
                     (setf (gethash (rule-based-cpd-dependent-id (aref (car p) pnum)) new-bindings)
                           (rule-based-cpd-dependent-id (aref (car q) qp)))
                     (setf (gethash (rule-based-cpd-dependent-id (aref (car q) qp)) new-q-first-bindings)
                           (rule-based-cpd-dependent-id (aref (car p) pnum))))
                    (t
                     (when nil (and (= cycle* 6))
                           (format t "~%   candidate match: ~A" qp))))
              (when nil t
                    (format t "~%current bindings: ~A~%current q-first-bindings: ~A" new-bindings new-q-first-bindings))
              (setq n2 (cons (cons pnum qp) n2-prime))
              (setq kost (cost (aref (car p) pnum) (if qp (aref (car q) qp)) new-bindings new-q-first-bindings :cost-of-nil cost-of-nil :bic-p bic-p :forbidden-types forbidden-types))
              (when nil t
                    (format t "~%cost of match: ~d" kost))
              ;; res needs to add the bindings
              (setq res (list n2 (+ kost (second partial-sol)) new-bindings new-q-first-bindings))
           if (< (second res) (second best-res)) do
             (setq best-res res)
           else if (and (= (second res) (second best-res)) (eq nil (cdar (first best-res)))) do
             (setq best-res res)
           finally
              (setq partial-sol best-res))
         (when nil (and (= cycle* 6))
           (format t "~%   partial solution: ~A~%   cost so far: ~d" (first partial-sol) (second partial-sol))
           (break))
      finally
         (return (values (make-array (length (first partial-sol)) :initial-contents (reverse (first partial-sol)))
			 (g (first partial-sol)
			    (third partial-sol)
			    (fourth partial-sol)
			    p q
			    :cost-of-nil cost-of-nil
			    :bic-p bic-p
			    :forbidden-types forbidden-types)
			 #|(compute-weighted-cost (if p (/ (second partial-sol) (array-dimension (car p) 0)) (second partial-sol)) p q (third partial-sol) (fourth partial-sol) cost-of-nil bic-p forbidden-types)|#
                         (third partial-sol) (fourth partial-sol)
                         possible-candidates)))))

;; node = node in pattern with parents to check
;; visited-hash = hash table of nodes we have visted
;; p-nodes = hash table of p node identifiers and their associated indeces
(defun all-parents-visited? (node visited-hash p p-nodes)
  (let (cpd)
    (setq cpd (aref (car p) node))
    (loop
      for ident being the hash-keys of (rule-based-cpd-identifiers cpd)
      using (hash-value pos)
      when (> pos 0) do
        (if (not (gethash (gethash ident p-nodes) visited-hash))
            (return-from all-parents-visited? nil))))
  t)

#| Randomly swap two assignments in matches |#

;; pnum = index of cpd in pattern graph
;; q-match-parent = index of q-match parent in base graph
;; matches = array mapping from pattern to base
;; bindings = array bindings from pattern to base
;; q-first-bindings = bindings hash table where elements of q are the keys
;; possible-candidates = list of potential candidate nodes in base graph
;; p = pattern graph
;; q = base graph
;; p-nodes = nodes in p in list form
;; p-nodes = nodes in q in list form
(defun random-swap (top-lvl-nodes matches bindings q-first-bindings possible-candidates p q p-nodes q-nodes)
  (loop
    with neighbors and match and q-match and new-qnum and pnum-prime and match-prime and candidates
    with pnum and queue = (shuffle (copy-list top-lvl-nodes)) and visited-hash = (make-hash-table)
    while (and p queue) do
      (setq pnum (car queue))
      (setq queue (rest queue))
      (setq new-qnum nil)
      (when (not (gethash pnum visited-hash))
        (setq match (aref matches pnum))
        (setq q-match (cdr match))
        (setq pnum-prime nil)
        (when nil (and (or (= pnum 27)
				    (= pnum 17)
				    (= pnum 22))) nil t
          (format t "~%~%new iteration~%pnum: ~d~%~A~%qp: ~d~%~A~%"
                  pnum
                  (aref (car p) pnum)
                  q-match
                  (if q-match (aref (car q) q-match) nil)))
        ;; remove pnum binding from bindings and matches
        (remhash (rule-based-cpd-dependent-id (aref (car p) (car match))) bindings)
        (when q-match
          ;;(setq q-first-bindings (fset:less q-first-bindings (cpd-dependent-id (aref (car q) q-match))))
          (remhash (rule-based-cpd-dependent-id (aref (car q) q-match)) q-first-bindings))
        (when nil (and (or (= pnum 27)
				    (= pnum 17)
				    (= pnum 22))) nil t
          (format t "~%reduced bindings: ~A~%reduced q-first-bindings: ~A" bindings q-first-bindings))
        ;;(setq candidates (analog-nodes pnum p q (gethash pnum possible-candidates) bindings q-first-bindings))
	(setq candidates (candidate-nodes pnum p q (gethash pnum possible-candidates) bindings q-first-bindings t))
	(setq candidates (make-array (length candidates) :initial-contents candidates))
        (when nil (and (or (= pnum 27)
				    (= pnum 17)
				    (= pnum 22))) nil t
          (format t "~%pnum: ~d~%candidates: ~A" pnum candidates))
        ;; swap pnode with random candidate
        (setq new-qnum (aref candidates (random (array-dimension candidates 0))))
        (when nil (and (or (= pnum 27)
				    (= pnum 17)
				    (= pnum 22))) nil t
          (format t "~%matching ~A~%~A~%with ~A~%~A~%current matches:~%~A~%bindings:~%~A" (car match) (aref (car p) (car match)) new-qnum (if new-qnum (aref (car q) new-qnum) nil) matches bindings))
        (setq match (cons (car match) new-qnum))
        (when new-qnum
          (setq pnum-prime (gethash (gethash (rule-based-cpd-dependent-id (aref (car q) new-qnum)) q-first-bindings) p-nodes))
          (when pnum-prime
            (remhash (rule-based-cpd-dependent-id (aref (car p) pnum-prime)) bindings))
          ;; change bindings
          (setf (gethash (rule-based-cpd-dependent-id (aref (car p) (car match))) bindings) (rule-based-cpd-dependent-id (aref (car q) new-qnum)))
          (setf (gethash (rule-based-cpd-dependent-id (aref (car q) new-qnum)) q-first-bindings) (rule-based-cpd-dependent-id (aref (car p) (car match)))))
        (setf (aref matches pnum) match)
        (when pnum-prime
          (when nil (and (or (= pnum 27)
				    (= pnum 17)
				    (= pnum 22))) nil t
            (format t "~%matching ~A~%~A~%with ~A~%~A~%current matches:~%~A~%bindings:~%~A" pnum-prime (aref (car p) pnum-prime) q-match (if q-match (aref (car q) q-match) nil) matches bindings))
          (setq match-prime (cons pnum-prime q-match))
          (setf (aref matches pnum-prime) match-prime)
	  (setf (gethash pnum-prime visited-hash) t)
	  (when q-match
            (setf (gethash (rule-based-cpd-dependent-id (aref (car p) pnum-prime)) bindings) (rule-based-cpd-dependent-id (aref (car q) q-match)))
            (setf (gethash (rule-based-cpd-dependent-id (aref (car q) q-match)) q-first-bindings) (rule-based-cpd-dependent-id (aref (car p) pnum-prime)))))
        (setf (gethash pnum visited-hash) t))
      (multiple-value-bind (val bool)
          (gethash pnum (cdr p))
        (if bool
            (setq neighbors val)
            (setq neighbors (make-hash-table))))
      (loop
        for nbr being the hash-keys of neighbors
        when (higher-lvl-cpd (aref (car p) pnum) (aref (car p) nbr))
          do
             (when (and (not (gethash nbr visited-hash))
                        (all-parents-visited? nbr visited-hash p p-nodes))
               (setq queue (reverse (cons nbr (reverse queue))))))
    finally
       (return (values matches bindings q-first-bindings))))

#| Randomly select to make uphill moves according to probability |#

;; default = best current move
;; alternate = known uphill move
;; probability = probability of making uphill move
(defun prob-select (default alternate probability)
  (let (number sample)
    (when (null probability)
      (setq probability 0.0))
    (setq number (* probability 100))
    (setq sample (random 100.0))
    (when nil (and (= cycle* 6))
      (format t "~%probability of uphill move: ~d~%sample: ~d" number sample))
    (cond ((<= sample number)
           (when nil (and (= cycle* 6))
             (format t "~%taking uphill move...")
             ;;(break)
             )
           alternate)
          (t
           (when nil t
             (format t "~%keeping old value."))
           default))))

#| Randomly choose neighboring state |#

;; matches = current structure mapping cast as array
;; bindings = bindings for structure mapping
;; q-first-bindings = bindings hash table where elements of q are the keys
;; p = pattern graph
;; q = base graph
;; p-nodes = nodes in p in list form
;; p-nodes = nodes in q in list form
(defun random-neighbor (matches bindings q-first-bindings p q p-nodes q-nodes &aux pnum)
  (setq pnum (random (array-dimension (car p) 0)))
  (when nil
    (format t "~%swapping node ~d~%~A" pnum (aref (car p) pnum)))
  (random-swap pnum matches bindings q-first-bindings p q p-nodes q-nodes))

#| Randomly choose neighboring state |#

;; matches = current structure mapping cast as array
;; bindings = bindings for structure mapping
;; q-first-bindings = bindings hash table where elements of q are the keys
;; possible-candidates = list of potential candidate nodes in base graph
;; p = pattern graph
;; q = base graph
;; p-nodes = nodes in p in list form
;; p-nodes = nodes in q in list form
;; pnum = index to swap
(defun linear-neighbor (matches bindings q-first-bindings possible-candidates p q p-nodes q-nodes top-lvl-nodes)
  (random-swap top-lvl-nodes matches bindings q-first-bindings possible-candidates p q p-nodes q-nodes))

#| Determine how fast we bring the system to a low energy state |#

;; time = time of cooling schedule
;; big-t = initial temperature of the system
(defun cooling-schedule (time big-t &optional (alpha .80))
  (rationalize (* big-t (expt alpha time))))

#| Determines if new match is current best. Returns boolean.

;; next = new match
;; best-solution = current best solution so far
(defun better-random-match? (next best-solution)
  (cond ((< (second next) (second best-solution))
	 t)
        ((and (= (second next) (second best-solution))
              (> (hash-table-count (third next)) (hash-table-count (third best-solution))))
	 t)
	((and (= (second next) (second best-solution))
	      (= (hash-table-count (third next)) (hash-table-count (third best-solution)))
	      (< (sixth next) (sixth best-solution)))
	 t)
	((and (= (second next) (second best-solution))
	      (= (hash-table-count (third next)) (hash-table-count (third best-solution)))
	      (= (sixth next) (sixth best-solution))
	      (>= (fifth next) (fifth best-solution)))
	 t)))
|#

#| Determines if new match is current best. Returns boolean |#

;; next = new match
;; best-solution = current best solution so far
(defun better-random-match? (next best-solution)
  (cond ((< (second next) (second best-solution))
	 t)
	((and (= (second next) (second best-solution))
	      (> (if (> (sixth next) 0)
		     (/ (hash-table-count (third next)) (sixth next))
		     0)
		 (if (> (sixth best-solution) 0)
		     (/ (hash-table-count (third best-solution)) (sixth best-solution))
		     0)))
	 t)
	((and (= (second next) (second best-solution))
	      (= (if (> (sixth next) 0)
		     (/ (hash-table-count (third next)) (sixth next))
		     0)
		 (if (> (sixth best-solution) 0)
		     (/ (hash-table-count (third best-solution)) (sixth best-solution))
		     0))
	      (< (sixth next) (sixth best-solution)))
	 t)
	((and (= (second next) (second best-solution))
	      (= (if (> (sixth next) 0)
		     (/ (hash-table-count (third next)) (sixth next))
		     0)
		 (if (> (sixth best-solution) 0)
		     (/ (hash-table-count (third best-solution)) (sixth best-solution))
		     0))
	      (= (sixth next) (sixth best-solution))
	      (>= (fifth next) (fifth best-solution)))
	 t)))

#| Initialize empty set of mappings |#

;; p = pattern graph
(defun make-nil-mappings (p)
  (make-array (array-dimension (car p) 0)
	      :initial-contents (loop
				  for i from 0
				  for cpd being the elements of (car p)
				  collect (cons i nil) into res
				  finally
				     (return res))))

#| Optimize structure mapping between two graphs

;; p = pattern graph
;; q = base graph
;; current = best current match
;; possible-candidates = list of potential candidate nodes in base graph
;; sol-cost-map = map of previous solutions
;; start-temp = initial temperature
;; end-temp = stopping temperature
;; alpha = discount for cooling schedule
;; p-nodes = list of nodes in p
;; q-nodes = list of nodes in q
;; q-dif = difference between number of free variables (nodes with no parents) in q that p doesn't have
;; q-m = number of summarized in q
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun simulated-annealing (p q current possible-candidates sol-cost-map start-temp end-temp alpha top-lvl-nodes p-nodes q-nodes q-dif q-m cost-of-nil bic-p forbidden-types)
  (loop
    named looper
    with big-t = start-temp and smallest-float = end-temp and next and delta-e and delta-m
    with best-solution = current
    for time from 0 do
      (setq big-t (cooling-schedule time start-temp alpha))
    when (<= big-t smallest-float) do
      ;;(break)
      (when nil (and (= cycle* 4))
        (format t "~%time: ~d ~%total cycles: ~d~%stop temperature: ~d~%bindings:~%~S~%cost: ~d" time (/ time (length top-lvl-nodes)) big-t (third best-solution) (second best-solution))
        (break)
	)
      (return-from looper (values (first best-solution) (second best-solution) (third best-solution) (fourth best-solution) (fifth best-solution)))
    else do
      (when nil (and (= cycle* 4))
        (format t "~%~%iteration: ~d~%temperature: ~d~%current mapping:~%~A~%current bindings: ~A~%current q-first-bindings: ~A~%cost of current solution: ~d" time big-t (first current) (third current) (fourth current) (second current)))
      (multiple-value-bind (solution bindings q-first-bindings)
	  (linear-neighbor (make-nil-mappings p) (make-hash-table :test #'equal) (make-hash-table :test #'equal)  possible-candidates p q p-nodes q-nodes top-lvl-nodes)
	  ;;(linear-neighbor (copy-array (first current)) (copy-hash-table (third current)) (copy-hash-table (fourth current)) possible-candidates p q p-nodes q-nodes top-lvl-nodes)
        (multiple-value-bind (new-matches new-weighted-cost new-bindings new-q-first-bindings new-cost)
            (get-cost solution bindings q-first-bindings p q q-dif q-m p-nodes q-nodes cost-of-nil bic-p p-refs-map qp-refs-map forbidden-types :sol-cost-map sol-cost-map)
          (setq next (list new-matches new-weighted-cost new-bindings new-q-first-bindings new-cost)))
        (setq delta-e (- (second next) (second current)))
        (when nil (and (= cycle* 4))
          (format t "~%new mapping:~%~A~%new bindings: ~A~%new q-first-bindings: ~A~%cost of new solution: ~d~%delta cost: ~d" (first next) (third next) (fourth next) (second next) delta-e)
	  ;;(break)
	  #|
	  (loop
            with counter = 0
            for bind being the hash-keys of bindings
            when (search "BLOCK" bind)
              do
                 (setq counter (+ counter 1))
                 (when (>= counter 1)
                   (format t "~%cost of nil: ~d" cost-of-nil)
                   (format t "~%bound blocks: ~d" counter)
                   (format t "~%better random match: ~S" (better-random-match? next best-solution))
                   (break)
                   ))
	  |#)
        (when (better-random-match? next best-solution)
          (setq best-solution (list (copy-array (first next)) (second next) (copy-hash-table (third next)) (copy-hash-table (fourth next)) (fifth next)))
          (when nil (and (= cycle* 4))
            (format t "~%new mapping is new best solution!~%~%Best score: ~d~%Found at iteration: ~d~%temperature: ~d" (second best-solution) time big-t)))
        (cond ((< delta-e 0)
               (when nil (and (= cycle* 4))
                 (format t "~%found better match!"))
               (setq current best-solution))
              (nil t
               (setq current (prob-select current next (ignore-errors (exp (/ (- delta-e) big-t))))))))))
|#

#| Optimize structure mapping between two graphs |#

;; p = pattern graph
;; q = base graph
;; p-backlinks = hash table containing dependent id maps to backlinks in p referencing observation/state decompositions
;; q-backlinks = hash table containing dependent id maps to backlinks in q referencing observation/state decompositions
;; current = best current match
;; possible-candidates = list of potential candidate nodes in base graph
;; sol-cost-map = map of previous solutions
;; start-temp = initial temperature
;; end-temp = stopping temperature
;; alpha = discount for cooling schedule
;; p-nodes = list of nodes in p
;; q-nodes = list of nodes in q
;; q-dif = difference between number of free variables (nodes with no parents) in q that p doesn't have
;; q-m = number of summarized in q
;; cost-of-nil = episode count for matching to nil
;; bic-p = whether to compute bic or likelihood
(defun new-simulated-annealing (p q p-backlinks q-backlinks current possible-candidates sol-cost-map start-temp end-temp alpha top-lvl-nodes p-nodes q-nodes q-dif q-m cost-of-nil bic-p forbidden-types &key (score-p nil))
  (loop
    named looper
    with big-t = start-temp and smallest-float = end-temp and next and delta-e and delta-m
    with best-solution = current
    for time from 0 do
      (setq big-t (cooling-schedule time start-temp alpha))
    when (<= big-t smallest-float) do
      ;;(break)
      (when nil
            (format t "~%time: ~d ~%total cycles: ~d~%stop temperature: ~d~%bindings:~%~S~%cost: ~d" time (/ time (length top-lvl-nodes)) big-t (third best-solution) (second best-solution))
            (break)
	    )
      (return-from looper (values (first best-solution) (second best-solution) (third best-solution) (fourth best-solution) (fifth best-solution)))
    else do
      (when nil
            (format t "~%~%iteration: ~d~%temperature: ~d~%current mapping:~%~A~%current bindings: ~A~%current q-first-bindings: ~A~%cost of current solution: ~d" time big-t (first current) (third current) (fourth current) (second current)))
      (multiple-value-bind (solution bindings q-first-bindings)
	  (linear-neighbor (make-nil-mappings p) (make-hash-table :test #'equal) (make-hash-table :test #'equal)  possible-candidates p q p-nodes q-nodes top-lvl-nodes)
	;;(linear-neighbor (copy-array (first current)) (copy-hash-table (third current)) (copy-hash-table (fourth current)) possible-candidates p q p-nodes q-nodes top-lvl-nodes)
        (multiple-value-bind (new-matches new-cost new-bindings new-q-first-bindings num-local-preds)
            (get-cost solution p-backlinks q-backlinks bindings q-first-bindings p q q-dif q-m p-nodes q-nodes cost-of-nil bic-p forbidden-types :sol-cost-map sol-cost-map :score-p score-p)
          (setq next (list new-matches new-cost new-bindings new-q-first-bindings num-local-preds (array-dimension (car q) 0))))
        (setq delta-e (- (second next) (second current)))
        (when nil (and print-special*
		       (equal "STATE" (gethash 0 (rule-based-cpd-types (aref (car p) 0)))))
              (format t "~%new mapping:~%~A~%new bindings: ~A~%new q-first-bindings: ~A~%cost of new solution: ~d~%delta cost: ~d" (first next) (third next) (fourth next) (second next) delta-e))
        (when (better-random-match? next best-solution)
          (setq best-solution (list (copy-array (first next)) (second next) (copy-hash-table (third next)) (copy-hash-table (fourth next)) (fifth next) (array-dimension (car q) 0)))
          (when nil (and print-special*
			 (equal "STATE" (gethash 0 (rule-based-cpd-types (aref (car p) 0)))))
		(format t "~%new mapping is new best solution!~%~%Best score: ~d~%Found at iteration: ~d~%temperature: ~d" (second best-solution) time big-t)))
        (cond ((< delta-e 0)
               (when nil
                     (format t "~%found better match!"))
               (setq current best-solution))
              (nil t
		   (setq current (prob-select current next (ignore-errors (exp (/ (- delta-e) big-t))))))))))

#| Get the expected number of trials needed to observe all outcomes of the variable |#

;; values = domain for variable assignment
(defun get-expected-iterations (values)
  (loop
     for observed from 0 to (- (array-dimension values 0) 1)
     sum (/ 1 (/ (- (array-dimension values 0) observed) (array-dimension values 0))) into iterations
     finally
       (return (ceiling iterations))))

#| Predicate function for determining if a list only contains one item |#

;; lst = list
(defun single-p (lst)
  (and (consp lst) (not (cdr lst))))

#| Find largest common subgraph between two graphs |#

;; p = pattern graph
;; q = base graph
;; p-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; q-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; cost-of-nil = episode count for matching to nil
;; bic-p = flag to compute BIC
(defun new-maximum-common-subgraph (p q p-backlinks q-backlinks &key (cost-of-nil 2) (bic-p t) (forbidden-types nil) (score-p nil)  &aux p-nodes q-nodes top-lvl-nodes (required-swaps 1))
  (when nil 
    (format t "~%~%p:~%~S~%|p|: ~d~%q:~%~S~%|q|: ~d" (map 'list #'rule-based-cpd-identifiers (car p))
	    (array-dimension (car p) 0)
	    (map 'list #'rule-based-cpd-identifiers (car q))
	    (array-dimension (car q) 0))
    ;;(break)
    )
  (let (matches cost bindings q-first-bindings possible-candidates current temperature stop-temp alpha almost-zero sol-cost-map key no-matches p-dim p-m q-dim q-m q-dif num-local-preds)
    (setq sol-cost-map (make-hash-table :test #'equal))
    (setq matches (make-nil-mappings p))
    (setq cost most-positive-fixnum)
    (setq num-local-preds -1)
    (setq bindings (make-hash-table :test #'equal))
    (setq q-first-bindings (make-hash-table :test #'equal))
    (setq possible-candidates (get-possible-candidates p q))
    (setq p-dim 0)
    (setq q-dim 0)
    (setq q-m 0)
    (setq q-dif 0)
    (when nil t
	  (format t "~%~%possible candidates:~%~S" possible-candidates)
	  )
    (setq key (key-from-matches matches))
    (when (null (gethash key sol-cost-map))
      (setf (gethash key sol-cost-map) (cons cost num-local-preds)))
    (setq current (list matches cost bindings q-first-bindings num-local-preds (array-dimension (car q) 0)))
    (setq stop-temp (expt 10 (- 1)))
    (setq almost-zero 1.e-39)
    (setq alpha .999)
    (setq p-nodes (make-hash-table :test #'equal))
    (setq q-nodes (make-hash-table :test #'equal))
    (loop
      with i-options and swaps-hash = (make-hash-table :test #'equal)
      for i from 0 to (- (if p (array-dimension (car p) 0) 0) 1)
      do
         (setf (gethash (rule-based-cpd-dependent-id (aref (car p) i)) p-nodes) i)
      if (= (hash-table-count (rule-based-cpd-identifiers (aref (car p) i))) 1)
	do
	   (setq p-dim (+ p-dim 1))
           (setq i-options (analog-nodes i p q (gethash i possible-candidates) (make-hash-table) (make-hash-table)))
           (when (> (array-dimension i-options 0) 1)
             (setf (gethash (rule-based-cpd-dependent-id (aref (car p) i)) swaps-hash)
                   (cons (get-expected-iterations i-options) (gethash (rule-based-cpd-dependent-id (aref (car p) i)) swaps-hash))))
           (setq top-lvl-nodes (nreverse (cons i (nreverse top-lvl-nodes))))
      finally
	 (setq required-swaps (* (+ (reduce #'+ (loop for swaps being the hash-values of swaps-hash collect (reduce #'* swaps))) 1) 2)))
    (loop
      for i from 0 to (- (if q (array-dimension (car q) 0) 0) 1)
      do
	 (setq q-m (max q-m (rule-based-cpd-count (aref (car q) i))))
	 (setf (gethash (rule-based-cpd-dependent-id (aref (car q) i)) q-nodes) i)
	 (when (= (hash-table-count (rule-based-cpd-identifiers (aref (car q) i))) 1)
	   (setq q-dim (+ q-dim 1))))
    (when (> q-dim p-dim)
      (setq q-dif (- q-dim p-dim)))
    (setq temperature (handler-case (/ stop-temp (expt alpha required-swaps))
                        (error (c)
                          ;;(break "Going to set almost zero")
                          (/ stop-temp almost-zero))))
    (when nil t
          (format t "~%~%initial temperature: ~d~%alpha: ~d~%num top-lvl-nodes:~%~A~%expected number of cycles: ~d" temperature alpha (length top-lvl-nodes) required-swaps)
          ;;(break)
	  )
    (multiple-value-bind (matches cost bindings q-first-bindings num-local-preds)
        (new-simulated-annealing p q p-backlinks q-backlinks current possible-candidates sol-cost-map temperature stop-temp alpha top-lvl-nodes p-nodes q-nodes q-dif q-m cost-of-nil bic-p forbidden-types :score-p score-p)
      (setq no-matches (make-na-matches-for-unmatched-cpds p q matches bindings q-first-bindings p-nodes))
      (setq current (list matches no-matches cost bindings q-first-bindings num-local-preds (array-dimension (car q) 0))))
    (values (first current) (second current) (third current) (fourth current) (fifth current) (sixth current))))

#| Score Bayes net, q, on pattern graph using likelihood or BIC |#

;; p = pattern graph
;; q = base graph
;; p-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; q-backlinks = hash table of episode ids to back-links references pointing to lower-level observation/state transition models in the event memory
;; cost-of-nil = episode count for matching to nil
;; bic-p = flag to compute BIC
(defun bn-score (p q p-backlinks q-backlinks &key (cost-of-nil 2) (bic-p t) (forbidden-types nil))
  (multiple-value-bind (sol no-matches score)
      (new-maximum-common-subgraph p q p-backlinks q-backlinks :cost-of-nil cost-of-nil :bic-p bic-p :forbidden-types forbidden-types :score-p t)
    (declare (ignore sol no-matches))
    score))

#| TESTS
1) Structure mapping tests
(load "newicarus")
(initialize-world)
(let (p q)
  (run 1)
  (setq p (car (episode-states (car eltm*))))
  (setq eltm* nil)
  (run 1)
  (eltm-to-pdf)
  (setq q (car (episode-states (car eltm*))))
  (setq eltm* nil)
  (greedy-assignment p q))

(let (rule1 rule2)
  (setq rule1 #S(RULE
                 :ID "RULE-15575"
                 :CONDITIONS #H(("HAND_OPEN570" . 1) ("HAND565" . 0) ("HAND_CLOSED6124" . 0) ("LEFT_OF584" . 1) ("LEFT_OF582" . 1) ("ON574" . 1) ("HANDS_FREE592" . 1) ("LEFT_OF580" . 1))
                 :PROBABILITY 5/8
                 :BLOCK (25)
                 :CERTAIN-BLOCK (25)
                 :AVOID-LIST NIL
                 :REDUNDANCIES NIL
                 :COUNT 8))
  (setq rule2 #S(RULE
                 :ID "RULE-15566"
                 :CONDITIONS #H(("HAND565" . 0) ("HAND_CLOSED6124" . 1) ("GRIPPER586" . 0) ("HANDS_FREE592" . 1) ("ON574" . 1) ("LEFT_OF580" . 1) ("LEFT_OF582" . 1))
                 :PROBABILITY 1
                 :BLOCK (14 13 4)
                 :CERTAIN-BLOCK (14)
                 :AVOID-LIST NIL
                 :REDUNDANCIES NIL
                 :COUNT 8))
  (compatible-rule-p rule1 rule2 nil nil))

(load "newicarus")(initialize-world)(require :sb-sprof)(sb-sprof:with-profiling (:max-samples 100000
:mode :cpu
:report :flat)
(grun))

(load "newicarus")(initialize-world)(grun)(remember eltm* (list (list (make-array 0))) '+ 1 t)

(let (percepts cue)
(load "newicarus")
(initialize-world)
(grun)
(setq percepts (list '(hand h1 y 8)))
(multiple-value-bind (factors edges)
(state-to-graph percepts nil)
(setq cue (cons factors edges))
(remember eltm* (list cue) '+ 1 t)))

(load "newicarus")(initialize-world)(grun)(require :sb-sprof)(sb-sprof:with-profiling (
:mode :cpu
:report :flat)
(remember eltm* (list (list (make-array 0))) '+ 1 t))

(equal #(1 2 2 2 2 2 2 2 2 2) #(1 1 2 2 2 2 2 2 2 2))

(let (h1 h2)
(setq h1 #H((8 . 8) (19 . 19) (32 . 32) (43 . 43) (53 . 53) (60 . 60) (66 . 66) (74 . 74) (80 . 80) (88 . 88) (95 . 95) (102 . 102)))
(setq h2 #H((8 . 8) (19 . 19) (32 . 32) (43 . 43) (53 . 53) (66 . 66) (80 . 80) (95 . 95)))
(hash-difference h1 h2 nil :output-hash-p t))

(loop
for i from 0 to 8000
collect (random 8000) into l1
collect (random 8000) into l2
finally
(return (intersection l1 l2)))

(ql:quickload :hems)
(loop
with h1 = (make-hash-table) and h2 = (make-hash-table)
with r
for i from 0 to 80000
do
(setq r (random 80000))
(setf (gethash r h1) r)
(setq r (random 80000))
(setf (gethash r h2) r)
finally
(return (hems::hash-intersection h1 h2 :output-hash-p t)))

;; testing new method for making initial rules by factor filter with * operation
(let (rules1 rules2 rules3 idents rule rule-cond cpd1 cpd2 cpd3 new-cpd new-new-cpd new-rules var-values)
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "B" rule-cond) (list 0))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 0
	      :count 0))
  (setq rules1 (cons rule rules1))
  
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "B" rule-cond) (list 1))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 0
	      :count 0))
  (setq rules1 (cons rule rules1))
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "B" rule-cond) (list 2))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 1
	      :count 1))
  (setq rules1 (cons rule rules1))

  (setq idents (make-hash-table :test #'equal))
  (setf (gethash "B" idents) 0)
  (setq cpd1 (make-rule-based-cpd
	      :dependent-id "B"
	      :identifiers idents
	      :rules (make-array (length rules1) :initial-contents rules1)))

  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "A" rule-cond) (list 0))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 0
	      :count 0))
  (setq rules2 (cons rule rules2))
  
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "A" rule-cond) (list 1))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 0
	      :count 0))
  (setq rules2 (cons rule rules2))
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "A" rule-cond) (list 2))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 1
	      :count 1))
  (setq rules2 (cons rule rules2))

  (setq idents (make-hash-table :test #'equal))
  (setf (gethash "A" idents) 0)
  (setq cpd2 (make-rule-based-cpd
	      :dependent-id "A"
	      :identifiers idents
	      :rules (make-array (length rules2) :initial-contents rules2)))


  (setq idents (make-hash-table :test #'equal))
  (setf (gethash "A" idents) 0)
  (setf (gethash "B" idents) 1)

  (setq var-values (make-hash-table))
  (setf (gethash 0 var-values) (list 0 1 2))
  (setf (gethash 1 var-values) (list 0 1 2))
  (setq new-cpd (make-rule-based-cpd
		 :identifiers idents
		 :var-values var-values))
(setq new-rules (operate-filter-rules cpd2 cpd1 '* nil (make-hash-table :test #'equal) new-cpd))
(format t "~%new rules:~%~A" new-rules)
  (setf (rule-based-cpd-rules new-cpd) (make-array (length new-rules) :initial-contents new-rules))
  
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "C" rule-cond) (list 0))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 0
	      :count 0))
  (setq rules3 (cons rule rules3))
  
  (setq rule-cond (make-hash-table :test #'equal))
  (setf (gethash "C" rule-cond) (list 1))
  (setq rule (make-rule
	      :conditions rule-cond
	      :probability 1
	      :count 1))
  (setq rules3 (cons rule rules3))

  (setq idents (make-hash-table :test #'equal))
  (setf (gethash "C" idents) 0)
  (setq cpd3 (make-rule-based-cpd
	      :dependent-id "C"
	      :identifiers idents
	      :rules (make-array (length rules3) :initial-contents rules3)))

  (setq idents (make-hash-table :test #'equal))
  (setf (gethash "A" idents) 0)
  (setf (gethash "B" idents) 1)
  (setf (gethash "C" idents) 2)

  (setq var-values (make-hash-table))
  (setf (gethash 0 var-values) (list 0 1 2))
  (setf (gethash 1 var-values) (list 0 1 2))
  (setf (gethash 1 var-values) (list 0 1))
(setq new-new-cpd (make-rule-based-cpd
:dependent-id "A"
		 :identifiers idents
		 :var-values var-values))
  (setq new-rules (operate-filter-rules new-cpd cpd3 '* nil (make-hash-table :test #'equal) new-new-cpd))
  (setf (rule-based-cpd-rules new-new-cpd) (make-array (length new-rules) :initial-contents new-rules))
  (setq new-new-cpd (normalize-rule-probabilities new-new-cpd (rule-based-cpd-dependent-id new-new-cpd)))
  (get-local-coverings
   (update-cpd-rules new-new-cpd (rule-based-cpd-rules new-new-cpd))))

(hems::same-rule-p #S(HEMS::RULE
   :ID "RULE-8914"
   :CONDITIONS #H(("TIME_PREV_506" . (0)) ("TIME_509" . (27)))
   :PROBABILITY 0.0013227514
   :BLOCK #H((57 . 57))
   :CERTAIN-BLOCK #H((57 . 57))
   :AVOID-LIST #H()
   :REDUNDANCIES #H()
:COUNT 1)
#S(HEMS::RULE
   :ID "RULE-8915"
   :CONDITIONS #H(("TIME_509" . (1 27)) ("TIME_PREV_506" . (0)))
   :PROBABILITY 0.0013227514
   :BLOCK #H((57 . 57) (730 . 730))
   :CERTAIN-BLOCK #H((57 . 57) (730 . 730))
   :AVOID-LIST #H()
   :REDUNDANCIES #H()
:COUNT 1)
nil nil)

(hems::get-local-coverings #S(HEMS::RULE-BASED-CPD
   :DEPENDENT-ID #1="EPOSITION_231"
   :IDENTIFIERS #H((#1# . 0) (#2="TARGET_216" . 1) (#3="EPOSITION_PREV_219" . 2))
   :DEPENDENT-VAR "EPOSITION"
   :VARS #H((0 . "EPOSITION") (1 . "TARGET") (2 . "EPOSITION_PREV"))
   :TYPES #H((0 . "PERCEPT") (1 . NIL) (2 . NIL))
   :CONCEPT-IDS #H((0 . "NIL") (1 . "NIL") (2 . "NIL"))
   :QUALIFIED-VARS #H((0 . "EPOSITIONNIL") (1 . "TARGETNIL") (2 . "EPOSITION_PREVNIL"))
   :VAR-VALUE-BLOCK-MAP #H((0 . (((#4="NA" . 0)
                                  #H((0 . 0) (1 . 1) (2 . 2) (3 . 3) (4 . 4) (5 . 5) (6 . 6) (7 . 7) (8 . 8) (9 . 9) (10 . 10) (11 . 11) (12 . 12) (13 . 13) (14 . 14) (15 . 15) (16 . 16) (17 . 17) (18 . 18) (19 . 19) (20 . 20) (21 . 21) (22 . 22) (23 . 23) (24 . 24) (25 . 25) (26 . 26) (27 . 27) (28 . 28) (29 . 29) (30 . 30) (31 . 31) (32 . 32) (33 . 33) (34 . 34) (35 . 35) (36 . 36) (37 . 37) (38 . 38) (39 . 39) (40 . 40) (41 . 41) (42 . 42)))
                                 ((#5="150" . 1)
                                  #H((824 . 824) (825 . 825) (826 . 826) (827 . 827) (828 . 828) (829 . 829) (830 . 830)))
                                 ((#6="450" . 2)
                                  #H((731 . 731) (732 . 732) (733 . 733) (734 . 734) (735 . 735) (736 . 736) (737 . 737)))
                                 (#7=(#8="50" . 3)
                                  #H((831 . 831) (832 . 832) (833 . 833) (834 . 834) (835 . 835) (836 . 836) (837 . 837) (838 . 838) (839 . 839) (840 . 840) (841 . 841) (842 . 842) (843 . 843) (844 . 844) (845 . 845) (846 . 846) (847 . 847) (848 . 848) (849 . 849) (850 . 850) (851 . 851) (852 . 852) (853 . 853) (854 . 854) (855 . 855) (856 . 856) (857 . 857) (858 . 858) (859 . 859) (860 . 860) (861 . 861) (862 . 862) (863 . 863) (864 . 864) (865 . 865) (866 . 866) (867 . 867) (868 . 868) (869 . 869) (870 . 870) (871 . 871) (872 . 872) (873 . 873)))
                                 (#9=(#10="250" . 4)
                                  #H((781 . 781) (782 . 782) (783 . 783) (784 . 784) (785 . 785) (786 . 786) (787 . 787) (788 . 788) (789 . 789) (790 . 790) (791 . 791) (792 . 792) (793 . 793) (794 . 794) (795 . 795) (796 . 796) (797 . 797) (798 . 798) (799 . 799) (800 . 800) (801 . 801) (802 . 802) (803 . 803) (804 . 804) (805 . 805) (806 . 806) (807 . 807) (808 . 808) (809 . 809) (810 . 810) (811 . 811) (812 . 812) (813 . 813) (814 . 814) (815 . 815) (816 . 816) (817 . 817) (818 . 818) (819 . 819) (820 . 820) (821 . 821) (822 . 822) (823 . 823)))
                                 (#11=(#12="350" . 5)
                                  #H((738 . 738) (739 . 739) (740 . 740) (741 . 741) (742 . 742) (743 . 743) (744 . 744) (745 . 745) (746 . 746) (747 . 747) (748 . 748) (749 . 749) (750 . 750) (751 . 751) (752 . 752) (753 . 753) (754 . 754) (755 . 755) (756 . 756) (757 . 757) (758 . 758) (759 . 759) (760 . 760) (761 . 761) (762 . 762) (763 . 763) (764 . 764) (765 . 765) (766 . 766) (767 . 767) (768 . 768) (769 . 769) (770 . 770) (771 . 771) (772 . 772) (773 . 773) (774 . 774) (775 . 775) (776 . 776) (777 . 777) (778 . 778) (779 . 779) (780 . 780)))
                                 (#13=(#14="550" . 6)
                                  #H((688 . 688) (689 . 689) (690 . 690) (691 . 691) (692 . 692) (693 . 693) (694 . 694) (695 . 695) (696 . 696) (697 . 697) (698 . 698) (699 . 699) (700 . 700) (701 . 701) (702 . 702) (703 . 703) (704 . 704) (705 . 705) (706 . 706) (707 . 707) (708 . 708) (709 . 709) (710 . 710) (711 . 711) (712 . 712) (713 . 713) (714 . 714) (715 . 715) (716 . 716) (717 . 717) (718 . 718) (719 . 719) (720 . 720) (721 . 721) (722 . 722) (723 . 723) (724 . 724) (725 . 725) (726 . 726) (727 . 727) (728 . 728) (729 . 729) (730 . 730)))
                                 (#15=(#16="650" . 7)
                                  #H((645 . 645) (646 . 646) (647 . 647) (648 . 648) (649 . 649) (650 . 650) (651 . 651) (652 . 652) (653 . 653) (654 . 654) (655 . 655) (656 . 656) (657 . 657) (658 . 658) (659 . 659) (660 . 660) (661 . 661) (662 . 662) (663 . 663) (664 . 664) (665 . 665) (666 . 666) (667 . 667) (668 . 668) (669 . 669) (670 . 670) (671 . 671) (672 . 672) (673 . 673) (674 . 674) (675 . 675) (676 . 676) (677 . 677) (678 . 678) (679 . 679) (680 . 680) (681 . 681) (682 . 682) (683 . 683) (684 . 684) (685 . 685) (686 . 686) (687 . 687)))
                                 (#17=(#18="750" . 8)
                                  #H((602 . 602) (603 . 603) (604 . 604) (605 . 605) (606 . 606) (607 . 607) (608 . 608) (609 . 609) (610 . 610) (611 . 611) (612 . 612) (613 . 613) (614 . 614) (615 . 615) (616 . 616) (617 . 617) (618 . 618) (619 . 619) (620 . 620) (621 . 621) (622 . 622) (623 . 623) (624 . 624) (625 . 625) (626 . 626) (627 . 627) (628 . 628) (629 . 629) (630 . 630) (631 . 631) (632 . 632) (633 . 633) (634 . 634) (635 . 635) (636 . 636) (637 . 637) (638 . 638) (639 . 639) (640 . 640) (641 . 641) (642 . 642) (643 . 643) (644 . 644)))
                                 (#19=(#20="850" . 9)
                                  #H((559 . 559) (560 . 560) (561 . 561) (562 . 562) (563 . 563) (564 . 564) (565 . 565) (566 . 566) (567 . 567) (568 . 568) (569 . 569) (570 . 570) (571 . 571) (572 . 572) (573 . 573) (574 . 574) (575 . 575) (576 . 576) (577 . 577) (578 . 578) (579 . 579) (580 . 580) (581 . 581) (582 . 582) (583 . 583) (584 . 584) (585 . 585) (586 . 586) (587 . 587) (588 . 588) (589 . 589) (590 . 590) (591 . 591) (592 . 592) (593 . 593) (594 . 594) (595 . 595) (596 . 596) (597 . 597) (598 . 598) (599 . 599) (600 . 600) (601 . 601)))
                                 (#21=(#22="950" . 10)
                                  #H((516 . 516) (517 . 517) (518 . 518) (519 . 519) (520 . 520) (521 . 521) (522 . 522) (523 . 523) (524 . 524) (525 . 525) (526 . 526) (527 . 527) (528 . 528) (529 . 529) (530 . 530) (531 . 531) (532 . 532) (533 . 533) (534 . 534) (535 . 535) (536 . 536) (537 . 537) (538 . 538) (539 . 539) (540 . 540) (541 . 541) (542 . 542) (543 . 543) (544 . 544) (545 . 545) (546 . 546) (547 . 547) (548 . 548) (549 . 549) (550 . 550) (551 . 551) (552 . 552) (553 . 553) (554 . 554) (555 . 555) (556 . 556) (557 . 557) (558 . 558)))
                                 (#23=(#24="1050" . 11)
                                  #H((473 . 473) (474 . 474) (475 . 475) (476 . 476) (477 . 477) (478 . 478) (479 . 479) (480 . 480) (481 . 481) (482 . 482) (483 . 483) (484 . 484) (485 . 485) (486 . 486) (487 . 487) (488 . 488) (489 . 489) (490 . 490) (491 . 491) (492 . 492) (493 . 493) (494 . 494) (495 . 495) (496 . 496) (497 . 497) (498 . 498) (499 . 499) (500 . 500) (501 . 501) (502 . 502) (503 . 503) (504 . 504) (505 . 505) (506 . 506) (507 . 507) (508 . 508) (509 . 509) (510 . 510) (511 . 511) (512 . 512) (513 . 513) (514 . 514) (515 . 515)))
                                 (#25=(#26="1150" . 12)
                                  #H((430 . 430) (431 . 431) (432 . 432) (433 . 433) (434 . 434) (435 . 435) (436 . 436) (437 . 437) (438 . 438) (439 . 439) (440 . 440) (441 . 441) (442 . 442) (443 . 443) (444 . 444) (445 . 445) (446 . 446) (447 . 447) (448 . 448) (449 . 449) (450 . 450) (451 . 451) (452 . 452) (453 . 453) (454 . 454) (455 . 455) (456 . 456) (457 . 457) (458 . 458) (459 . 459) (460 . 460) (461 . 461) (462 . 462) (463 . 463) (464 . 464) (465 . 465) (466 . 466) (467 . 467) (468 . 468) (469 . 469) (470 . 470) (471 . 471) (472 . 472)))
                                 (#27=(#28="1250" . 13)
                                  #H((387 . 387) (388 . 388) (389 . 389) (390 . 390) (391 . 391) (392 . 392) (393 . 393) (394 . 394) (395 . 395) (396 . 396) (397 . 397) (398 . 398) (399 . 399) (400 . 400) (401 . 401) (402 . 402) (403 . 403) (404 . 404) (405 . 405) (406 . 406) (407 . 407) (408 . 408) (409 . 409) (410 . 410) (411 . 411) (412 . 412) (413 . 413) (414 . 414) (415 . 415) (416 . 416) (417 . 417) (418 . 418) (419 . 419) (420 . 420) (421 . 421) (422 . 422) (423 . 423) (424 . 424) (425 . 425) (426 . 426) (427 . 427) (428 . 428) (429 . 429)))
                                 (#29=(#30="1350" . 14)
                                  #H((344 . 344) (345 . 345) (346 . 346) (347 . 347) (348 . 348) (349 . 349) (350 . 350) (351 . 351) (352 . 352) (353 . 353) (354 . 354) (355 . 355) (356 . 356) (357 . 357) (358 . 358) (359 . 359) (360 . 360) (361 . 361) (362 . 362) (363 . 363) (364 . 364) (365 . 365) (366 . 366) (367 . 367) (368 . 368) (369 . 369) (370 . 370) (371 . 371) (372 . 372) (373 . 373) (374 . 374) (375 . 375) (376 . 376) (377 . 377) (378 . 378) (379 . 379) (380 . 380) (381 . 381) (382 . 382) (383 . 383) (384 . 384) (385 . 385) (386 . 386)))
                                 (#31=(#32="1450" . 15)
                                  #H((301 . 301) (302 . 302) (303 . 303) (304 . 304) (305 . 305) (306 . 306) (307 . 307) (308 . 308) (309 . 309) (310 . 310) (311 . 311) (312 . 312) (313 . 313) (314 . 314) (315 . 315) (316 . 316) (317 . 317) (318 . 318) (319 . 319) (320 . 320) (321 . 321) (322 . 322) (323 . 323) (324 . 324) (325 . 325) (326 . 326) (327 . 327) (328 . 328) (329 . 329) (330 . 330) (331 . 331) (332 . 332) (333 . 333) (334 . 334) (335 . 335) (336 . 336) (337 . 337) (338 . 338) (339 . 339) (340 . 340) (341 . 341) (342 . 342) (343 . 343)))
                                 (#33=(#34="1550" . 16)
                                  #H((258 . 258) (259 . 259) (260 . 260) (261 . 261) (262 . 262) (263 . 263) (264 . 264) (265 . 265) (266 . 266) (267 . 267) (268 . 268) (269 . 269) (270 . 270) (271 . 271) (272 . 272) (273 . 273) (274 . 274) (275 . 275) (276 . 276) (277 . 277) (278 . 278) (279 . 279) (280 . 280) (281 . 281) (282 . 282) (283 . 283) (284 . 284) (285 . 285) (286 . 286) (287 . 287) (288 . 288) (289 . 289) (290 . 290) (291 . 291) (292 . 292) (293 . 293) (294 . 294) (295 . 295) (296 . 296) (297 . 297) (298 . 298) (299 . 299) (300 . 300)))
                                 (#35=(#36="1650" . 17)
                                  #H((215 . 215) (216 . 216) (217 . 217) (218 . 218) (219 . 219) (220 . 220) (221 . 221) (222 . 222) (223 . 223) (224 . 224) (225 . 225) (226 . 226) (227 . 227) (228 . 228) (229 . 229) (230 . 230) (231 . 231) (232 . 232) (233 . 233) (234 . 234) (235 . 235) (236 . 236) (237 . 237) (238 . 238) (239 . 239) (240 . 240) (241 . 241) (242 . 242) (243 . 243) (244 . 244) (245 . 245) (246 . 246) (247 . 247) (248 . 248) (249 . 249) (250 . 250) (251 . 251) (252 . 252) (253 . 253) (254 . 254) (255 . 255) (256 . 256) (257 . 257)))
                                 (#37=(#38="1750" . 18)
                                  #H((172 . 172) (173 . 173) (174 . 174) (175 . 175) (176 . 176) (177 . 177) (178 . 178) (179 . 179) (180 . 180) (181 . 181) (182 . 182) (183 . 183) (184 . 184) (185 . 185) (186 . 186) (187 . 187) (188 . 188) (189 . 189) (190 . 190) (191 . 191) (192 . 192) (193 . 193) (194 . 194) (195 . 195) (196 . 196) (197 . 197) (198 . 198) (199 . 199) (200 . 200) (201 . 201) (202 . 202) (203 . 203) (204 . 204) (205 . 205) (206 . 206) (207 . 207) (208 . 208) (209 . 209) (210 . 210) (211 . 211) (212 . 212) (213 . 213) (214 . 214)))
                                 (#39=(#40="1850" . 19)
                                  #H((129 . 129) (130 . 130) (131 . 131) (132 . 132) (133 . 133) (134 . 134) (135 . 135) (136 . 136) (137 . 137) (138 . 138) (139 . 139) (140 . 140) (141 . 141) (142 . 142) (143 . 143) (144 . 144) (145 . 145) (146 . 146) (147 . 147) (148 . 148) (149 . 149) (150 . 150) (151 . 151) (152 . 152) (153 . 153) (154 . 154) (155 . 155) (156 . 156) (157 . 157) (158 . 158) (159 . 159) (160 . 160) (161 . 161) (162 . 162) (163 . 163) (164 . 164) (165 . 165) (166 . 166) (167 . 167) (168 . 168) (169 . 169) (170 . 170) (171 . 171)))
                                 (#41=(#42="1950" . 20)
                                  #H((86 . 86) (87 . 87) (88 . 88) (89 . 89) (90 . 90) (91 . 91) (92 . 92) (93 . 93) (94 . 94) (95 . 95) (96 . 96) (97 . 97) (98 . 98) (99 . 99) (100 . 100) (101 . 101) (102 . 102) (103 . 103) (104 . 104) (105 . 105) (106 . 106) (107 . 107) (108 . 108) (109 . 109) (110 . 110) (111 . 111) (112 . 112) (113 . 113) (114 . 114) (115 . 115) (116 . 116) (117 . 117) (118 . 118) (119 . 119) (120 . 120) (121 . 121) (122 . 122) (123 . 123) (124 . 124) (125 . 125) (126 . 126) (127 . 127) (128 . 128)))
                                 (#43=(#44="2050" . 21)
                                  #H((43 . 43) (44 . 44) (45 . 45) (46 . 46) (47 . 47) (48 . 48) (49 . 49) (50 . 50) (51 . 51) (52 . 52) (53 . 53) (54 . 54) (55 . 55) (56 . 56) (57 . 57) (58 . 58) (59 . 59) (60 . 60) (61 . 61) (62 . 62) (63 . 63) (64 . 64) (65 . 65) (66 . 66) (67 . 67) (68 . 68) (69 . 69) (70 . 70) (71 . 71) (72 . 72) (73 . 73) (74 . 74) (75 . 75) (76 . 76) (77 . 77) (78 . 78) (79 . 79) (80 . 80) (81 . 81) (82 . 82) (83 . 83) (84 . 84) (85 . 85))))) (1 . (((#4#
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               . 0)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ((#45="1"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               . 1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #H((21 . 21) (22 . 22) (23 . 23) (24 . 24) (25 . 25) (26 . 26) (27 . 27) (28 . 28) (29 . 29) (30 . 30) (31 . 31) (32 . 32) (33 . 33) (34 . 34) (35 . 35) (36 . 36) (37 . 37) (38 . 38) (39 . 39) (40 . 40) (41 . 41) (42 . 42) (64 . 64) (65 . 65) (66 . 66) (67 . 67) (68 . 68) (69 . 69) (70 . 70) (71 . 71) (72 . 72) (73 . 73) (74 . 74) (75 . 75) (76 . 76) (77 . 77) (78 . 78) (79 . 79) (80 . 80) (81 . 81) (82 . 82) (83 . 83) (84 . 84) (85 . 85) (107 . 107) (108 . 108) (109 . 109) (110 . 110) (111 . 111) (112 . 112) (113 . 113) (114 . 114) (115 . 115) (116 . 116) (117 . 117) (118 . 118) (119 . 119) (120 . 120) (121 . 121) (122 . 122) (123 . 123) (124 . 124) (125 . 125) (126 . 126) (127 . 127) (128 . 128) (150 . 150) (151 . 151) (152 . 152) (153 . 153) (154 . 154) (155 . 155) (156 . 156) (157 . 157) (158 . 158) (159 . 159) (160 . 160) (161 . 161) (162 . 162) (163 . 163) (164 . 164) (165 . 165) (166 . 166) (167 . 167) (168 . 168) (169 . 169) (170 . 170) (171 . 171) (193 . 193) (194 . 194) (195 . 195) (196 . 196) (197 . 197) (198 . 198) (199 . 199) (200 . 200) (201 . 201) (202 . 202) (203 . 203) (204 . 204) (205 . 205) (206 . 206) (207 . 207) (208 . 208) (209 . 209) (210 . 210) (211 . 211) (212 . 212) (213 . 213) (214 . 214) (236 . 236) (237 . 237) (238 . 238) (239 . 239) (240 . 240) (241 . 241) (242 . 242) (243 . 243) (244 . 244) (245 . 245) (246 . 246) (247 . 247) (248 . 248) (249 . 249) (250 . 250) (251 . 251) (252 . 252) (253 . 253) (254 . 254) (255 . 255) (256 . 256) (257 . 257) (279 . 279) (280 . 280) (281 . 281) (282 . 282) (283 . 283) (284 . 284) (285 . 285) (286 . 286) (287 . 287) (288 . 288) (289 . 289) (290 . 290) (291 . 291) (292 . 292) (293 . 293) (294 . 294) (295 . 295) (296 . 296) (297 . 297) (298 . 298) (299 . 299) (300 . 300) (322 . 322) (323 . 323) (324 . 324) (325 . 325) (326 . 326) (327 . 327) (328 . 328) (329 . 329) (330 . 330) (331 . 331) (332 . 332) (333 . 333) (334 . 334) (335 . 335) (336 . 336) (337 . 337) (338 . 338) (339 . 339) (340 . 340) (341 . 341) (342 . 342) (343 . 343) (365 . 365) (366 . 366) (367 . 367) (368 . 368) (369 . 369) (370 . 370) (371 . 371) (372 . 372) (373 . 373) (374 . 374) (375 . 375) (376 . 376) (377 . 377) (378 . 378) (379 . 379) (380 . 380) (381 . 381) (382 . 382) (383 . 383) (384 . 384) (385 . 385) (386 . 386) (408 . 408) (409 . 409) (410 . 410) (411 . 411) (412 . 412) (413 . 413) (414 . 414) (415 . 415) (416 . 416) (417 . 417) (418 . 418) (419 . 419) (420 . 420) (421 . 421) (422 . 422) (423 . 423) (424 . 424) (425 . 425) (426 . 426) (427 . 427) (428 . 428) (429 . 429) (451 . 451) (452 . 452) (453 . 453) (454 . 454) (455 . 455) (456 . 456) (457 . 457) (458 . 458) (459 . 459) (460 . 460) (461 . 461) (462 . 462) (463 . 463) (464 . 464) (465 . 465) (466 . 466) (467 . 467) (468 . 468) (469 . 469) (470 . 470) (471 . 471) (472 . 472) (494 . 494) (495 . 495) (496 . 496) (497 . 497) (498 . 498) (499 . 499) (500 . 500) (501 . 501) (502 . 502) (503 . 503) (504 . 504) (505 . 505) (506 . 506) (507 . 507) (508 . 508) (509 . 509) (510 . 510) (511 . 511) (512 . 512) (513 . 513) (514 . 514) (515 . 515) (537 . 537) (538 . 538) (539 . 539) (540 . 540) (541 . 541) (542 . 542) (543 . 543) (544 . 544) (545 . 545) (546 . 546) (547 . 547) (548 . 548) (549 . 549) (550 . 550) (551 . 551) (552 . 552) (553 . 553) (554 . 554) (555 . 555) (556 . 556) (557 . 557) (558 . 558) (580 . 580) (581 . 581) (582 . 582) (583 . 583) (584 . 584) (585 . 585) (586 . 586) (587 . 587) (588 . 588) (589 . 589) (590 . 590) (591 . 591) (592 . 592) (593 . 593) (594 . 594) (595 . 595) (596 . 596) (597 . 597) (598 . 598) (599 . 599) (600 . 600) (601 . 601) (623 . 623) (624 . 624) (625 . 625) (626 . 626) (627 . 627) (628 . 628) (629 . 629) (630 . 630) (631 . 631) (632 . 632) (633 . 633) (634 . 634) (635 . 635) (636 . 636) (637 . 637) (638 . 638) (639 . 639) (640 . 640) (641 . 641) (642 . 642) (643 . 643) (644 . 644) (666 . 666) (667 . 667) (668 . 668) (669 . 669) (670 . 670) (671 . 671) (672 . 672) (673 . 673) (674 . 674) (675 . 675) (676 . 676) (677 . 677) (678 . 678) (679 . 679) (680 . 680) (681 . 681) (682 . 682) (683 . 683) (684 . 684) (685 . 685) (686 . 686) (687 . 687) (709 . 709) (710 . 710) (711 . 711) (712 . 712) (713 . 713) (714 . 714) (715 . 715) (716 . 716) (717 . 717) (718 . 718) (719 . 719) (720 . 720) (721 . 721) (722 . 722) (723 . 723) (724 . 724) (725 . 725) (726 . 726) (727 . 727) (728 . 728) (729 . 729) (730 . 730) (734 . 734) (735 . 735) (736 . 736) (737 . 737) (759 . 759) (760 . 760) (761 . 761) (762 . 762) (763 . 763) (764 . 764) (765 . 765) (766 . 766) (767 . 767) (768 . 768) (769 . 769) (770 . 770) (771 . 771) (772 . 772) (773 . 773) (774 . 774) (775 . 775) (776 . 776) (777 . 777) (778 . 778) (779 . 779) (780 . 780) (802 . 802) (803 . 803) (804 . 804) (805 . 805) (806 . 806) (807 . 807) (808 . 808) (809 . 809) (810 . 810) (811 . 811) (812 . 812) (813 . 813) (814 . 814) (815 . 815) (816 . 816) (817 . 817) (818 . 818) (819 . 819) (820 . 820) (821 . 821) (822 . 822) (823 . 823) (827 . 827) (828 . 828) (829 . 829) (830 . 830) (852 . 852) (853 . 853) (854 . 854) (855 . 855) (856 . 856) (857 . 857) (858 . 858) (859 . 859) (860 . 860) (861 . 861) (862 . 862) (863 . 863) (864 . 864) (865 . 865) (866 . 866) (867 . 867) (868 . 868) (869 . 869) (870 . 870) (871 . 871) (872 . 872) (873 . 873))))) (2 . (((#4#

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #H((20 . 20) (40 . 40) (44 . 44) (64 . 64) (87 . 87) (107 . 107) (130 . 130) (150 . 150) (173 . 173) (193 . 193) (216 . 216) (236 . 236) (259 . 259) (279 . 279) (302 . 302) (322 . 322) (345 . 345) (365 . 365) (388 . 388) (408 . 408) (431 . 431) (451 . 451) (474 . 474) (494 . 494) (517 . 517) (537 . 537) (560 . 560) (580 . 580) (603 . 603) (623 . 623) (646 . 646) (666 . 666) (689 . 689) (709 . 709) (732 . 732) (735 . 735) (739 . 739) (759 . 759) (782 . 782) (802 . 802) (825 . 825) (828 . 828) (832 . 832) (852 . 852)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ((#5#

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #H((19 . 19) (41 . 41) (43 . 43) (84 . 84) (86 . 86) (127 . 127) (129 . 129) (170 . 170) (172 . 172) (213 . 213) (215 . 215) (256 . 256) (258 . 258) (299 . 299) (301 . 301) (342 . 342) (344 . 344) (385 . 385) (387 . 387) (428 . 428) (430 . 430) (471 . 471) (473 . 473) (514 . 514) (516 . 516) (557 . 557) (559 . 559) (600 . 600) (602 . 602) (643 . 643) (645 . 645) (686 . 686) (688 . 688) (729 . 729) (731 . 731) (737 . 737) (738 . 738) (779 . 779) (781 . 781) (822 . 822) (824 . 824) (827 . 827) (831 . 831) (872 . 872)))



















                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         . 8)























                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         . 16)
















   :SET-VALUED-ATTRIBUTES #H((0 . ((0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10)
                                   (11) (12) (13) (14) (15) (16) (17) (18) (19)
                                   (20) (21))) (1 . ((0) (1))) (2 . ((0) (1)
                                                                     (2) (3)
                                                                     (4) (5)
                                                                     (6) (7)
                                                                     (8) (9)
                                                                     (10) (11)
                                                                     (12) (13)
                                                                     (14) (15)
                                                                     (16) (17)
                                                                     (18) (19)
                                                                     (20)
                                                                     (21))))
   :LOWER-APPROX-VAR-VALUE-BLOCK-MAP #H((0 . (((#4# . 0)
                                               #H((0 . 0) (1 . 1) (2 . 2) (3 . 3) (4 . 4) (5 . 5) (6 . 6) (7 . 7) (8 . 8) (9 . 9) (10 . 10) (11 . 11) (12 . 12) (13 . 13) (14 . 14) (15 . 15) (16 . 16) (17 . 17) (18 . 18) (19 . 19) (20 . 20) (21 . 21) (22 . 22) (23 . 23) (24 . 24) (25 . 25) (26 . 26) (27 . 27) (28 . 28) (29 . 29) (30 . 30) (31 . 31) (32 . 32) (33 . 33) (34 . 34) (35 . 35) (36 . 36) (37 . 37) (38 . 38) (39 . 39) (40 . 40) (41 . 41) (42 . 42)))
                                              (("150" . 1)
                                               #H((824 . 824) (825 . 825) (826 . 826) (827 . 827) (828 . 828) (829 . 829) (830 . 830)))
                                              (("450" . 2)
                                               #H((731 . 731) (732 . 732) (733 . 733) (734 . 734) (735 . 735) (736 . 736) (737 . 737)))
                                              (#7#
                                               #H((831 . 831) (832 . 832) (833 . 833) (834 . 834) (835 . 835) (836 . 836) (837 . 837) (838 . 838) (839 . 839) (840 . 840) (841 . 841) (842 . 842) (843 . 843) (844 . 844) (845 . 845) (846 . 846) (847 . 847) (848 . 848) (849 . 849) (850 . 850) (851 . 851) (852 . 852) (853 . 853) (854 . 854) (855 . 855) (856 . 856) (857 . 857) (858 . 858) (859 . 859) (860 . 860) (861 . 861) (862 . 862) (863 . 863) (864 . 864) (865 . 865) (866 . 866) (867 . 867) (868 . 868) (869 . 869) (870 . 870) (871 . 871) (872 . 872) (873 . 873)))
                                              (#9#
                                               #H((781 . 781) (782 . 782) (783 . 783) (784 . 784) (785 . 785) (786 . 786) (787 . 787) (788 . 788) (789 . 789) (790 . 790) (791 . 791) (792 . 792) (793 . 793) (794 . 794) (795 . 795) (796 . 796) (797 . 797) (798 . 798) (799 . 799) (800 . 800) (801 . 801) (802 . 802) (803 . 803) (804 . 804) (805 . 805) (806 . 806) (807 . 807) (808 . 808) (809 . 809) (810 . 810) (811 . 811) (812 . 812) (813 . 813) (814 . 814) (815 . 815) (816 . 816) (817 . 817) (818 . 818) (819 . 819) (820 . 820) (821 . 821) (822 . 822) (823 . 823)))
                                              (#11#
                                               #H((738 . 738) (739 . 739) (740 . 740) (741 . 741) (742 . 742) (743 . 743) (744 . 744) (745 . 745) (746 . 746) (747 . 747) (748 . 748) (749 . 749) (750 . 750) (751 . 751) (752 . 752) (753 . 753) (754 . 754) (755 . 755) (756 . 756) (757 . 757) (758 . 758) (759 . 759) (760 . 760) (761 . 761) (762 . 762) (763 . 763) (764 . 764) (765 . 765) (766 . 766) (767 . 767) (768 . 768) (769 . 769) (770 . 770) (771 . 771) (772 . 772) (773 . 773) (774 . 774) (775 . 775) (776 . 776) (777 . 777) (778 . 778) (779 . 779) (780 . 780)))
                                              (#13#
                                               #H((688 . 688) (689 . 689) (690 . 690) (691 . 691) (692 . 692) (693 . 693) (694 . 694) (695 . 695) (696 . 696) (697 . 697) (698 . 698) (699 . 699) (700 . 700) (701 . 701) (702 . 702) (703 . 703) (704 . 704) (705 . 705) (706 . 706) (707 . 707) (708 . 708) (709 . 709) (710 . 710) (711 . 711) (712 . 712) (713 . 713) (714 . 714) (715 . 715) (716 . 716) (717 . 717) (718 . 718) (719 . 719) (720 . 720) (721 . 721) (722 . 722) (723 . 723) (724 . 724) (725 . 725) (726 . 726) (727 . 727) (728 . 728) (729 . 729) (730 . 730)))
                                              (#15#
                                               #H((645 . 645) (646 . 646) (647 . 647) (648 . 648) (649 . 649) (650 . 650) (651 . 651) (652 . 652) (653 . 653) (654 . 654) (655 . 655) (656 . 656) (657 . 657) (658 . 658) (659 . 659) (660 . 660) (661 . 661) (662 . 662) (663 . 663) (664 . 664) (665 . 665) (666 . 666) (667 . 667) (668 . 668) (669 . 669) (670 . 670) (671 . 671) (672 . 672) (673 . 673) (674 . 674) (675 . 675) (676 . 676) (677 . 677) (678 . 678) (679 . 679) (680 . 680) (681 . 681) (682 . 682) (683 . 683) (684 . 684) (685 . 685) (686 . 686) (687 . 687)))
                                              (#17#
                                               #H((602 . 602) (603 . 603) (604 . 604) (605 . 605) (606 . 606) (607 . 607) (608 . 608) (609 . 609) (610 . 610) (611 . 611) (612 . 612) (613 . 613) (614 . 614) (615 . 615) (616 . 616) (617 . 617) (618 . 618) (619 . 619) (620 . 620) (621 . 621) (622 . 622) (623 . 623) (624 . 624) (625 . 625) (626 . 626) (627 . 627) (628 . 628) (629 . 629) (630 . 630) (631 . 631) (632 . 632) (633 . 633) (634 . 634) (635 . 635) (636 . 636) (637 . 637) (638 . 638) (639 . 639) (640 . 640) (641 . 641) (642 . 642) (643 . 643) (644 . 644)))
                                              (#19#
                                               #H((559 . 559) (560 . 560) (561 . 561) (562 . 562) (563 . 563) (564 . 564) (565 . 565) (566 . 566) (567 . 567) (568 . 568) (569 . 569) (570 . 570) (571 . 571) (572 . 572) (573 . 573) (574 . 574) (575 . 575) (576 . 576) (577 . 577) (578 . 578) (579 . 579) (580 . 580) (581 . 581) (582 . 582) (583 . 583) (584 . 584) (585 . 585) (586 . 586) (587 . 587) (588 . 588) (589 . 589) (590 . 590) (591 . 591) (592 . 592) (593 . 593) (594 . 594) (595 . 595) (596 . 596) (597 . 597) (598 . 598) (599 . 599) (600 . 600) (601 . 601)))
                                              (#21#
                                               #H((516 . 516) (517 . 517) (518 . 518) (519 . 519) (520 . 520) (521 . 521) (522 . 522) (523 . 523) (524 . 524) (525 . 525) (526 . 526) (527 . 527) (528 . 528) (529 . 529) (530 . 530) (531 . 531) (532 . 532) (533 . 533) (534 . 534) (535 . 535) (536 . 536) (537 . 537) (538 . 538) (539 . 539) (540 . 540) (541 . 541) (542 . 542) (543 . 543) (544 . 544) (545 . 545) (546 . 546) (547 . 547) (548 . 548) (549 . 549) (550 . 550) (551 . 551) (552 . 552) (553 . 553) (554 . 554) (555 . 555) (556 . 556) (557 . 557) (558 . 558)))
                                              (#23#
                                               #H((473 . 473) (474 . 474) (475 . 475) (476 . 476) (477 . 477) (478 . 478) (479 . 479) (480 . 480) (481 . 481) (482 . 482) (483 . 483) (484 . 484) (485 . 485) (486 . 486) (487 . 487) (488 . 488) (489 . 489) (490 . 490) (491 . 491) (492 . 492) (493 . 493) (494 . 494) (495 . 495) (496 . 496) (497 . 497) (498 . 498) (499 . 499) (500 . 500) (501 . 501) (502 . 502) (503 . 503) (504 . 504) (505 . 505) (506 . 506) (507 . 507) (508 . 508) (509 . 509) (510 . 510) (511 . 511) (512 . 512) (513 . 513) (514 . 514) (515 . 515)))
                                              (#25#
                                               #H((430 . 430) (431 . 431) (432 . 432) (433 . 433) (434 . 434) (435 . 435) (436 . 436) (437 . 437) (438 . 438) (439 . 439) (440 . 440) (441 . 441) (442 . 442) (443 . 443) (444 . 444) (445 . 445) (446 . 446) (447 . 447) (448 . 448) (449 . 449) (450 . 450) (451 . 451) (452 . 452) (453 . 453) (454 . 454) (455 . 455) (456 . 456) (457 . 457) (458 . 458) (459 . 459) (460 . 460) (461 . 461) (462 . 462) (463 . 463) (464 . 464) (465 . 465) (466 . 466) (467 . 467) (468 . 468) (469 . 469) (470 . 470) (471 . 471) (472 . 472)))
                                              (#27#
                                               #H((387 . 387) (388 . 388) (389 . 389) (390 . 390) (391 . 391) (392 . 392) (393 . 393) (394 . 394) (395 . 395) (396 . 396) (397 . 397) (398 . 398) (399 . 399) (400 . 400) (401 . 401) (402 . 402) (403 . 403) (404 . 404) (405 . 405) (406 . 406) (407 . 407) (408 . 408) (409 . 409) (410 . 410) (411 . 411) (412 . 412) (413 . 413) (414 . 414) (415 . 415) (416 . 416) (417 . 417) (418 . 418) (419 . 419) (420 . 420) (421 . 421) (422 . 422) (423 . 423) (424 . 424) (425 . 425) (426 . 426) (427 . 427) (428 . 428) (429 . 429)))
                                              (#29#
                                               #H((344 . 344) (345 . 345) (346 . 346) (347 . 347) (348 . 348) (349 . 349) (350 . 350) (351 . 351) (352 . 352) (353 . 353) (354 . 354) (355 . 355) (356 . 356) (357 . 357) (358 . 358) (359 . 359) (360 . 360) (361 . 361) (362 . 362) (363 . 363) (364 . 364) (365 . 365) (366 . 366) (367 . 367) (368 . 368) (369 . 369) (370 . 370) (371 . 371) (372 . 372) (373 . 373) (374 . 374) (375 . 375) (376 . 376) (377 . 377) (378 . 378) (379 . 379) (380 . 380) (381 . 381) (382 . 382) (383 . 383) (384 . 384) (385 . 385) (386 . 386)))
                                              (#31#
                                               #H((301 . 301) (302 . 302) (303 . 303) (304 . 304) (305 . 305) (306 . 306) (307 . 307) (308 . 308) (309 . 309) (310 . 310) (311 . 311) (312 . 312) (313 . 313) (314 . 314) (315 . 315) (316 . 316) (317 . 317) (318 . 318) (319 . 319) (320 . 320) (321 . 321) (322 . 322) (323 . 323) (324 . 324) (325 . 325) (326 . 326) (327 . 327) (328 . 328) (329 . 329) (330 . 330) (331 . 331) (332 . 332) (333 . 333) (334 . 334) (335 . 335) (336 . 336) (337 . 337) (338 . 338) (339 . 339) (340 . 340) (341 . 341) (342 . 342) (343 . 343)))
                                              (#33#
                                               #H((258 . 258) (259 . 259) (260 . 260) (261 . 261) (262 . 262) (263 . 263) (264 . 264) (265 . 265) (266 . 266) (267 . 267) (268 . 268) (269 . 269) (270 . 270) (271 . 271) (272 . 272) (273 . 273) (274 . 274) (275 . 275) (276 . 276) (277 . 277) (278 . 278) (279 . 279) (280 . 280) (281 . 281) (282 . 282) (283 . 283) (284 . 284) (285 . 285) (286 . 286) (287 . 287) (288 . 288) (289 . 289) (290 . 290) (291 . 291) (292 . 292) (293 . 293) (294 . 294) (295 . 295) (296 . 296) (297 . 297) (298 . 298) (299 . 299) (300 . 300)))
                                              (#35#
                                               #H((215 . 215) (216 . 216) (217 . 217) (218 . 218) (219 . 219) (220 . 220) (221 . 221) (222 . 222) (223 . 223) (224 . 224) (225 . 225) (226 . 226) (227 . 227) (228 . 228) (229 . 229) (230 . 230) (231 . 231) (232 . 232) (233 . 233) (234 . 234) (235 . 235) (236 . 236) (237 . 237) (238 . 238) (239 . 239) (240 . 240) (241 . 241) (242 . 242) (243 . 243) (244 . 244) (245 . 245) (246 . 246) (247 . 247) (248 . 248) (249 . 249) (250 . 250) (251 . 251) (252 . 252) (253 . 253) (254 . 254) (255 . 255) (256 . 256) (257 . 257)))
                                              (#37#
                                               #H((172 . 172) (173 . 173) (174 . 174) (175 . 175) (176 . 176) (177 . 177) (178 . 178) (179 . 179) (180 . 180) (181 . 181) (182 . 182) (183 . 183) (184 . 184) (185 . 185) (186 . 186) (187 . 187) (188 . 188) (189 . 189) (190 . 190) (191 . 191) (192 . 192) (193 . 193) (194 . 194) (195 . 195) (196 . 196) (197 . 197) (198 . 198) (199 . 199) (200 . 200) (201 . 201) (202 . 202) (203 . 203) (204 . 204) (205 . 205) (206 . 206) (207 . 207) (208 . 208) (209 . 209) (210 . 210) (211 . 211) (212 . 212) (213 . 213) (214 . 214)))
                                              (#39#
                                               #H((129 . 129) (130 . 130) (131 . 131) (132 . 132) (133 . 133) (134 . 134) (135 . 135) (136 . 136) (137 . 137) (138 . 138) (139 . 139) (140 . 140) (141 . 141) (142 . 142) (143 . 143) (144 . 144) (145 . 145) (146 . 146) (147 . 147) (148 . 148) (149 . 149) (150 . 150) (151 . 151) (152 . 152) (153 . 153) (154 . 154) (155 . 155) (156 . 156) (157 . 157) (158 . 158) (159 . 159) (160 . 160) (161 . 161) (162 . 162) (163 . 163) (164 . 164) (165 . 165) (166 . 166) (167 . 167) (168 . 168) (169 . 169) (170 . 170) (171 . 171)))
                                              (#41#
                                               #H((86 . 86) (87 . 87) (88 . 88) (89 . 89) (90 . 90) (91 . 91) (92 . 92) (93 . 93) (94 . 94) (95 . 95) (96 . 96) (97 . 97) (98 . 98) (99 . 99) (100 . 100) (101 . 101) (102 . 102) (103 . 103) (104 . 104) (105 . 105) (106 . 106) (107 . 107) (108 . 108) (109 . 109) (110 . 110) (111 . 111) (112 . 112) (113 . 113) (114 . 114) (115 . 115) (116 . 116) (117 . 117) (118 . 118) (119 . 119) (120 . 120) (121 . 121) (122 . 122) (123 . 123) (124 . 124) (125 . 125) (126 . 126) (127 . 127) (128 . 128)))
                                              (#43#
                                               #H((43 . 43) (44 . 44) (45 . 45) (46 . 46) (47 . 47) (48 . 48) (49 . 49) (50 . 50) (51 . 51) (52 . 52) (53 . 53) (54 . 54) (55 . 55) (56 . 56) (57 . 57) (58 . 58) (59 . 59) (60 . 60) (61 . 61) (62 . 62) (63 . 63) (64 . 64) (65 . 65) (66 . 66) (67 . 67) (68 . 68) (69 . 69) (70 . 70) (71 . 71) (72 . 72) (73 . 73) (74 . 74) (75 . 75) (76 . 76) (77 . 77) (78 . 78) (79 . 79) (80 . 80) (81 . 81) (82 . 82) (83 . 83) (84 . 84) (85 . 85))))) (1 . (((#4#
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            . 0)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ((#45#
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            . 1)










                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #H((0 . 0) (21 . 21)))



                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #H((2 . 2) (23 . 23)))









                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 #H((7 . 7) (28 . 28)))






















   :CHARACTERISTIC-SETS #H()
   :CHARACTERISTIC-SETS-VALUES #H()
   :VAR-VALUES #H((0 . (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
                        21)) (1 . (0 1)) (2 . (0 1 2 3 4 5 6 7 8 9 10 11 12 13
                                               14 15 16 17 18 19 20 21)))
   :CARDINALITIES #(22 2 22)
   :STEP-SIZES #(1 22 44)
   :RULES #(#S(HEMS::RULE
               :ID "RULE-71603"
               :CONDITIONS #H((#1# . (0)) (#3# . (3)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((0 . 0))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71604"
               :CONDITIONS #H((#1# . (0)) (#3# . (4)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((1 . 1))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71605"
               :CONDITIONS #H((#1# . (0)) (#3# . (5)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((2 . 2))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71606"
               :CONDITIONS #H((#1# . (0)) (#3# . (6)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((3 . 3))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71607"
               :CONDITIONS #H((#1# . (0)) (#3# . (7)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((4 . 4))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71608"
               :CONDITIONS #H((#1# . (0)) (#3# . (8)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((5 . 5))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71609"
               :CONDITIONS #H((#1# . (0)) (#3# . (9)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((6 . 6))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71610"
               :CONDITIONS #H((#1# . (0)) (#3# . (10)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((7 . 7))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71611"
               :CONDITIONS #H((#1# . (0)) (#3# . (11)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((8 . 8))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71612"
               :CONDITIONS #H((#1# . (0)) (#3# . (12)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((9 . 9))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71613"
               :CONDITIONS #H((#1# . (0)) (#3# . (13)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((10 . 10))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71614"
               :CONDITIONS #H((#1# . (0)) (#3# . (14)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((11 . 11))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71615"
               :CONDITIONS #H((#1# . (0)) (#3# . (15)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((12 . 12))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71616"
               :CONDITIONS #H((#1# . (0)) (#3# . (16)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((13 . 13))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71617"
               :CONDITIONS #H((#1# . (0)) (#3# . (17)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((14 . 14))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71618"
               :CONDITIONS #H((#1# . (0)) (#3# . (18)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((15 . 15))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71619"
               :CONDITIONS #H((#1# . (0)) (#3# . (19)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((16 . 16))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71620"
               :CONDITIONS #H((#1# . (0)) (#3# . (20)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((17 . 17))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71621"
               :CONDITIONS #H((#1# . (0)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((18 . 18))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71622"
               :CONDITIONS #H((#1# . (0)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 0.0
               :BLOCK #H((19 . 19))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71623"
               :CONDITIONS #H((#1# . (0)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 0.0
               :BLOCK #H((20 . 20))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71641"
               :CONDITIONS #H((#1# . (0)) (#3# . (3)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((21 . 21))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71642"
               :CONDITIONS #H((#1# . (0)) (#3# . (4)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((22 . 22))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71643"
               :CONDITIONS #H((#1# . (0)) (#3# . (5)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((23 . 23))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71644"
               :CONDITIONS #H((#1# . (0)) (#3# . (6)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((24 . 24))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71645"
               :CONDITIONS #H((#1# . (0)) (#3# . (7)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((25 . 25))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71646"
               :CONDITIONS #H((#1# . (0)) (#3# . (8)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((26 . 26))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71647"
               :CONDITIONS #H((#1# . (0)) (#3# . (9)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((27 . 27))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71648"
               :CONDITIONS #H((#1# . (0)) (#3# . (10)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((28 . 28))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71649"
               :CONDITIONS #H((#1# . (0)) (#3# . (11)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((29 . 29))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71650"
               :CONDITIONS #H((#1# . (0)) (#3# . (12)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((30 . 30))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71651"
               :CONDITIONS #H((#1# . (0)) (#3# . (13)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((31 . 31))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71652"
               :CONDITIONS #H((#1# . (0)) (#3# . (14)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((32 . 32))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71653"
               :CONDITIONS #H((#1# . (0)) (#3# . (15)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((33 . 33))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71654"
               :CONDITIONS #H((#1# . (0)) (#3# . (16)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((34 . 34))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71655"
               :CONDITIONS #H((#1# . (0)) (#3# . (17)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((35 . 35))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71656"
               :CONDITIONS #H((#1# . (0)) (#3# . (18)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((36 . 36))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71657"
               :CONDITIONS #H((#1# . (0)) (#3# . (19)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((37 . 37))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71658"
               :CONDITIONS #H((#1# . (0)) (#3# . (20)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((38 . 38))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71659"
               :CONDITIONS #H((#1# . (0)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((39 . 39))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71660"
               :CONDITIONS #H((#1# . (0)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((40 . 40))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71661"
               :CONDITIONS #H((#1# . (0)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((41 . 41))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71662"
               :CONDITIONS #H((#1# . (0)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 0.0
               :BLOCK #H((42 . 42))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71663"
               :CONDITIONS #H((#1# . (21)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((43 . 43))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71664"
               :CONDITIONS #H((#1# . (21)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((44 . 44))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71683"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((45 . 45))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71684"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((46 . 46))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71685"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((47 . 47))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71686"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((48 . 48))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71687"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((49 . 49))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71688"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((50 . 50))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71689"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((51 . 51))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71690"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((52 . 52))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71691"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((53 . 53))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71692"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((54 . 54))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71693"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((55 . 55))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71694"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((56 . 56))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71695"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((57 . 57))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71696"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((58 . 58))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71697"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((59 . 59))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71698"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((60 . 60))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71699"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((61 . 61))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71700"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((62 . 62))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71701"
               :CONDITIONS #H((#1# . (21)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((63 . 63))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71702"
               :CONDITIONS #H((#1# . (21)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((64 . 64))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71704"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((65 . 65))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71705"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((66 . 66))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71706"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((67 . 67))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71707"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((68 . 68))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71708"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((69 . 69))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71709"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((70 . 70))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71710"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((71 . 71))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71711"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((72 . 72))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71712"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((73 . 73))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71713"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((74 . 74))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71714"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((75 . 75))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71715"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((76 . 76))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71716"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((77 . 77))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71717"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((78 . 78))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71718"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((79 . 79))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71719"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((80 . 80))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71720"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((81 . 81))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71721"
               :CONDITIONS #H((#1# . (21)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((82 . 82))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71722"
               :CONDITIONS #H((#1# . (21)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((83 . 83))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71723"
               :CONDITIONS #H((#1# . (21)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((84 . 84))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71724"
               :CONDITIONS #H((#1# . (21)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((85 . 85))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71725"
               :CONDITIONS #H((#1# . (20)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((86 . 86))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71726"
               :CONDITIONS #H((#1# . (20)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((87 . 87))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71744"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((88 . 88))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71745"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((89 . 89))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71746"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((90 . 90))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71747"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((91 . 91))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71748"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((92 . 92))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71749"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((93 . 93))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71750"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((94 . 94))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71751"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((95 . 95))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71752"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((96 . 96))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71753"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((97 . 97))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71754"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((98 . 98))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71755"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((99 . 99))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71756"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((100 . 100))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71757"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((101 . 101))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71758"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((102 . 102))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71759"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((103 . 103))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71760"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((104 . 104))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71761"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((105 . 105))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71762"
               :CONDITIONS #H((#1# . (20)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((106 . 106))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71763"
               :CONDITIONS #H((#1# . (20)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((107 . 107))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71765"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((108 . 108))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71766"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((109 . 109))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71767"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((110 . 110))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71768"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((111 . 111))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71769"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((112 . 112))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71770"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((113 . 113))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71771"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((114 . 114))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71772"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((115 . 115))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71773"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((116 . 116))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71774"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((117 . 117))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71775"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((118 . 118))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71776"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((119 . 119))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71777"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((120 . 120))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71778"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((121 . 121))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71779"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((122 . 122))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71780"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((123 . 123))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71781"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((124 . 124))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71782"
               :CONDITIONS #H((#1# . (20)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((125 . 125))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71783"
               :CONDITIONS #H((#1# . (20)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((126 . 126))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71784"
               :CONDITIONS #H((#1# . (20)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((127 . 127))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71785"
               :CONDITIONS #H((#1# . (20)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((128 . 128))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71786"
               :CONDITIONS #H((#1# . (19)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((129 . 129))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71787"
               :CONDITIONS #H((#1# . (19)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((130 . 130))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71804"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((131 . 131))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71805"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((132 . 132))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71806"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((133 . 133))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71807"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((134 . 134))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71808"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((135 . 135))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71809"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((136 . 136))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71810"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((137 . 137))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71811"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((138 . 138))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71812"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((139 . 139))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71813"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((140 . 140))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71814"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((141 . 141))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71815"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((142 . 142))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71816"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((143 . 143))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71817"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((144 . 144))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71818"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((145 . 145))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71819"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((146 . 146))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71820"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((147 . 147))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71821"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((148 . 148))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71822"
               :CONDITIONS #H((#1# . (19)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((149 . 149))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71823"
               :CONDITIONS #H((#1# . (19)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((150 . 150))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71825"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((151 . 151))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71826"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((152 . 152))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71827"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((153 . 153))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71828"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((154 . 154))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71829"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((155 . 155))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71830"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((156 . 156))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71831"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((157 . 157))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71832"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((158 . 158))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71833"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((159 . 159))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71834"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((160 . 160))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71835"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((161 . 161))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71836"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((162 . 162))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71837"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((163 . 163))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71838"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((164 . 164))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71839"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((165 . 165))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71840"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((166 . 166))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71841"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((167 . 167))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71842"
               :CONDITIONS #H((#1# . (19)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((168 . 168))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71843"
               :CONDITIONS #H((#1# . (19)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((169 . 169))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71844"
               :CONDITIONS #H((#1# . (19)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((170 . 170))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71845"
               :CONDITIONS #H((#1# . (19)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((171 . 171))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71846"
               :CONDITIONS #H((#1# . (18)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((172 . 172))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71847"
               :CONDITIONS #H((#1# . (18)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((173 . 173))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71863"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((174 . 174))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71864"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((175 . 175))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71865"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((176 . 176))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71866"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((177 . 177))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71867"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((178 . 178))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71868"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((179 . 179))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71869"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((180 . 180))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71870"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((181 . 181))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71871"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((182 . 182))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71872"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((183 . 183))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71873"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((184 . 184))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71874"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((185 . 185))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71875"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((186 . 186))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71876"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((187 . 187))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71877"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((188 . 188))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71878"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((189 . 189))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71879"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((190 . 190))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71880"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((191 . 191))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71881"
               :CONDITIONS #H((#1# . (18)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((192 . 192))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71882"
               :CONDITIONS #H((#1# . (18)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((193 . 193))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71884"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((194 . 194))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71885"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((195 . 195))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71886"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((196 . 196))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71887"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((197 . 197))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71888"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((198 . 198))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71889"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((199 . 199))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71890"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((200 . 200))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71891"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((201 . 201))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71892"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((202 . 202))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71893"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((203 . 203))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71894"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((204 . 204))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71895"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((205 . 205))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71896"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((206 . 206))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71897"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((207 . 207))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71898"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((208 . 208))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71899"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((209 . 209))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71900"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((210 . 210))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71901"
               :CONDITIONS #H((#1# . (18)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((211 . 211))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71902"
               :CONDITIONS #H((#1# . (18)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((212 . 212))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71903"
               :CONDITIONS #H((#1# . (18)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((213 . 213))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71904"
               :CONDITIONS #H((#1# . (18)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((214 . 214))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71905"
               :CONDITIONS #H((#1# . (17)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((215 . 215))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71906"
               :CONDITIONS #H((#1# . (17)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((216 . 216))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71921"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((217 . 217))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71922"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((218 . 218))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71923"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((219 . 219))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71924"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((220 . 220))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71925"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((221 . 221))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71926"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((222 . 222))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71927"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((223 . 223))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71928"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((224 . 224))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71929"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((225 . 225))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71930"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((226 . 226))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71931"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((227 . 227))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71932"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((228 . 228))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71933"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((229 . 229))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71934"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((230 . 230))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71935"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((231 . 231))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71936"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((232 . 232))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71937"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((233 . 233))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71938"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((234 . 234))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71939"
               :CONDITIONS #H((#1# . (17)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((235 . 235))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71940"
               :CONDITIONS #H((#1# . (17)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((236 . 236))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71942"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((237 . 237))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71943"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((238 . 238))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71944"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((239 . 239))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71945"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((240 . 240))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71946"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((241 . 241))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71947"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((242 . 242))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71948"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((243 . 243))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71949"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((244 . 244))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71950"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((245 . 245))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71951"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((246 . 246))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71952"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((247 . 247))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71953"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((248 . 248))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71954"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((249 . 249))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71955"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((250 . 250))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71956"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((251 . 251))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71957"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((252 . 252))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71958"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((253 . 253))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71959"
               :CONDITIONS #H((#1# . (17)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((254 . 254))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71960"
               :CONDITIONS #H((#1# . (17)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((255 . 255))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71961"
               :CONDITIONS #H((#1# . (17)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((256 . 256))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71962"
               :CONDITIONS #H((#1# . (17)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((257 . 257))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71963"
               :CONDITIONS #H((#1# . (16)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((258 . 258))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71964"
               :CONDITIONS #H((#1# . (16)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((259 . 259))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71978"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((260 . 260))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71979"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((261 . 261))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71980"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((262 . 262))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71981"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((263 . 263))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71982"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((264 . 264))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71983"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((265 . 265))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71984"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((266 . 266))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71985"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((267 . 267))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71986"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((268 . 268))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71987"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((269 . 269))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71988"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((270 . 270))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71989"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((271 . 271))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71990"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((272 . 272))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71991"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((273 . 273))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71992"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((274 . 274))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71993"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((275 . 275))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71994"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((276 . 276))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71995"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((277 . 277))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71996"
               :CONDITIONS #H((#1# . (16)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((278 . 278))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71997"
               :CONDITIONS #H((#1# . (16)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((279 . 279))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-71999"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((280 . 280))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72000"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((281 . 281))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72001"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((282 . 282))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72002"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((283 . 283))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72003"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((284 . 284))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72004"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((285 . 285))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72005"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((286 . 286))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72006"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((287 . 287))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72007"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((288 . 288))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72008"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((289 . 289))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72009"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((290 . 290))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72010"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((291 . 291))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72011"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((292 . 292))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72012"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((293 . 293))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72013"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((294 . 294))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72014"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((295 . 295))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72015"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((296 . 296))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72016"
               :CONDITIONS #H((#1# . (16)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((297 . 297))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72017"
               :CONDITIONS #H((#1# . (16)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((298 . 298))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72018"
               :CONDITIONS #H((#1# . (16)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((299 . 299))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72019"
               :CONDITIONS #H((#1# . (16)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((300 . 300))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72020"
               :CONDITIONS #H((#1# . (15)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((301 . 301))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72021"
               :CONDITIONS #H((#1# . (15)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((302 . 302))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72034"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((303 . 303))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72035"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((304 . 304))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72036"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((305 . 305))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72037"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((306 . 306))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72038"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((307 . 307))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72039"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((308 . 308))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72040"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((309 . 309))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72041"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((310 . 310))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72042"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((311 . 311))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72043"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((312 . 312))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72044"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((313 . 313))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72045"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((314 . 314))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72046"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((315 . 315))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72047"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((316 . 316))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72048"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((317 . 317))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72049"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((318 . 318))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72050"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((319 . 319))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72051"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((320 . 320))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72052"
               :CONDITIONS #H((#1# . (15)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((321 . 321))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72053"
               :CONDITIONS #H((#1# . (15)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((322 . 322))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72055"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((323 . 323))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72056"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((324 . 324))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72057"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((325 . 325))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72058"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((326 . 326))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72059"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((327 . 327))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72060"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((328 . 328))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72061"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((329 . 329))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72062"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((330 . 330))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72063"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((331 . 331))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72064"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((332 . 332))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72065"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((333 . 333))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72066"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((334 . 334))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72067"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((335 . 335))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72068"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((336 . 336))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72069"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((337 . 337))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72070"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((338 . 338))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72071"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((339 . 339))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72072"
               :CONDITIONS #H((#1# . (15)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((340 . 340))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72073"
               :CONDITIONS #H((#1# . (15)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((341 . 341))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72074"
               :CONDITIONS #H((#1# . (15)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((342 . 342))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72075"
               :CONDITIONS #H((#1# . (15)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((343 . 343))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72076"
               :CONDITIONS #H((#1# . (14)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((344 . 344))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72077"
               :CONDITIONS #H((#1# . (14)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((345 . 345))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72089"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((346 . 346))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72090"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((347 . 347))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72091"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((348 . 348))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72092"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((349 . 349))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72093"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((350 . 350))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72094"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((351 . 351))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72095"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((352 . 352))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72096"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((353 . 353))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72097"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((354 . 354))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72098"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((355 . 355))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72099"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((356 . 356))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72100"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((357 . 357))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72101"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((358 . 358))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72102"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((359 . 359))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72103"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((360 . 360))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72104"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((361 . 361))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72105"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((362 . 362))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72106"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((363 . 363))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72107"
               :CONDITIONS #H((#1# . (14)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((364 . 364))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72108"
               :CONDITIONS #H((#1# . (14)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((365 . 365))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72110"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((366 . 366))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72111"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((367 . 367))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72112"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((368 . 368))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72113"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((369 . 369))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72114"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((370 . 370))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72115"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((371 . 371))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72116"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((372 . 372))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72117"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((373 . 373))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72118"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((374 . 374))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72119"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((375 . 375))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72120"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((376 . 376))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72121"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((377 . 377))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72122"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((378 . 378))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72123"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((379 . 379))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72124"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((380 . 380))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72125"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((381 . 381))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72126"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((382 . 382))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72127"
               :CONDITIONS #H((#1# . (14)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((383 . 383))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72128"
               :CONDITIONS #H((#1# . (14)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((384 . 384))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72129"
               :CONDITIONS #H((#1# . (14)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((385 . 385))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72130"
               :CONDITIONS #H((#1# . (14)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((386 . 386))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72131"
               :CONDITIONS #H((#1# . (13)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((387 . 387))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72132"
               :CONDITIONS #H((#1# . (13)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((388 . 388))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72143"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((389 . 389))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72144"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((390 . 390))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72145"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((391 . 391))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72146"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((392 . 392))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72147"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((393 . 393))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72148"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((394 . 394))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72149"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((395 . 395))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72150"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((396 . 396))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72151"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((397 . 397))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72152"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((398 . 398))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72153"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((399 . 399))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72154"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((400 . 400))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72155"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((401 . 401))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72156"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((402 . 402))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72157"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((403 . 403))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72158"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((404 . 404))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72159"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((405 . 405))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72160"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((406 . 406))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72161"
               :CONDITIONS #H((#1# . (13)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((407 . 407))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72162"
               :CONDITIONS #H((#1# . (13)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((408 . 408))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72164"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((409 . 409))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72165"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((410 . 410))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72166"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((411 . 411))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72167"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((412 . 412))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72168"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((413 . 413))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72169"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((414 . 414))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72170"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((415 . 415))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72171"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((416 . 416))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72172"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((417 . 417))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72173"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((418 . 418))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72174"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((419 . 419))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72175"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((420 . 420))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72176"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((421 . 421))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72177"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((422 . 422))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72178"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((423 . 423))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72179"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((424 . 424))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72180"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((425 . 425))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72181"
               :CONDITIONS #H((#1# . (13)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((426 . 426))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72182"
               :CONDITIONS #H((#1# . (13)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((427 . 427))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72183"
               :CONDITIONS #H((#1# . (13)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((428 . 428))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72184"
               :CONDITIONS #H((#1# . (13)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((429 . 429))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72185"
               :CONDITIONS #H((#1# . (12)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((430 . 430))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72186"
               :CONDITIONS #H((#1# . (12)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((431 . 431))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72196"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((432 . 432))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72197"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((433 . 433))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72198"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((434 . 434))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72199"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((435 . 435))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72200"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((436 . 436))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72201"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((437 . 437))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72202"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((438 . 438))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72203"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((439 . 439))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72204"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((440 . 440))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72205"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((441 . 441))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72206"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((442 . 442))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72207"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((443 . 443))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72208"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((444 . 444))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72209"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((445 . 445))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72210"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((446 . 446))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72211"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((447 . 447))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72212"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((448 . 448))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72213"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((449 . 449))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72214"
               :CONDITIONS #H((#1# . (12)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((450 . 450))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72215"
               :CONDITIONS #H((#1# . (12)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((451 . 451))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72217"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((452 . 452))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72218"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((453 . 453))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72219"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((454 . 454))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72220"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((455 . 455))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72221"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((456 . 456))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72222"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((457 . 457))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72223"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((458 . 458))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72224"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((459 . 459))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72225"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((460 . 460))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72226"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((461 . 461))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72227"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((462 . 462))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72228"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((463 . 463))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72229"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((464 . 464))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72230"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((465 . 465))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72231"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((466 . 466))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72232"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((467 . 467))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72233"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((468 . 468))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72234"
               :CONDITIONS #H((#1# . (12)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((469 . 469))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72235"
               :CONDITIONS #H((#1# . (12)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((470 . 470))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72236"
               :CONDITIONS #H((#1# . (12)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((471 . 471))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72237"
               :CONDITIONS #H((#1# . (12)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((472 . 472))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72238"
               :CONDITIONS #H((#1# . (11)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((473 . 473))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72239"
               :CONDITIONS #H((#1# . (11)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((474 . 474))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72248"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((475 . 475))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72249"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((476 . 476))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72250"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((477 . 477))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72251"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((478 . 478))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72252"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((479 . 479))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72253"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((480 . 480))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72254"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((481 . 481))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72255"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((482 . 482))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72256"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((483 . 483))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72257"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((484 . 484))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72258"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((485 . 485))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72259"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((486 . 486))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72260"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((487 . 487))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72261"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((488 . 488))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72262"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((489 . 489))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72263"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((490 . 490))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72264"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((491 . 491))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72265"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((492 . 492))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72266"
               :CONDITIONS #H((#1# . (11)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((493 . 493))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72267"
               :CONDITIONS #H((#1# . (11)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((494 . 494))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72269"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((495 . 495))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72270"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((496 . 496))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72271"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((497 . 497))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72272"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((498 . 498))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72273"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((499 . 499))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72274"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((500 . 500))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72275"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((501 . 501))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72276"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((502 . 502))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72277"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((503 . 503))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72278"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((504 . 504))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72279"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((505 . 505))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72280"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((506 . 506))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72281"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((507 . 507))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72282"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((508 . 508))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72283"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((509 . 509))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72284"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((510 . 510))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72285"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((511 . 511))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72286"
               :CONDITIONS #H((#1# . (11)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((512 . 512))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72287"
               :CONDITIONS #H((#1# . (11)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((513 . 513))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72288"
               :CONDITIONS #H((#1# . (11)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((514 . 514))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72289"
               :CONDITIONS #H((#1# . (11)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((515 . 515))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72290"
               :CONDITIONS #H((#1# . (10)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((516 . 516))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72291"
               :CONDITIONS #H((#1# . (10)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((517 . 517))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72299"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((518 . 518))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72300"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((519 . 519))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72301"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((520 . 520))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72302"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((521 . 521))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72303"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((522 . 522))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72304"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((523 . 523))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72305"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((524 . 524))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72306"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((525 . 525))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72307"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((526 . 526))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72308"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((527 . 527))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72309"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((528 . 528))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72310"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((529 . 529))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72311"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((530 . 530))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72312"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((531 . 531))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72313"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18
                                                   17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((532 . 532))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72314"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((533 . 533))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72315"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((534 . 534))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72316"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((535 . 535))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72317"
               :CONDITIONS #H((#1# . (10)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((536 . 536))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72318"
               :CONDITIONS #H((#1# . (10)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((537 . 537))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72320"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5 4
                                                   3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((538 . 538))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72321"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6 5
                                                   4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((539 . 539))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72322"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7 6
                                                   5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((540 . 540))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72323"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8 7
                                                   6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((541 . 541))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72324"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8
                                                   7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((542 . 542))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72325"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((543 . 543))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72326"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((544 . 544))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72327"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((545 . 545))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72328"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12 11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((546 . 546))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72329"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14 13
                                                   12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((547 . 547))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72330"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15 14
                                                   13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((548 . 548))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72331"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16 15
                                                   14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((549 . 549))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72332"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17 16
                                                   15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((550 . 550))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72333"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18 17
                                                   16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((551 . 551))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72334"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18
                                                   17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((552 . 552))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72335"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((553 . 553))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72336"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((554 . 554))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72337"
               :CONDITIONS #H((#1# . (10)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((555 . 555))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72338"
               :CONDITIONS #H((#1# . (10)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((556 . 556))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72339"
               :CONDITIONS #H((#1# . (10)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((557 . 557))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72340"
               :CONDITIONS #H((#1# . (10)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((558 . 558))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72341"
               :CONDITIONS #H((#1# . (9)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((559 . 559))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72342"
               :CONDITIONS #H((#1# . (9)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((560 . 560))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72349"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((561 . 561))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72350"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((562 . 562))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72351"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((563 . 563))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72352"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((564 . 564))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72353"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((565 . 565))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72354"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((566 . 566))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72355"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((567 . 567))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72356"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((568 . 568))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72357"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((569 . 569))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72358"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((570 . 570))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72359"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((571 . 571))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72360"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((572 . 572))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72361"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((573 . 573))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72362"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((574 . 574))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72363"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((575 . 575))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72364"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((576 . 576))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72365"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((577 . 577))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72366"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((578 . 578))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72367"
               :CONDITIONS #H((#1# . (9)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((579 . 579))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72368"
               :CONDITIONS #H((#1# . (9)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((580 . 580))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72370"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((581 . 581))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72371"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((582 . 582))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72372"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((583 . 583))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72373"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((584 . 584))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72374"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((585 . 585))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72375"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((586 . 586))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72376"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((587 . 587))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72377"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((588 . 588))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72378"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((589 . 589))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72379"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((590 . 590))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72380"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((591 . 591))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72381"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((592 . 592))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72382"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((593 . 593))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72383"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((594 . 594))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72384"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((595 . 595))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72385"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((596 . 596))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72386"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((597 . 597))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72387"
               :CONDITIONS #H((#1# . (9)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((598 . 598))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72388"
               :CONDITIONS #H((#1# . (9)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((599 . 599))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72389"
               :CONDITIONS #H((#1# . (9)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((600 . 600))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72390"
               :CONDITIONS #H((#1# . (9)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((601 . 601))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72391"
               :CONDITIONS #H((#1# . (8)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((602 . 602))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72392"
               :CONDITIONS #H((#1# . (8)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((603 . 603))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72398"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((604 . 604))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72399"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((605 . 605))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72400"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((606 . 606))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72401"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((607 . 607))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72402"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((608 . 608))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72403"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((609 . 609))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72404"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((610 . 610))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72405"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((611 . 611))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72406"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((612 . 612))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72407"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((613 . 613))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72408"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((614 . 614))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72409"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((615 . 615))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72410"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((616 . 616))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72411"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((617 . 617))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72412"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((618 . 618))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72413"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((619 . 619))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72414"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((620 . 620))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72415"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((621 . 621))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72416"
               :CONDITIONS #H((#1# . (8)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((622 . 622))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72417"
               :CONDITIONS #H((#1# . (8)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((623 . 623))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72419"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((624 . 624))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72420"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((625 . 625))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72421"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((626 . 626))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72422"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((627 . 627))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72423"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((628 . 628))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72424"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((629 . 629))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72425"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((630 . 630))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72426"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((631 . 631))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72427"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((632 . 632))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72428"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((633 . 633))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72429"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((634 . 634))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72430"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((635 . 635))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72431"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((636 . 636))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72432"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((637 . 637))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72433"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((638 . 638))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72434"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((639 . 639))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72435"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((640 . 640))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72436"
               :CONDITIONS #H((#1# . (8)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((641 . 641))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72437"
               :CONDITIONS #H((#1# . (8)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((642 . 642))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72438"
               :CONDITIONS #H((#1# . (8)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((643 . 643))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72439"
               :CONDITIONS #H((#1# . (8)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((644 . 644))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72440"
               :CONDITIONS #H((#1# . (7)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((645 . 645))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72441"
               :CONDITIONS #H((#1# . (7)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((646 . 646))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72446"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((647 . 647))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72447"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((648 . 648))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72448"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((649 . 649))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72449"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((650 . 650))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72450"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((651 . 651))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72451"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((652 . 652))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72452"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((653 . 653))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72453"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((654 . 654))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72454"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((655 . 655))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72455"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((656 . 656))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72456"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((657 . 657))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72457"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((658 . 658))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72458"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((659 . 659))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72459"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((660 . 660))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72460"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((661 . 661))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72461"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((662 . 662))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72462"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((663 . 663))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72463"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((664 . 664))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72464"
               :CONDITIONS #H((#1# . (7)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((665 . 665))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72465"
               :CONDITIONS #H((#1# . (7)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((666 . 666))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72467"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((667 . 667))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72468"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((668 . 668))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72469"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((669 . 669))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72470"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((670 . 670))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72471"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((671 . 671))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72472"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((672 . 672))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72473"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((673 . 673))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72474"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((674 . 674))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72475"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((675 . 675))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72476"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((676 . 676))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72477"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((677 . 677))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72478"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((678 . 678))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72479"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((679 . 679))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72480"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((680 . 680))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72481"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((681 . 681))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72482"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((682 . 682))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72483"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((683 . 683))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72484"
               :CONDITIONS #H((#1# . (7)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((684 . 684))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72485"
               :CONDITIONS #H((#1# . (7)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((685 . 685))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72486"
               :CONDITIONS #H((#1# . (7)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((686 . 686))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72487"
               :CONDITIONS #H((#1# . (7)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((687 . 687))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72488"
               :CONDITIONS #H((#1# . (6)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((688 . 688))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72489"
               :CONDITIONS #H((#1# . (6)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((689 . 689))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72493"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((690 . 690))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72494"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((691 . 691))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72495"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((692 . 692))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72496"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((693 . 693))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72497"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((694 . 694))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72498"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((695 . 695))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72499"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((696 . 696))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72500"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((697 . 697))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72501"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((698 . 698))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72502"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((699 . 699))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72503"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((700 . 700))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72504"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((701 . 701))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72505"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((702 . 702))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72506"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((703 . 703))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72507"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((704 . 704))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72508"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((705 . 705))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72509"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((706 . 706))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72510"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((707 . 707))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72511"
               :CONDITIONS #H((#1# . (6)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((708 . 708))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72512"
               :CONDITIONS #H((#1# . (6)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((709 . 709))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72514"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((710 . 710))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72515"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((711 . 711))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72516"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((712 . 712))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72517"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((713 . 713))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72518"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((714 . 714))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72519"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((715 . 715))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72520"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((716 . 716))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72521"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((717 . 717))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72522"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((718 . 718))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72523"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((719 . 719))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72524"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((720 . 720))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72525"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((721 . 721))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72526"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((722 . 722))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72527"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((723 . 723))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72528"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((724 . 724))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72529"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((725 . 725))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72530"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((726 . 726))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72531"
               :CONDITIONS #H((#1# . (6)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((727 . 727))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72532"
               :CONDITIONS #H((#1# . (6)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((728 . 728))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72533"
               :CONDITIONS #H((#1# . (6)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((729 . 729))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72534"
               :CONDITIONS #H((#1# . (6)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((730 . 730))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72535"
               :CONDITIONS #H((#1# . (2)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((731 . 731))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72536"
               :CONDITIONS #H((#1# . (2)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((732 . 732))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72554"
               :CONDITIONS #H((#1# . (2)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((733 . 733))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72555"
               :CONDITIONS #H((#1# . (2)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 0.04663928
               :BLOCK #H((734 . 734))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72556"
               :CONDITIONS #H((#1# . (2)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((735 . 735))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72557"
               :CONDITIONS #H((#1# . (2)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((736 . 736))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72558"
               :CONDITIONS #H((#1# . (2)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((737 . 737))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72559"
               :CONDITIONS #H((#1# . (5)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((738 . 738))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72560"
               :CONDITIONS #H((#1# . (5)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((739 . 739))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72563"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((740 . 740))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72564"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((741 . 741))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72565"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((742 . 742))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72566"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((743 . 743))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72567"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((744 . 744))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72568"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((745 . 745))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72569"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((746 . 746))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72570"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((747 . 747))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72571"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((748 . 748))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72572"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((749 . 749))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72573"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((750 . 750))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72574"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((751 . 751))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72575"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((752 . 752))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72576"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((753 . 753))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72577"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((754 . 754))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72578"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((755 . 755))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72579"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((756 . 756))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72580"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((757 . 757))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72581"
               :CONDITIONS #H((#1# . (5)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((758 . 758))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72582"
               :CONDITIONS #H((#1# . (5)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((759 . 759))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72584"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((760 . 760))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72585"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((761 . 761))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72586"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((762 . 762))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72587"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((763 . 763))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72588"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((764 . 764))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72589"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((765 . 765))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72590"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((766 . 766))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72591"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((767 . 767))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72592"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((768 . 768))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72593"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((769 . 769))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72594"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((770 . 770))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72595"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((771 . 771))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72596"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((772 . 772))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72597"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((773 . 773))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72598"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((774 . 774))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72599"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((775 . 775))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72600"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((776 . 776))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72601"
               :CONDITIONS #H((#1# . (5)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((777 . 777))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72602"
               :CONDITIONS #H((#1# . (5)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((778 . 778))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72603"
               :CONDITIONS #H((#1# . (5)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((779 . 779))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72604"
               :CONDITIONS #H((#1# . (5)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((780 . 780))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72605"
               :CONDITIONS #H((#1# . (4)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((781 . 781))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72606"
               :CONDITIONS #H((#1# . (4)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((782 . 782))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72608"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((783 . 783))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72609"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((784 . 784))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72610"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((785 . 785))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72611"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((786 . 786))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72612"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((787 . 787))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72613"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((788 . 788))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72614"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((789 . 789))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72615"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((790 . 790))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72616"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((791 . 791))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72617"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((792 . 792))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72618"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((793 . 793))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72619"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((794 . 794))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72620"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((795 . 795))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72621"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((796 . 796))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72622"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((797 . 797))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72623"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((798 . 798))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72624"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((799 . 799))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72625"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((800 . 800))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72626"
               :CONDITIONS #H((#1# . (4)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((801 . 801))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72627"
               :CONDITIONS #H((#1# . (4)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((802 . 802))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72629"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((803 . 803))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72630"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((804 . 804))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72631"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((805 . 805))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72632"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((806 . 806))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72633"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((807 . 807))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72634"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((808 . 808))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72635"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((809 . 809))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72636"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((810 . 810))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72637"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((811 . 811))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72638"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((812 . 812))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72639"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((813 . 813))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72640"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((814 . 814))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72641"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((815 . 815))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72642"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((816 . 816))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72643"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((817 . 817))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72644"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((818 . 818))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72645"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((819 . 819))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72646"
               :CONDITIONS #H((#1# . (4)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((820 . 820))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72647"
               :CONDITIONS #H((#1# . (4)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((821 . 821))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72648"
               :CONDITIONS #H((#1# . (4)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((822 . 822))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72649"
               :CONDITIONS #H((#1# . (4)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((823 . 823))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72650"
               :CONDITIONS #H((#1# . (1)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((824 . 824))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72651"
               :CONDITIONS #H((#1# . (1)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((825 . 825))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72669"
               :CONDITIONS #H((#1# . (1)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((826 . 826))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72670"
               :CONDITIONS #H((#1# . (1)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 0.04663928
               :BLOCK #H((827 . 827))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72671"
               :CONDITIONS #H((#1# . (1)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((828 . 828))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72672"
               :CONDITIONS #H((#1# . (1)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((829 . 829))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72673"
               :CONDITIONS #H((#1# . (1)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((830 . 830))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72674"
               :CONDITIONS #H((#1# . (3)) (#2# . (0)) (#3# . (2 1)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((831 . 831))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72675"
               :CONDITIONS #H((#1# . (3)) (#2# . (0)) (#3# . (0)))
               :PROBABILITY 1.5514091e-8
               :BLOCK #H((832 . 832))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72676"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((833 . 833))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72677"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((834 . 834))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72678"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((835 . 835))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72679"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((836 . 836))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72680"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((837 . 837))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72681"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((838 . 838))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72682"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((839 . 839))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72683"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((840 . 840))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72684"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((841 . 841))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72685"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((842 . 842))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72686"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((843 . 843))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72687"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((844 . 844))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72688"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((845 . 845))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72689"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((846 . 846))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72690"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((847 . 847))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72691"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((848 . 848))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72692"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((849 . 849))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72693"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((850 . 850))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72694"
               :CONDITIONS #H((#1# . (3)) (#3# . (21)) (#2# . (0)))
               :PROBABILITY 3.342899e-10
               :BLOCK #H((851 . 851))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72695"
               :CONDITIONS #H((#1# . (3)) (#3# . (0)) (#2# . (1)))
               :PROBABILITY 0.0021644866
               :BLOCK #H((852 . 852))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72697"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5 4
                                                  3)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((853 . 853))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72698"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6 5
                                                  4)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((854 . 854))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72699"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6
                                                  5)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((855 . 855))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72700"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7 6)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((856 . 856))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72701"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8 7)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((857 . 857))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72702"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9 8)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((858 . 858))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72703"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10 9)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((859 . 859))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72704"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11 10)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((860 . 860))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72705"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13 12
                                                  11)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((861 . 861))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72706"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14 13
                                                  12)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((862 . 862))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72707"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15 14
                                                  13)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((863 . 863))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72708"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16 15
                                                  14)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((864 . 864))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72709"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17 16
                                                  15)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((865 . 865))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72710"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17
                                                  16)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((866 . 866))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72711"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18 17)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((867 . 867))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72712"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19 18)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((868 . 868))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72713"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20 19)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((869 . 869))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72714"
               :CONDITIONS #H((#1# . (3)) (#3# . (21 20)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((870 . 870))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72715"
               :CONDITIONS #H((#1# . (3)) (#3# . (21)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((871 . 871))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72716"
               :CONDITIONS #H((#1# . (3)) (#3# . (1)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((872 . 872))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1)
            #S(HEMS::RULE
               :ID "RULE-72717"
               :CONDITIONS #H((#1# . (3)) (#3# . (2)) (#2# . (1)))
               :PROBABILITY 4.6639278e-5
               :BLOCK #H((873 . 873))
               :CERTAIN-BLOCK NIL
               :AVOID-LIST NIL
               :REDUNDANCIES NIL
               :COUNT 1))
   :CONCEPT-BLOCKS #H((0.0 . #H((1 . #H((0 . 0) (1 . 1) (2 . 2) (3 . 3) (4 . 4) (5 . 5) (6 . 6) (7 . 7) (8 . 8) (9 . 9) (10 . 10) (11 . 11) (12 . 12) (13 . 13) (14 . 14) (15 . 15) (16 . 16) (17 . 17) (18 . 18) (19 . 19) (20 . 20) (21 . 21) (22 . 22) (23 . 23) (24 . 24) (25 . 25) (26 . 26) (27 . 27) (28 . 28) (29 . 29) (30 . 30) (31 . 31) (32 . 32) (33 . 33) (34 . 34) (35 . 35) (36 . 36) (37 . 37) (38 . 38) (39 . 39) (40 . 40) (41 . 41) (42 . 42))))) (1.5514091e-8 . #H((1 . #H((43 . 43) (44 . 44) (86 . 86) (87 . 87) (129 . 129) (130 . 130) (172 . 172) (173 . 173) (215 . 215) (216 . 216) (258 . 258) (259 . 259) (301 . 301) (302 . 302) (344 . 344) (345 . 345) (387 . 387) (388 . 388) (430 . 430) (431 . 431) (473 . 473) (474 . 474) (516 . 516) (517 . 517) (559 . 559) (560 . 560) (602 . 602) (603 . 603) (645 . 645) (646 . 646) (688 . 688) (689 . 689) (731 . 731) (732 . 732) (738 . 738) (739 . 739) (781 . 781) (782 . 782) (824 . 824) (825 . 825) (831 . 831) (832 . 832))))) (3.342899e-10 . #H((1 . #H((45 . 45) (46 . 46) (47 . 47) (48 . 48) (49 . 49) (50 . 50) (51 . 51) (52 . 52) (53 . 53) (54 . 54) (55 . 55) (56 . 56) (57 . 57) (58 . 58) (59 . 59) (60 . 60) (61 . 61) (62 . 62) (63 . 63) (88 . 88) (89 . 89) (90 . 90) (91 . 91) (92 . 92) (93 . 93) (94 . 94) (95 . 95) (96 . 96) (97 . 97) (98 . 98) (99 . 99) (100 . 100) (101 . 101) (102 . 102) (103 . 103) (104 . 104) (105 . 105) (106 . 106) (131 . 131) (132 . 132) (133 . 133) (134 . 134) (135 . 135) (136 . 136) (137 . 137) (138 . 138) (139 . 139) (140 . 140) (141 . 141) (142 . 142) (143 . 143) (144 . 144) (145 . 145) (146 . 146) (147 . 147) (148 . 148) (149 . 149) (174 . 174) (175 . 175) (176 . 176) (177 . 177) (178 . 178) (179 . 179) (180 . 180) (181 . 181) (182 . 182) (183 . 183) (184 . 184) (185 . 185) (186 . 186) (187 . 187) (188 . 188) (189 . 189) (190 . 190) (191 . 191) (192 . 192) (217 . 217) (218 . 218) (219 . 219) (220 . 220) (221 . 221) (222 . 222) (223 . 223) (224 . 224) (225 . 225) (226 . 226) (227 . 227) (228 . 228) (229 . 229) (230 . 230) (231 . 231) (232 . 232) (233 . 233) (234 . 234) (235 . 235) (260 . 260) (261 . 261) (262 . 262) (263 . 263) (264 . 264) (265 . 265) (266 . 266) (267 . 267) (268 . 268) (269 . 269) (270 . 270) (271 . 271) (272 . 272) (273 . 273) (274 . 274) (275 . 275) (276 . 276) (277 . 277) (278 . 278) (303 . 303) (304 . 304) (305 . 305) (306 . 306) (307 . 307) (308 . 308) (309 . 309) (310 . 310) (311 . 311) (312 . 312) (313 . 313) (314 . 314) (315 . 315) (316 . 316) (317 . 317) (318 . 318) (319 . 319) (320 . 320) (321 . 321) (346 . 346) (347 . 347) (348 . 348) (349 . 349) (350 . 350) (351 . 351) (352 . 352) (353 . 353) (354 . 354) (355 . 355) (356 . 356) (357 . 357) (358 . 358) (359 . 359) (360 . 360) (361 . 361) (362 . 362) (363 . 363) (364 . 364) (389 . 389) (390 . 390) (391 . 391) (392 . 392) (393 . 393) (394 . 394) (395 . 395) (396 . 396) (397 . 397) (398 . 398) (399 . 399) (400 . 400) (401 . 401) (402 . 402) (403 . 403) (404 . 404) (405 . 405) (406 . 406) (407 . 407) (432 . 432) (433 . 433) (434 . 434) (435 . 435) (436 . 436) (437 . 437) (438 . 438) (439 . 439) (440 . 440) (441 . 441) (442 . 442) (443 . 443) (444 . 444) (445 . 445) (446 . 446) (447 . 447) (448 . 448) (449 . 449) (450 . 450) (475 . 475) (476 . 476) (477 . 477) (478 . 478) (479 . 479) (480 . 480) (481 . 481) (482 . 482) (483 . 483) (484 . 484) (485 . 485) (486 . 486) (487 . 487) (488 . 488) (489 . 489) (490 . 490) (491 . 491) (492 . 492) (493 . 493) (518 . 518) (519 . 519) (520 . 520) (521 . 521) (522 . 522) (523 . 523) (524 . 524) (525 . 525) (526 . 526) (527 . 527) (528 . 528) (529 . 529) (530 . 530) (531 . 531) (532 . 532) (533 . 533) (534 . 534) (535 . 535) (536 . 536) (561 . 561) (562 . 562) (563 . 563) (564 . 564) (565 . 565) (566 . 566) (567 . 567) (568 . 568) (569 . 569) (570 . 570) (571 . 571) (572 . 572) (573 . 573) (574 . 574) (575 . 575) (576 . 576) (577 . 577) (578 . 578) (579 . 579) (604 . 604) (605 . 605) (606 . 606) (607 . 607) (608 . 608) (609 . 609) (610 . 610) (611 . 611) (612 . 612) (613 . 613) (614 . 614) (615 . 615) (616 . 616) (617 . 617) (618 . 618) (619 . 619) (620 . 620) (621 . 621) (622 . 622) (647 . 647) (648 . 648) (649 . 649) (650 . 650) (651 . 651) (652 . 652) (653 . 653) (654 . 654) (655 . 655) (656 . 656) (657 . 657) (658 . 658) (659 . 659) (660 . 660) (661 . 661) (662 . 662) (663 . 663) (664 . 664) (665 . 665) (690 . 690) (691 . 691) (692 . 692) (693 . 693) (694 . 694) (695 . 695) (696 . 696) (697 . 697) (698 . 698) (699 . 699) (700 . 700) (701 . 701) (702 . 702) (703 . 703) (704 . 704) (705 . 705) (706 . 706) (707 . 707) (708 . 708) (733 . 733) (740 . 740) (741 . 741) (742 . 742) (743 . 743) (744 . 744) (745 . 745) (746 . 746) (747 . 747) (748 . 748) (749 . 749) (750 . 750) (751 . 751) (752 . 752) (753 . 753) (754 . 754) (755 . 755) (756 . 756) (757 . 757) (758 . 758) (783 . 783) (784 . 784) (785 . 785) (786 . 786) (787 . 787) (788 . 788) (789 . 789) (790 . 790) (791 . 791) (792 . 792) (793 . 793) (794 . 794) (795 . 795) (796 . 796) (797 . 797) (798 . 798) (799 . 799) (800 . 800) (801 . 801) (826 . 826) (833 . 833) (834 . 834) (835 . 835) (836 . 836) (837 . 837) (838 . 838) (839 . 839) (840 . 840) (841 . 841) (842 . 842) (843 . 843) (844 . 844) (845 . 845) (846 . 846) (847 . 847) (848 . 848) (849 . 849) (850 . 850) (851 . 851))))) (0.0021644866 . #H((1 . #H((64 . 64) (107 . 107) (150 . 150) (193 . 193) (236 . 236) (279 . 279) (322 . 322) (365 . 365) (408 . 408) (451 . 451) (494 . 494) (537 . 537) (580 . 580) (623 . 623) (666 . 666) (709 . 709) (735 . 735) (759 . 759) (802 . 802) (828 . 828) (852 . 852))))) (4.6639278e-5 . #H((1 . #H((65 . 65) (66 . 66) (67 . 67) (68 . 68) (69 . 69) (70 . 70) (71 . 71) (72 . 72) (73 . 73) (74 . 74) (75 . 75) (76 . 76) (77 . 77) (78 . 78) (79 . 79) (80 . 80) (81 . 81) (82 . 82) (83 . 83) (84 . 84) (85 . 85) (108 . 108) (109 . 109) (110 . 110) (111 . 111) (112 . 112) (113 . 113) (114 . 114) (115 . 115) (116 . 116) (117 . 117) (118 . 118) (119 . 119) (120 . 120) (121 . 121) (122 . 122) (123 . 123) (124 . 124) (125 . 125) (126 . 126) (127 . 127) (128 . 128) (151 . 151) (152 . 152) (153 . 153) (154 . 154) (155 . 155) (156 . 156) (157 . 157) (158 . 158) (159 . 159) (160 . 160) (161 . 161) (162 . 162) (163 . 163) (164 . 164) (165 . 165) (166 . 166) (167 . 167) (168 . 168) (169 . 169) (170 . 170) (171 . 171) (194 . 194) (195 . 195) (196 . 196) (197 . 197) (198 . 198) (199 . 199) (200 . 200) (201 . 201) (202 . 202) (203 . 203) (204 . 204) (205 . 205) (206 . 206) (207 . 207) (208 . 208) (209 . 209) (210 . 210) (211 . 211) (212 . 212) (213 . 213) (214 . 214) (237 . 237) (238 . 238) (239 . 239) (240 . 240) (241 . 241) (242 . 242) (243 . 243) (244 . 244) (245 . 245) (246 . 246) (247 . 247) (248 . 248) (249 . 249) (250 . 250) (251 . 251) (252 . 252) (253 . 253) (254 . 254) (255 . 255) (256 . 256) (257 . 257) (280 . 280) (281 . 281) (282 . 282) (283 . 283) (284 . 284) (285 . 285) (286 . 286) (287 . 287) (288 . 288) (289 . 289) (290 . 290) (291 . 291) (292 . 292) (293 . 293) (294 . 294) (295 . 295) (296 . 296) (297 . 297) (298 . 298) (299 . 299) (300 . 300) (323 . 323) (324 . 324) (325 . 325) (326 . 326) (327 . 327) (328 . 328) (329 . 329) (330 . 330) (331 . 331) (332 . 332) (333 . 333) (334 . 334) (335 . 335) (336 . 336) (337 . 337) (338 . 338) (339 . 339) (340 . 340) (341 . 341) (342 . 342) (343 . 343) (366 . 366) (367 . 367) (368 . 368) (369 . 369) (370 . 370) (371 . 371) (372 . 372) (373 . 373) (374 . 374) (375 . 375) (376 . 376) (377 . 377) (378 . 378) (379 . 379) (380 . 380) (381 . 381) (382 . 382) (383 . 383) (384 . 384) (385 . 385) (386 . 386) (409 . 409) (410 . 410) (411 . 411) (412 . 412) (413 . 413) (414 . 414) (415 . 415) (416 . 416) (417 . 417) (418 . 418) (419 . 419) (420 . 420) (421 . 421) (422 . 422) (423 . 423) (424 . 424) (425 . 425) (426 . 426) (427 . 427) (428 . 428) (429 . 429) (452 . 452) (453 . 453) (454 . 454) (455 . 455) (456 . 456) (457 . 457) (458 . 458) (459 . 459) (460 . 460) (461 . 461) (462 . 462) (463 . 463) (464 . 464) (465 . 465) (466 . 466) (467 . 467) (468 . 468) (469 . 469) (470 . 470) (471 . 471) (472 . 472) (495 . 495) (496 . 496) (497 . 497) (498 . 498) (499 . 499) (500 . 500) (501 . 501) (502 . 502) (503 . 503) (504 . 504) (505 . 505) (506 . 506) (507 . 507) (508 . 508) (509 . 509) (510 . 510) (511 . 511) (512 . 512) (513 . 513) (514 . 514) (515 . 515) (538 . 538) (539 . 539) (540 . 540) (541 . 541) (542 . 542) (543 . 543) (544 . 544) (545 . 545) (546 . 546) (547 . 547) (548 . 548) (549 . 549) (550 . 550) (551 . 551) (552 . 552) (553 . 553) (554 . 554) (555 . 555) (556 . 556) (557 . 557) (558 . 558) (581 . 581) (582 . 582) (583 . 583) (584 . 584) (585 . 585) (586 . 586) (587 . 587) (588 . 588) (589 . 589) (590 . 590) (591 . 591) (592 . 592) (593 . 593) (594 . 594) (595 . 595) (596 . 596) (597 . 597) (598 . 598) (599 . 599) (600 . 600) (601 . 601) (624 . 624) (625 . 625) (626 . 626) (627 . 627) (628 . 628) (629 . 629) (630 . 630) (631 . 631) (632 . 632) (633 . 633) (634 . 634) (635 . 635) (636 . 636) (637 . 637) (638 . 638) (639 . 639) (640 . 640) (641 . 641) (642 . 642) (643 . 643) (644 . 644) (667 . 667) (668 . 668) (669 . 669) (670 . 670) (671 . 671) (672 . 672) (673 . 673) (674 . 674) (675 . 675) (676 . 676) (677 . 677) (678 . 678) (679 . 679) (680 . 680) (681 . 681) (682 . 682) (683 . 683) (684 . 684) (685 . 685) (686 . 686) (687 . 687) (710 . 710) (711 . 711) (712 . 712) (713 . 713) (714 . 714) (715 . 715) (716 . 716) (717 . 717) (718 . 718) (719 . 719) (720 . 720) (721 . 721) (722 . 722) (723 . 723) (724 . 724) (725 . 725) (726 . 726) (727 . 727) (728 . 728) (729 . 729) (730 . 730) (736 . 736) (737 . 737) (760 . 760) (761 . 761) (762 . 762) (763 . 763) (764 . 764) (765 . 765) (766 . 766) (767 . 767) (768 . 768) (769 . 769) (770 . 770) (771 . 771) (772 . 772) (773 . 773) (774 . 774) (775 . 775) (776 . 776) (777 . 777) (778 . 778) (779 . 779) (780 . 780) (803 . 803) (804 . 804) (805 . 805) (806 . 806) (807 . 807) (808 . 808) (809 . 809) (810 . 810) (811 . 811) (812 . 812) (813 . 813) (814 . 814) (815 . 815) (816 . 816) (817 . 817) (818 . 818) (819 . 819) (820 . 820) (821 . 821) (822 . 822) (823 . 823) (829 . 829) (830 . 830) (853 . 853) (854 . 854) (855 . 855) (856 . 856) (857 . 857) (858 . 858) (859 . 859) (860 . 860) (861 . 861) (862 . 862) (863 . 863) (864 . 864) (865 . 865) (866 . 866) (867 . 867) (868 . 868) (869 . 869) (870 . 870) (871 . 871) (872 . 872) (873 . 873))))) (0.04663928 . #H((1 . #H((734 . 734) (827 . 827))))))
   :PRIOR (HEMS::PERCEPT-NODE HEMS::PRIOR :VALUES
           ((:VALUE #8# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE "150" :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #10# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #12# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE "450" :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #14# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #16# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #18# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #20# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #22# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #24# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #26# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #28# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #30# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #32# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #34# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #36# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #38# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #40# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #42# :PROBABILITY 1/21 :COUNT NIL)
            (:VALUE #44# :PROBABILITY 1/21 :COUNT NIL)))
   :SINGLETON-P NIL
   :COUNT NIL
   :LVL 1))
|#

